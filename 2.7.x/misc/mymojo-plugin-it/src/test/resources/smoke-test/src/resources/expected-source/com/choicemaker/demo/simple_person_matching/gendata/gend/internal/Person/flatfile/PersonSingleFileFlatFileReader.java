// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.demo.simple_person_matching.gendata.gend.internal.Person.flatfile;
import java.util.logging.*;
import java.util.*;
import java.io.*;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import com.choicemaker.cm.io.flatfile.base.*;
import com.choicemaker.demo.simple_person_matching.gendata.gend.internal.Person.*;
import java.util.Date;
import com.choicemaker.util.StringUtils;
public final class PersonSingleFileFlatFileReader implements FlatFileReader {
private static Logger logger = Logger.getLogger(com.choicemaker.demo.simple_person_matching.gendata.gend.internal.Person.flatfile.PersonSingleFileFlatFileReader.class.getName());
private Tokenizer tokenizer;
private boolean tagged;
private boolean singleLine;
private static DerivedSource src = DerivedSource.valueOf("flatfile");
public PersonSingleFileFlatFileReader(Tokenizer tokenizer, boolean tagged, boolean singleLine) {
this.tokenizer = tokenizer;
this.tagged = tagged;
this.singleLine = singleLine;
}
public void open() {}
public Record getRecord() throws IOException {
Record r = getRecordPersonImpl();
r.computeValidityAndDerived(src);
return r;
}
private PersonImpl getRecordPersonImpl() throws IOException {
if(tagged && tokenizer.tag != "0") {
throw new IOException("Illegal tag: " + tokenizer.tag);
}
PersonImpl o__PersonImpl = new PersonImpl();
o__PersonImpl.linkage_role = tokenizer.nextTrimedString(32);
o__PersonImpl.entityId = tokenizer.nextInt(11);
o__PersonImpl.recordId = tokenizer.nextInt(11);
o__PersonImpl.ssn = tokenizer.nextTrimedString(32);
o__PersonImpl.firstName = tokenizer.nextTrimedString(32);
o__PersonImpl.middleName = tokenizer.nextTrimedString(32);
o__PersonImpl.lastName = tokenizer.nextTrimedString(32);
o__PersonImpl.streetNumber = tokenizer.nextTrimedString(32);
o__PersonImpl.streetName = tokenizer.nextTrimedString(32);
o__PersonImpl.apartmentNumber = tokenizer.nextTrimedString(32);
o__PersonImpl.city = tokenizer.nextTrimedString(32);
o__PersonImpl.state = tokenizer.nextTrimedString(32);
o__PersonImpl.zip = tokenizer.nextTrimedString(32);
if(!singleLine) tokenizer.readLine();
return o__PersonImpl;
}
}
