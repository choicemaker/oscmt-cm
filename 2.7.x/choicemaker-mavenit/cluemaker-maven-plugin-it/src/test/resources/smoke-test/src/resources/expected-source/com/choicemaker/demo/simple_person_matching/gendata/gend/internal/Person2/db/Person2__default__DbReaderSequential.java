// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.demo.simple_person_matching.gendata.gend.internal.Person2.db;
import java.util.logging.*;
import java.util.*;
import java.sql.*;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import com.choicemaker.cm.io.db.base.*;
import com.choicemaker.demo.simple_person_matching.gendata.gend.internal.Person2.*;
import java.util.Date;
import com.choicemaker.util.StringUtils;
import com.choicemaker.cm.validation.eclipse.impl.Validators;
public final class Person2__default__DbReaderSequential implements DbReaderSequential {
private static Logger logger = Logger.getLogger(com.choicemaker.demo.simple_person_matching.gendata.gend.internal.Person2.db.Person2__default__DbReaderSequential.class.getName());
private ResultSet rs;
private List res = new ArrayList();
private int resSize;
private Iterator iRes;
private ArrayList l = new ArrayList();
private static DerivedSource src = DerivedSource.valueOf("db");
public String getName() {
return "Person2:r:default";
}
public void open(ResultSet rs, Statement stmt) throws java.sql.SQLException {
this.rs = rs;
getRecordPersonImpl();
resSize = res.size();
if(resSize != 0) {
}
rs.close();
iRes = res.iterator();
l = null;
}
public Record getNext() {
Record r = (Record)iRes.next();
r.computeValidityAndDerived(src);
return r;
}
public boolean hasNext() {
return iRes.hasNext();
}
public int getNoCursors() {
return Person2__default__DbReaderParallel.NO_CURSORS;
}
private void getRecordPersonImpl() throws java.sql.SQLException {
String __tmpStr;
while(rs.next()) {
PersonImpl r = new PersonImpl();
r.linkage_role = rs.getString(1);
r.entityId = rs.getInt(2);
r.recordId = rs.getInt(3);
r.ssn = rs.getString(4);
r.firstName = rs.getString(5);
r.middleName = rs.getString(6);
r.lastName = rs.getString(7);
r.streetNumber = rs.getString(8);
r.streetName = rs.getString(9);
r.apartmentNumber = rs.getString(10);
r.city = rs.getString(11);
r.state = rs.getString(12);
r.zip = rs.getString(13);
res.add(r);
}
}
public String getMasterId() {
return Person2__default__DbReaderParallel.masterId;
}
public String getMasterIdType() {
return Person2__default__DbReaderParallel.masterIdType;
}
public DbView[] getViews() {
return Person2__default__DbReaderParallel.views;
}
}
