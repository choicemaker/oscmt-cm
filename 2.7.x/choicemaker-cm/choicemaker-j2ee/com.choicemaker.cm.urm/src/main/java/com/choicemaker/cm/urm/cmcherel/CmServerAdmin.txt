/*
 * RecordMatcher.java       Revision: 2.5  Date: Jun 28, 2005 9:41:18 AM 
 *
 * Copyright (c) 2001 ChoiceMaker Technologies, Inc.
 * 48 Wall Street, 11th Floor, New York, NY 10005
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * ChoiceMaker Technologies Inc. ("Confidential Information").
 */
package com.choicemaker.cm.urm.cmcherel;

import java.rmi.RemoteException;

import javax.ejb.EJBObject;

import com.choicemaker.cm.urm.base.DbRecordCollection;
import com.choicemaker.cm.urm.exceptions.ArgumentException;
import com.choicemaker.cm.urm.exceptions.CmRuntimeException;
import com.choicemaker.cm.urm.exceptions.ConfigException;
import com.choicemaker.cm.urm.exceptions.ModelException;
import com.choicemaker.cm.urm.exceptions.RecordCollectionException;

/**
 * Allows a client application to execute administrative tasks such as updating derived fields and frequency counts. 
 * 
 * 
 * @author emoussikaev
 * @version Revision: 2.5  Date: Jun 28, 2005 2:40:13 PM
 * @see
 */
//TODO: code sample
public interface CmServerAdmin extends EJBObject {

	/**
	 * Updates the counts used for the specified probability model. This method should be called
	 * whenever the database has grown by roughly 20% in size or after adding many records with
	 * similar characteristics, e.g., people with same year of birth.
	 * 
	 * ChoiceMaker uses a counts table in the first-pass matching step (blocking) to find
	 * the best tradeoff between speed and accuracy.
	 * 
	 * Typically this function is called by a scheduler.  
	 * 
	 * @param	confName	the name of the configuration that stores the matching process parameters. 
	 * @param   urlString URL that defines the database. 
	 
	 * @throws ArgumentException
	 * @throws RecordCollectionException
	 * @throws ConfigException
	 * @throws ModelException
	 * @throws CmRuntimeException
	 * @throws RemoteException
	 *
	 */
	void updateCounts(String confName, String urlString)
		throws
			ArgumentException,
			RecordCollectionException,
			ConfigException,
			ModelException,
			CmRuntimeException,
			RemoteException;

	/**
	 * Updates derived fields for all records that have changed.
	 * This method is only used for databases that do not update
	 * derived fields via triggers.
	 * <p>
	 * As an optimization, records that have changed should be marked
	 * with a dirty flag, so that derived fields of unchanged records
	 * are not recalculated.</p>
	 * <p>
	 * @param	confName	the name of the configuration that stores the matching process parameters.
	 * @param rc The database record collection that defines the database and db configuration
	 * 			 that will be updated. 
	 * @throws ArgumentException
	 * @throws RecordCollectionException
	 * @throws ConfigException
	 * @throws ModelException
	 * @throws CmRuntimeException
	 * @throws RemoteException	 
	 */

	void updateDerivedFields(String confName, DbRecordCollection rc)
		throws
			ArgumentException,
			RecordCollectionException,
			ConfigException,
			ModelException,
			CmRuntimeException,
			RemoteException;

	/**
	 * Updates derived fields for all records, regardless of whether they
	 * have changed. This method is only used for databases that do not update
	 * derived fields via triggers.</p>
	 * <p>
	 * As an optimization, records that have changed should be marked
	 * with a dirty flag, so that derived fields of unchanged records
	 * are not recalculated.</p>
	 * 
	 * @param	confName	the name of the configuration that stores the matching process parameters.
	 * @param rc The database record collection that defines the database and db configuration
	 * 			 that will be updated. 
	 * @throws ArgumentException
	 * @throws RecordCollectionException
	 * @throws ConfigException
	 * @throws ModelException
	 * @throws CmRuntimeException
	 * @throws RemoteException	 
	 */
	void updateAllDerivedFields(String confName, DbRecordCollection rc)
		throws
			ArgumentException,
			RecordCollectionException,
			ConfigException,
			ModelException,
			CmRuntimeException,
			RemoteException;
			
	/**
	 * Removes all job tracking information from the database
	 * 
	 * @throws ArgumentException
	 * @throws RecordCollectionException
	 * @throws ConfigException
	 * @throws ModelException
	 * @throws CmRuntimeException
	 * @throws RemoteException	 
	 */			
	void cleanJobs()		
			throws
				ArgumentException,
				RecordCollectionException,
				ConfigException,
				ModelException,
				CmRuntimeException,
				RemoteException;

	/**
	 * Returns names of all configurations stored by CM Server
	 * <p>
	 * 
	 * @return an array of names 
	 * 
	 * @throws ConfigException
	 * @throws CmRuntimeException
	 * @throws RemoteException	 
	 */

	String[]  getCmConfigurationNames()
					throws  ConfigException,
							CmRuntimeException, 
							RemoteException;
	/**
	 * Returns a <code>Property</code> object with all configuration parameters of names of the <code>confName</code> configuration.
	 * <p>
	 * 
	 * @param confName name of a configuration
	 *  
	 * @return An object with all <code>confName</code> configuration parameters 
	 * 
	 * @throws ConfigException
	 * @throws CmRuntimeException
	 * @throws RemoteException	 
	 */							
	CmConfiguration getCmConfiguration(String confName)
					throws  ArgumentException,
							ConfigException,
							CmRuntimeException, 
							RemoteException;

	/**
	 * Returns names of all configurations stored by CM Server
	 * <p>
	 * 
	 * 
	 * @return an array of names 
	 * 
	 * @throws ConfigException
	 * @throws CmRuntimeException
	 * @throws RemoteException	 
	 */

	String[]  getFilterConfigurationNames()
					throws  ConfigException,
							CmRuntimeException, 
							RemoteException;
	/**
	 * Returns a <code>Property</code> object with all configuration parameters of names of the <code>confName</code> configuration.
	 * <p>
	 * 
	 * @param confName name of a configuration
	 *  
	 * @return An object with all <code>confName</code> configuration parameters 
	 * 
	 * @throws ConfigException
	 * @throws CmRuntimeException
	 * @throws RemoteException	 
	 */							
	FilterConfiguration getFilterConfiguration(String confName)
					throws  ArgumentException,
							ConfigException,
							CmRuntimeException, 
							RemoteException;

	/**
	 * Returns the version of the interface implementation.
	 * <p> 
	 * 
	 * @param context reserved
	 * @return version
	 * @throws RemoteException
	 */
	String getVersion(Object context) throws RemoteException;



}

