/*
 * RecordMatcher.java       Revision: 2.5  Date: Jun 28, 2005 9:41:18 AM 
 *
 * Copyright (c) 2001 ChoiceMaker Technologies, Inc.
 * 48 Wall Street, 11th Floor, New York, NY 10005
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * ChoiceMaker Technologies Inc. ("Confidential Information").
 */
package com.choicemaker.cm.urm.cmcherel;

import java.rmi.RemoteException;

import javax.ejb.EJBObject;

import com.choicemaker.cm.urm.base.JobStatus;
import com.choicemaker.cm.urm.exceptions.ArgumentException;
import com.choicemaker.cm.urm.exceptions.CmRuntimeException;
import com.choicemaker.cm.urm.exceptions.ConfigException;

/**
 * 
 * The base class for the batch match and batch analysis session beans. Contains
 * functionality related to the job management such as checking status, abort,
 * resume, etc.
 * 
 * @author emoussikaev
 * @version Revision: 2.5 Date: Jun 28, 2005 2:40:13 PM
 * @see
 */
public interface BatchBase extends EJBObject {

	/**
	 * Aborts the job with the given job ID.
	 * 
	 * @param jobID
	 *            Job ID.
	 * 
	 * @return
	 * @throws RemoteException
	 */
	public boolean abortJob(long jobID) throws ArgumentException,
			ConfigException, CmRuntimeException, RemoteException;

	/**
	 * Suspends the job with the given job ID.
	 * 
	 * @param jobID
	 *            Job ID.
	 * 
	 * @return true if job is aborted; false if job is already completed,
	 *         aborted or failed.
	 * @throws ArgumentException
	 * @throws ConfigException
	 * @throws CmRuntimeException
	 * @throws RemoteException
	 */
	public boolean suspendJob(long jobID) throws ArgumentException,
			ConfigException, CmRuntimeException, RemoteException;

	/**
	 * Resumes the job with the given job ID.
	 * 
	 * @param jobID
	 *            Job ID.
	 * 
	 * @return
	 * @throws ArgumentException
	 * @throws ConfigException
	 * @throws CmRuntimeException
	 * @throws RemoteException
	 */
	public boolean resumeJob(long jobID) throws ArgumentException,
			ConfigException, CmRuntimeException, RemoteException;

	/**
	 * Cleans serialized data related to the give job ID (including the file
	 * with the matching results).
	 * 
	 * @param jobID
	 *            Job ID.
	 * @return
	 * @throws ArgumentException
	 * @throws ConfigException
	 * @throws CmRuntimeException
	 * @throws RemoteException
	 */
	public boolean cleanJob(long jobID) throws ArgumentException,
			ConfigException, CmRuntimeException, RemoteException;

	/**
	 * Retrieves the status of the job with the given job ID.
	 * 
	 * @param jobID
	 *            Job ID.
	 * @return Job status.
	 * @throws ArgumentException
	 * @throws ConfigException
	 * @throws CmRuntimeException
	 * @throws RemoteException
	 */
	public JobStatus getJobStatus(long jobID) throws ArgumentException,
			ConfigException, CmRuntimeException, RemoteException;

	/**
	 * Returns the version of the interface implementation.
	 * <p>
	 * 
	 * @param context
	 *            reserved
	 * @return version
	 * @throws RemoteException
	 */

	public String getVersion(Object context) throws RemoteException;

}
