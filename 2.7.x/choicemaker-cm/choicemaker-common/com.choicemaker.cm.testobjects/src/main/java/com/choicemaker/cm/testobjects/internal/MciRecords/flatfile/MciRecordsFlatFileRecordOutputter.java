// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.custom.mci.gend.internal.MciRecords.flatfile;
import java.util.logging.*;
import java.util.*;
import java.io.*;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import com.choicemaker.cm.io.flatfile.base.*;
import com.choicemaker.cm.custom.mci.gend.internal.MciRecords.*;
import com.choicemaker.util.StringUtils;
import com.choicemaker.cm.custom.mci.encryption.*;
import com.choicemaker.cm.custom.mci.matching.*;
import com.choicemaker.cm.custom.mci.nameparser.*;
import com.choicemaker.cm.custom.mci.validation.*;
import com.choicemaker.cm.matching.en.*;
import com.choicemaker.cm.matching.en.us.*;
import com.choicemaker.cm.matching.gen.*;
import com.choicemaker.cm.validation.eclipse.*;
import com.choicemaker.cm.validation.eclipse.impl.*;
import java.util.*;
public final class MciRecordsFlatFileRecordOutputter implements FlatFileRecordOutputter {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.custom.mci.gend.internal.MciRecords.flatfile.MciRecordsFlatFileRecordOutputter.class.getName());
private boolean multiFile;
private boolean singleLine;
private boolean fixedLength;
private char sep;
private boolean tagged;
private int tagWidth;
private boolean filter;
private char[] lineBuffer = new char[16384];
public MciRecordsFlatFileRecordOutputter(boolean multiFile, boolean singleLine, boolean fixedLength, char sep, boolean tagged, int tagWidth, boolean filter) {
this.multiFile = multiFile;
this.singleLine = singleLine;
this.fixedLength = fixedLength;
this.sep = sep;
this.tagged = tagged;
this.tagWidth = tagWidth;
this.filter = filter;
}
public void put(Writer[] ws, Record r) throws IOException {
put_PatientImpl(ws, (PatientImpl)r);
}
private void put_PatientImpl(Writer[] ws, PatientImpl r) throws IOException {
Writer w = ws[1];
if(tagged) {
FlatFileOutput.write(w, "0", fixedLength, sep, filter, !singleLine, tagWidth);
}
FlatFileOutput.write(w, r.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
FlatFileOutput.write(w, r.facility_id, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.language_cd, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.birth_country_cd, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.multi_birth_ind, fixedLength, sep, filter, false,1, '\u0020');
FlatFileOutput.write(w, r.src_system_id, fixedLength, sep, filter, false,32);
if(!singleLine) w.write("\n");
put_NamesImpl(ws, r.names);
put_EthnicityImpl(ws, r.ethnicity);
put_RaceImpl(ws, r.race);
put_IdsImpl(ws, r.ids);
put_AddressImpl(ws, r.address);
put_ContactsImpl(ws, r.contacts);
put_MothersImpl(ws, r.mothers);
put_EventsImpl(ws, r.events);
put_ProvidersImpl(ws, r.providers);
put_FrozenImpl(ws, r.frozen);
put_IndexAndOutstandingImpl(ws, r.indexAndOutstanding);
}
private void put_NamesImpl(Writer[] ws, NamesImpl[] rs) throws IOException {
Writer w = ws[2];
for(int i = 0; i < rs.length; ++i) {
NamesImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "1", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
}
FlatFileOutput.write(w, r.first_name, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,32);
FlatFileOutput.write(w, r.middle_name, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.last_name, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.dob, fixedLength, sep, filter, false,10);
FlatFileOutput.write(w, r.sex_cd, fixedLength, sep, filter, false,1, '\u0020');
FlatFileOutput.write(w, r.facility_id, fixedLength, sep, filter, false,32);
if(!singleLine) w.write("\n");
}
}
private void put_EthnicityImpl(Writer[] ws, EthnicityImpl[] rs) throws IOException {
Writer w = ws[3];
for(int i = 0; i < rs.length; ++i) {
EthnicityImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "2", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
}
FlatFileOutput.write(w, r.ethnicity_cd, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,32);
if(!singleLine) w.write("\n");
}
}
private void put_RaceImpl(Writer[] ws, RaceImpl[] rs) throws IOException {
Writer w = ws[4];
for(int i = 0; i < rs.length; ++i) {
RaceImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "3", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
}
FlatFileOutput.write(w, r.race_cd, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,32);
if(!singleLine) w.write("\n");
}
}
private void put_IdsImpl(Writer[] ws, IdsImpl[] rs) throws IOException {
Writer w = ws[5];
for(int i = 0; i < rs.length; ++i) {
IdsImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "4", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
}
FlatFileOutput.write(w, r.patient_id, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,32);
FlatFileOutput.write(w, r.identifier_type, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.facility_id, fixedLength, sep, filter, false,32);
if(!singleLine) w.write("\n");
}
}
private void put_AddressImpl(Writer[] ws, AddressImpl[] rs) throws IOException {
Writer w = ws[6];
for(int i = 0; i < rs.length; ++i) {
AddressImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "5", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
}
FlatFileOutput.write(w, r.addr_id, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,20);
FlatFileOutput.write(w, r.boro_cd, fixedLength, sep, filter, false,1, '\u0020');
FlatFileOutput.write(w, r.bin, fixedLength, sep, filter, false,20);
FlatFileOutput.write(w, r.house_no, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.street_cd, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.street_name, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.city_name, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.state_cd, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.zipcode, fixedLength, sep, filter, false,32);
if(!singleLine) w.write("\n");
put_RelImpl(ws, r.rel);
}
}
private void put_RelImpl(Writer[] ws, RelImpl[] rs) throws IOException {
Writer w = ws[7];
for(int i = 0; i < rs.length; ++i) {
RelImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "6", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
FlatFileOutput.write(w, r.outer.addr_id, fixedLength, sep, filter, false,20);
}
FlatFileOutput.write(w, r.last_date_rptd, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,10);
FlatFileOutput.write(w, r.apt_no, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.addr_type_cd, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.raw_street_name, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.phone_no, fixedLength, sep, filter, false,32);
if(!singleLine) w.write("\n");
}
}
private void put_ContactsImpl(Writer[] ws, ContactsImpl[] rs) throws IOException {
Writer w = ws[8];
for(int i = 0; i < rs.length; ++i) {
ContactsImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "7", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
}
FlatFileOutput.write(w, r.relationship_cd, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,32);
FlatFileOutput.write(w, r.last_name, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.first_name, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.sex_cd, fixedLength, sep, filter, false,1, '\u0020');
FlatFileOutput.write(w, r.phone_no_h, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.phone_no_w, fixedLength, sep, filter, false,32);
if(!singleLine) w.write("\n");
}
}
private void put_MothersImpl(Writer[] ws, MothersImpl[] rs) throws IOException {
Writer w = ws[9];
for(int i = 0; i < rs.length; ++i) {
MothersImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "8", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
}
FlatFileOutput.write(w, r.mothers_maiden_name, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,32);
FlatFileOutput.write(w, r.mothers_dob, fixedLength, sep, filter, false,10);
if(!singleLine) w.write("\n");
}
}
private void put_EventsImpl(Writer[] ws, EventsImpl[] rs) throws IOException {
Writer w = ws[10];
for(int i = 0; i < rs.length; ++i) {
EventsImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "9", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
}
FlatFileOutput.write(w, r.event_date, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,10);
FlatFileOutput.write(w, r.event_type_cd, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.facility_id, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.event_id, fixedLength, sep, filter, false,32);
FlatFileOutput.write(w, r.lab_date, fixedLength, sep, filter, false,10);
if(!singleLine) w.write("\n");
}
}
private void put_ProvidersImpl(Writer[] ws, ProvidersImpl[] rs) throws IOException {
Writer w = ws[11];
for(int i = 0; i < rs.length; ++i) {
ProvidersImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "10", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
}
FlatFileOutput.write(w, r.provider_id, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,32);
FlatFileOutput.write(w, r.facility_id, fixedLength, sep, filter, false,32);
if(!singleLine) w.write("\n");
}
}
private void put_FrozenImpl(Writer[] ws, FrozenImpl[] rs) throws IOException {
Writer w = ws[12];
for(int i = 0; i < rs.length; ++i) {
FrozenImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "11", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
}
FlatFileOutput.write(w, r.src_system_id, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,32);
if(!singleLine) w.write("\n");
}
}
private void put_IndexAndOutstandingImpl(Writer[] ws, IndexAndOutstandingImpl[] rs) throws IOException {
Writer w = ws[13];
for(int i = 0; i < rs.length; ++i) {
IndexAndOutstandingImpl r = rs[i];
if(tagged) {
FlatFileOutput.write(w, "12", fixedLength, sep, filter, !singleLine, tagWidth);
}
if(multiFile) {
FlatFileOutput.write(w, r.outer.mci_id, fixedLength, sep, filter, !tagged && !singleLine,11);
}
FlatFileOutput.write(w, r.src_system_id, fixedLength, sep, filter, !tagged && !singleLine && !multiFile,32);
FlatFileOutput.write(w, r.patient_id, fixedLength, sep, filter, false,11);
if(!singleLine) w.write("\n");
}
}
}
