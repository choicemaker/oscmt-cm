// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.custom.mci.gend.MciRecords;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import java.util.logging.*;
import com.choicemaker.util.StringUtils;
import com.choicemaker.cm.custom.mci.encryption.*;
import com.choicemaker.cm.custom.mci.matching.*;
import com.choicemaker.cm.custom.mci.nameparser.*;
import com.choicemaker.cm.custom.mci.validation.*;
import com.choicemaker.cm.matching.en.*;
import com.choicemaker.cm.matching.en.us.*;
import com.choicemaker.cm.matching.gen.*;
import com.choicemaker.cm.testobjects.mci.MciRecords.AddressBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.Rel;
import com.choicemaker.cm.testobjects.mci.MciRecords.RelBase;
import com.choicemaker.cm.validation.eclipse.*;
import com.choicemaker.cm.validation.eclipse.impl.*;
import java.util.*;
import com.choicemaker.cm.custom.mci.gend.MciRecords.*;
public class RelImpl implements BaseRecord, Rel {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl.class.getName());
public static RelImpl[] __zeroArray = new RelImpl[0];
public AddressImpl outer;
public AddressBase getOuter() {
return outer;
}
public void setOuter(AddressBase outer) {
this.outer = (AddressImpl)outer;
}
public boolean __v_last_date_rptd;
public boolean __v_apt_no;
public boolean __v_cleanAptNo;
public boolean __v_addr_type_cd;
public boolean __v_raw_street_name;
public boolean __v_parsedStreet;
public boolean __v_parsedHouseNumber;
public boolean __v_parsedStreetName;
public boolean __v_parsedApartment;
public boolean __v_parsedPoBox;
public boolean __v_phoneAsStreet;
public boolean __v_phone_no;
public boolean __v_clean_phone_no;
public Date last_date_rptd;
public boolean isLast_date_rptdValid() {
return __v_last_date_rptd;
}
public Date getLast_date_rptd() {
return last_date_rptd;
}
public String apt_no;
public boolean isApt_noValid() {
return __v_apt_no;
}
public String getApt_no() {
return apt_no;
}
public String cleanAptNo;
public boolean isCleanAptNoValid() {
return __v_cleanAptNo;
}
public String getCleanAptNo() {
return cleanAptNo;
}
public String addr_type_cd;
public boolean isAddr_type_cdValid() {
return __v_addr_type_cd;
}
public String getAddr_type_cd() {
return addr_type_cd;
}
public String raw_street_name;
public boolean isRaw_street_nameValid() {
return __v_raw_street_name;
}
public String getRaw_street_name() {
return raw_street_name;
}
public ParsedAddress parsedStreet;
public boolean isParsedStreetValid() {
return __v_parsedStreet;
}
public ParsedAddress getParsedStreet() {
return parsedStreet;
}
public String parsedHouseNumber;
public boolean isParsedHouseNumberValid() {
return __v_parsedHouseNumber;
}
public String getParsedHouseNumber() {
return parsedHouseNumber;
}
public String parsedStreetName;
public boolean isParsedStreetNameValid() {
return __v_parsedStreetName;
}
public String getParsedStreetName() {
return parsedStreetName;
}
public String parsedApartment;
public boolean isParsedApartmentValid() {
return __v_parsedApartment;
}
public String getParsedApartment() {
return parsedApartment;
}
public String parsedPoBox;
public boolean isParsedPoBoxValid() {
return __v_parsedPoBox;
}
public String getParsedPoBox() {
return parsedPoBox;
}
public String phoneAsStreet;
public boolean isPhoneAsStreetValid() {
return __v_phoneAsStreet;
}
public String getPhoneAsStreet() {
return phoneAsStreet;
}
public String phone_no;
public boolean isPhone_noValid() {
return __v_phone_no;
}
public String getPhone_no() {
return phone_no;
}
public String clean_phone_no;
public boolean isClean_phone_noValid() {
return __v_clean_phone_no;
}
public String getClean_phone_no() {
return clean_phone_no;
}
public RelImpl(RelBase __o) {
last_date_rptd = __o.getLast_date_rptd();
apt_no = __o.getApt_no();
addr_type_cd = __o.getAddr_type_cd();
raw_street_name = __o.getRaw_street_name();
phone_no = __o.getPhone_no();
}
public RelImpl() {
}
public void computeValidityAndDerived(DerivedSource __src) {
java.lang.String __tmpStr;
try {
__v_last_date_rptd = last_date_rptd !=null;
__v_apt_no = StringUtils.nonEmptyString(apt_no) && !"UNK".equals(apt_no);
if(__src1.includes(__src)) {
if(__v_apt_no) {
cleanAptNo = StreetParser.aptNormalize(apt_no);
__v_cleanAptNo = StringUtils.nonEmptyString(cleanAptNo);
}
} else {
__v_cleanAptNo = StringUtils.nonEmptyString(cleanAptNo);
}
__v_addr_type_cd = StringUtils.nonEmptyString(addr_type_cd);
__v_raw_street_name = Validators.isValid("mciStreetNameValidator",raw_street_name);
if(__src1.includes(__src)) {
if(__v_raw_street_name) {
parsedStreet = AddressParser.getDefaultParser().parseAddress(raw_street_name);
__v_parsedStreet = parsedStreet != null;
}
} else {
__v_parsedStreet = parsedStreet != null;
}
if(__src1.includes(__src)) {
if(__v_parsedStreet) {
parsedHouseNumber = parsedStreet.get(ParsedAddress.HOUSE_NUMBER);
__v_parsedHouseNumber = StringUtils.nonEmptyString(parsedHouseNumber);
}
} else {
__v_parsedHouseNumber = StringUtils.nonEmptyString(parsedHouseNumber);
}
if(__src1.includes(__src)) {
if(__v_parsedStreet) {
parsedStreetName = parsedStreet.get(ParsedAddress.STREET_NAME);
__v_parsedStreetName = Validators.isValid("mciStreetNameValidator",parsedStreetName);
}
} else {
__v_parsedStreetName = Validators.isValid("mciStreetNameValidator",parsedStreetName);
}
if(__src1.includes(__src)) {
if(__v_parsedStreet && parsedStreet.has(ParsedAddress.APARTMENT_NUMBER)) {
parsedApartment = StreetParser.aptNormalize(parsedStreet.get(ParsedAddress.APARTMENT_NUMBER));
__v_parsedApartment = StringUtils.nonEmptyString(parsedApartment);
}
} else {
__v_parsedApartment = StringUtils.nonEmptyString(parsedApartment);
}
if(__src1.includes(__src)) {
if(__v_parsedStreet) {
parsedPoBox = parsedStreet.get(ParsedAddress.PO_BOX);
__v_parsedPoBox = parsedPoBox != null;
}
} else {
__v_parsedPoBox = parsedPoBox != null;
}
if(__src1.includes(__src)) {
if(__v_raw_street_name) {
phoneAsStreet = PhoneUtils.parseFullPhone(raw_street_name);
__v_phoneAsStreet = StringUtils.nonEmptyString(phoneAsStreet);
}
} else {
__v_phoneAsStreet = StringUtils.nonEmptyString(phoneAsStreet);
}
__v_phone_no = StringUtils.nonEmptyString(phone_no) && !phone_no.endsWith("000");
if(__src1.includes(__src)) {
if(__v_phone_no) {
clean_phone_no = PhoneUtils.clean(phone_no);
__v_clean_phone_no = StringUtils.nonEmptyString(clean_phone_no);
}
} else {
__v_clean_phone_no = StringUtils.nonEmptyString(clean_phone_no);
}
} catch(Exception __ex) {
logger.severe("Computing validity and derived of RelImpl" + __ex);
}
}
public void resetValidityAndDerived(DerivedSource __src) {
if(__src1.includes(__src)) {
cleanAptNo = null;
__v_cleanAptNo = false;
}
if(__src1.includes(__src)) {
parsedStreet = null;
__v_parsedStreet = false;
}
if(__src1.includes(__src)) {
parsedHouseNumber = null;
__v_parsedHouseNumber = false;
}
if(__src1.includes(__src)) {
parsedStreetName = null;
__v_parsedStreetName = false;
}
if(__src1.includes(__src)) {
parsedApartment = null;
__v_parsedApartment = false;
}
if(__src1.includes(__src)) {
parsedPoBox = null;
__v_parsedPoBox = false;
}
if(__src1.includes(__src)) {
phoneAsStreet = null;
__v_phoneAsStreet = false;
}
if(__src1.includes(__src)) {
clean_phone_no = null;
__v_clean_phone_no = false;
}
}
public static RelImpl instance() {
RelImpl tmpInstance = new RelImpl();
return tmpInstance;
}
private static DerivedSource __src1 = DerivedSource.valueOf("all");
}
