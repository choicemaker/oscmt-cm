// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.custom.mci.internal.MciRecords;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import java.util.logging.*;
import com.choicemaker.util.StringUtils;







import com.choicemaker.cm.testobjects.mci.MciRecords.AddressBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.ContactsBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.EthnicityBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.EventsBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.FrozenBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.IdsBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.IndexAndOutstandingBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.MothersBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.NamesBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.Patient;
import com.choicemaker.cm.testobjects.mci.MciRecords.PatientBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.ProvidersBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.RaceBase;


import java.util.*;

public class PatientImpl implements Record, Patient {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.custom.mci.internal.MciRecords.PatientImpl.class.getName());
private com.choicemaker.cm.core.DerivedSource __src;
public DerivedSource getDerivedSource() {
return __src;
}
public void computeValidityAndDerived() {
resetValidityAndDerived(__src);
computeValidityAndDerived(__src);
}
public Integer getId() {
return new Integer(mci_id);
}
public boolean __v_mci_id;
public boolean __v_facility_id;
public boolean __v_language_cd;
public boolean __v_birth_country_cd;
public boolean __v_multi_birth_ind;
public boolean __v_src_system_id;
public int mci_id;
public boolean isMci_idValid() {
return __v_mci_id;
}
public int getMci_id() {
return mci_id;
}
public String facility_id;
public boolean isFacility_idValid() {
return __v_facility_id;
}
public String getFacility_id() {
return facility_id;
}
public String language_cd;
public boolean isLanguage_cdValid() {
return __v_language_cd;
}
public String getLanguage_cd() {
return language_cd;
}
public String birth_country_cd;
public boolean isBirth_country_cdValid() {
return __v_birth_country_cd;
}
public String getBirth_country_cd() {
return birth_country_cd;
}
public char multi_birth_ind;
public boolean isMulti_birth_indValid() {
return __v_multi_birth_ind;
}
public char getMulti_birth_ind() {
return multi_birth_ind;
}
public String src_system_id;
public boolean isSrc_system_idValid() {
return __v_src_system_id;
}
public String getSrc_system_id() {
return src_system_id;
}
public NamesImpl[] names;
public NamesBase[] getNames() {
return names;
}
public NamesBase getNames(int __index) {
return names[__index];
}
public EthnicityImpl[] ethnicity;
public EthnicityBase[] getEthnicity() {
return ethnicity;
}
public EthnicityBase getEthnicity(int __index) {
return ethnicity[__index];
}
public RaceImpl[] race;
public RaceBase[] getRace() {
return race;
}
public RaceBase getRace(int __index) {
return race[__index];
}
public IdsImpl[] ids;
public IdsBase[] getIds() {
return ids;
}
public IdsBase getIds(int __index) {
return ids[__index];
}
public AddressImpl[] address;
public AddressBase[] getAddress() {
return address;
}
public AddressBase getAddress(int __index) {
return address[__index];
}
public ContactsImpl[] contacts;
public ContactsBase[] getContacts() {
return contacts;
}
public ContactsBase getContacts(int __index) {
return contacts[__index];
}
public MothersImpl[] mothers;
public MothersBase[] getMothers() {
return mothers;
}
public MothersBase getMothers(int __index) {
return mothers[__index];
}
public EventsImpl[] events;
public EventsBase[] getEvents() {
return events;
}
public EventsBase getEvents(int __index) {
return events[__index];
}
public ProvidersImpl[] providers;
public ProvidersBase[] getProviders() {
return providers;
}
public ProvidersBase getProviders(int __index) {
return providers[__index];
}
public FrozenImpl[] frozen;
public FrozenBase[] getFrozen() {
return frozen;
}
public FrozenBase getFrozen(int __index) {
return frozen[__index];
}
public IndexAndOutstandingImpl[] indexAndOutstanding;
public IndexAndOutstandingBase[] getIndexAndOutstanding() {
return indexAndOutstanding;
}
public IndexAndOutstandingBase getIndexAndOutstanding(int __index) {
return indexAndOutstanding[__index];
}
public PatientImpl(PatientBase __o) {
mci_id = __o.getMci_id();
facility_id = __o.getFacility_id();
language_cd = __o.getLanguage_cd();
birth_country_cd = __o.getBirth_country_cd();
multi_birth_ind = __o.getMulti_birth_ind();
src_system_id = __o.getSrc_system_id();
NamesBase[] __onames = __o.getNames();
names = new NamesImpl[__onames.length];
for(int __i = 0; __i < names.length; ++__i) {
(names[__i] = new NamesImpl(__onames[__i])).setOuter(this);
}
EthnicityBase[] __oethnicity = __o.getEthnicity();
ethnicity = new EthnicityImpl[__oethnicity.length];
for(int __i = 0; __i < ethnicity.length; ++__i) {
(ethnicity[__i] = new EthnicityImpl(__oethnicity[__i])).setOuter(this);
}
RaceBase[] __orace = __o.getRace();
race = new RaceImpl[__orace.length];
for(int __i = 0; __i < race.length; ++__i) {
(race[__i] = new RaceImpl(__orace[__i])).setOuter(this);
}
IdsBase[] __oids = __o.getIds();
ids = new IdsImpl[__oids.length];
for(int __i = 0; __i < ids.length; ++__i) {
(ids[__i] = new IdsImpl(__oids[__i])).setOuter(this);
}
AddressBase[] __oaddress = __o.getAddress();
address = new AddressImpl[__oaddress.length];
for(int __i = 0; __i < address.length; ++__i) {
(address[__i] = new AddressImpl(__oaddress[__i])).setOuter(this);
}
ContactsBase[] __ocontacts = __o.getContacts();
contacts = new ContactsImpl[__ocontacts.length];
for(int __i = 0; __i < contacts.length; ++__i) {
(contacts[__i] = new ContactsImpl(__ocontacts[__i])).setOuter(this);
}
MothersBase[] __omothers = __o.getMothers();
mothers = new MothersImpl[__omothers.length];
for(int __i = 0; __i < mothers.length; ++__i) {
(mothers[__i] = new MothersImpl(__omothers[__i])).setOuter(this);
}
EventsBase[] __oevents = __o.getEvents();
events = new EventsImpl[__oevents.length];
for(int __i = 0; __i < events.length; ++__i) {
(events[__i] = new EventsImpl(__oevents[__i])).setOuter(this);
}
ProvidersBase[] __oproviders = __o.getProviders();
providers = new ProvidersImpl[__oproviders.length];
for(int __i = 0; __i < providers.length; ++__i) {
(providers[__i] = new ProvidersImpl(__oproviders[__i])).setOuter(this);
}
FrozenBase[] __ofrozen = __o.getFrozen();
frozen = new FrozenImpl[__ofrozen.length];
for(int __i = 0; __i < frozen.length; ++__i) {
(frozen[__i] = new FrozenImpl(__ofrozen[__i])).setOuter(this);
}
IndexAndOutstandingBase[] __oindexAndOutstanding = __o.getIndexAndOutstanding();
indexAndOutstanding = new IndexAndOutstandingImpl[__oindexAndOutstanding.length];
for(int __i = 0; __i < indexAndOutstanding.length; ++__i) {
(indexAndOutstanding[__i] = new IndexAndOutstandingImpl(__oindexAndOutstanding[__i])).setOuter(this);
}
}
public PatientImpl() {
}
public void computeValidityAndDerived(DerivedSource __src) {
java.lang.String __tmpStr;
this.__src = __src;
try {
__v_mci_id = mci_id != 0;
__v_facility_id = StringUtils.nonEmptyString(facility_id) && !facility_id.equals("CIRU");
__v_language_cd = StringUtils.nonEmptyString(language_cd) && !language_cd.equals("99")  && !language_cd.equals("00") && !language_cd.equals("0");
__v_birth_country_cd = StringUtils.nonEmptyString(birth_country_cd) && !birth_country_cd.equals("XXX");
__v_multi_birth_ind = multi_birth_ind != '\0';
__v_src_system_id = StringUtils.nonEmptyString(src_system_id);
for(int i = 0; i < names.length; ++i) {
names[i].computeValidityAndDerived(__src);
}
for(int i = 0; i < ethnicity.length; ++i) {
ethnicity[i].computeValidityAndDerived(__src);
}
for(int i = 0; i < race.length; ++i) {
race[i].computeValidityAndDerived(__src);
}
for(int i = 0; i < ids.length; ++i) {
ids[i].computeValidityAndDerived(__src);
}
for(int i = 0; i < address.length; ++i) {
address[i].computeValidityAndDerived(__src);
}
for(int i = 0; i < contacts.length; ++i) {
contacts[i].computeValidityAndDerived(__src);
}
for(int i = 0; i < mothers.length; ++i) {
mothers[i].computeValidityAndDerived(__src);
}
for(int i = 0; i < events.length; ++i) {
events[i].computeValidityAndDerived(__src);
}
for(int i = 0; i < providers.length; ++i) {
providers[i].computeValidityAndDerived(__src);
}
for(int i = 0; i < frozen.length; ++i) {
frozen[i].computeValidityAndDerived(__src);
}
for(int i = 0; i < indexAndOutstanding.length; ++i) {
indexAndOutstanding[i].computeValidityAndDerived(__src);
}
} catch(Exception __ex) {
logger.severe("Computing validity and derived of PatientImpl" + __ex);
}
}
public void resetValidityAndDerived(DerivedSource __src) {
for(int i = 0; i < names.length; ++i) {
names[i].resetValidityAndDerived(__src);
}
for(int i = 0; i < ethnicity.length; ++i) {
ethnicity[i].resetValidityAndDerived(__src);
}
for(int i = 0; i < race.length; ++i) {
race[i].resetValidityAndDerived(__src);
}
for(int i = 0; i < ids.length; ++i) {
ids[i].resetValidityAndDerived(__src);
}
for(int i = 0; i < address.length; ++i) {
address[i].resetValidityAndDerived(__src);
}
for(int i = 0; i < contacts.length; ++i) {
contacts[i].resetValidityAndDerived(__src);
}
for(int i = 0; i < mothers.length; ++i) {
mothers[i].resetValidityAndDerived(__src);
}
for(int i = 0; i < events.length; ++i) {
events[i].resetValidityAndDerived(__src);
}
for(int i = 0; i < providers.length; ++i) {
providers[i].resetValidityAndDerived(__src);
}
for(int i = 0; i < frozen.length; ++i) {
frozen[i].resetValidityAndDerived(__src);
}
for(int i = 0; i < indexAndOutstanding.length; ++i) {
indexAndOutstanding[i].resetValidityAndDerived(__src);
}
}
public static PatientImpl instance() {
PatientImpl tmpInstance = new PatientImpl();
tmpInstance.names = new NamesImpl[0];
tmpInstance.ethnicity = new EthnicityImpl[0];
tmpInstance.race = new RaceImpl[0];
tmpInstance.ids = new IdsImpl[0];
tmpInstance.address = new AddressImpl[0];
tmpInstance.contacts = new ContactsImpl[0];
tmpInstance.mothers = new MothersImpl[0];
tmpInstance.events = new EventsImpl[0];
tmpInstance.providers = new ProvidersImpl[0];
tmpInstance.frozen = new FrozenImpl[0];
tmpInstance.indexAndOutstanding = new IndexAndOutstandingImpl[0];
return tmpInstance;
}
}
