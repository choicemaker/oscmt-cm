// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.testobjects.mci.internal.MciRecords.xml;
import java.util.logging.*;
import java.util.*;
import org.xml.sax.*;
import org.xml.sax.helpers.*;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import com.choicemaker.cm.io.xml.base.*;
import com.choicemaker.cm.core.util.*;
import com.choicemaker.util.*;
import com.choicemaker.cm.custom.mci.gend.MciRecords.AddressImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.ContactsImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.EthnicityImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.EventsImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.FrozenImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.IdsImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.IndexAndOutstandingImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.MothersImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.NamesImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.PatientImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.ProvidersImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.RaceImpl;
import com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl;
import com.choicemaker.cm.custom.mci.gend.internal.MciRecords.*;
import com.choicemaker.util.StringUtils;
import com.choicemaker.cm.custom.mci.encryption.*;
import com.choicemaker.cm.custom.mci.matching.*;
import com.choicemaker.cm.custom.mci.nameparser.*;
import com.choicemaker.cm.custom.mci.validation.*;
import com.choicemaker.cm.matching.en.*;
import com.choicemaker.cm.matching.en.us.*;
import com.choicemaker.cm.matching.gen.*;
import com.choicemaker.cm.validation.eclipse.*;
import com.choicemaker.cm.validation.eclipse.impl.*;
import java.util.*;
public final class MciRecordsXmlReader extends XmlReader {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.testobjects.mci.internal.MciRecords.xml.MciRecordsXmlReader.class.getName());
private int[] typeStack = new int[7];
private int top = 0;
private int unknown = 0;
private LinkedList l__PatientImpl = new LinkedList();
private PatientImpl o__PatientImpl;
private LinkedList l__NamesImpl = new LinkedList();
private LinkedList l__EthnicityImpl = new LinkedList();
private LinkedList l__RaceImpl = new LinkedList();
private LinkedList l__IdsImpl = new LinkedList();
private LinkedList l__AddressImpl = new LinkedList();
private AddressImpl o__AddressImpl;
private LinkedList l__RelImpl = new LinkedList();
private LinkedList l__ContactsImpl = new LinkedList();
private LinkedList l__MothersImpl = new LinkedList();
private LinkedList l__EventsImpl = new LinkedList();
private LinkedList l__ProvidersImpl = new LinkedList();
private LinkedList l__FrozenImpl = new LinkedList();
private LinkedList l__IndexAndOutstandingImpl = new LinkedList();
private RecordHandler rh;
private static DerivedSource src = DerivedSource.valueOf("xml");
public void open(RecordHandler rh) {
this.rh = rh;
typeStack[top] = -1;
}
public void startElement (String uri, String localName, String qName, Attributes atts) throws SAXException {
String __tmpStr;
if(unknown > 0) {
++unknown;
} else {
String elementName = qName.intern();
switch(typeStack[top]) {
case -1:
if(elementName == "patient") {
typeStack[++top] = 0;
o__PatientImpl = new PatientImpl();
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "mci_id") {
o__PatientImpl.mci_id = atts.getValue(i).length() == 0 ? (int)0 : Integer.parseInt(atts.getValue(i));
} else if(attributeName == "facility_id") {
o__PatientImpl.facility_id = atts.getValue(i);
} else if(attributeName == "language_cd") {
o__PatientImpl.language_cd = atts.getValue(i);
} else if(attributeName == "birth_country_cd") {
o__PatientImpl.birth_country_cd = atts.getValue(i);
} else if(attributeName == "multi_birth_ind") {
o__PatientImpl.multi_birth_ind = atts.getValue(i).length() == 0 ? (char)0 : StringUtils.getChar(atts.getValue(i));
} else if(attributeName == "src_system_id") {
o__PatientImpl.src_system_id = atts.getValue(i);
} else {
}
}
} else {
++unknown;
}
break;
case 0:
if(elementName == "names") {
typeStack[++top] = 1;
NamesImpl o__NamesImpl = new NamesImpl();
o__NamesImpl.outer = o__PatientImpl;
l__NamesImpl.add(o__NamesImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "first_name") {
o__NamesImpl.first_name = atts.getValue(i);
} else if(attributeName == "middle_name") {
o__NamesImpl.middle_name = atts.getValue(i);
} else if(attributeName == "last_name") {
o__NamesImpl.last_name = atts.getValue(i);
} else if(attributeName == "dob") {
o__NamesImpl.dob = DateHelper.parse(atts.getValue(i));
} else if(attributeName == "sex_cd") {
o__NamesImpl.sex_cd = atts.getValue(i).length() == 0 ? (char)0 : StringUtils.getChar(atts.getValue(i));
} else if(attributeName == "facility_id") {
o__NamesImpl.facility_id = atts.getValue(i);
} else {
}
}
} else if(elementName == "ethnicity") {
typeStack[++top] = 2;
EthnicityImpl o__EthnicityImpl = new EthnicityImpl();
o__EthnicityImpl.outer = o__PatientImpl;
l__EthnicityImpl.add(o__EthnicityImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "ethnicity_cd") {
o__EthnicityImpl.ethnicity_cd = atts.getValue(i);
} else {
}
}
} else if(elementName == "race") {
typeStack[++top] = 3;
RaceImpl o__RaceImpl = new RaceImpl();
o__RaceImpl.outer = o__PatientImpl;
l__RaceImpl.add(o__RaceImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "race_cd") {
o__RaceImpl.race_cd = atts.getValue(i);
} else {
}
}
} else if(elementName == "ids") {
typeStack[++top] = 4;
IdsImpl o__IdsImpl = new IdsImpl();
o__IdsImpl.outer = o__PatientImpl;
l__IdsImpl.add(o__IdsImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "patient_id") {
o__IdsImpl.patient_id = atts.getValue(i);
} else if(attributeName == "identifier_type") {
o__IdsImpl.identifier_type = atts.getValue(i);
} else if(attributeName == "facility_id") {
o__IdsImpl.facility_id = atts.getValue(i);
} else {
}
}
} else if(elementName == "address") {
typeStack[++top] = 5;
o__AddressImpl = new AddressImpl();
o__AddressImpl.outer = o__PatientImpl;
l__AddressImpl.add(o__AddressImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "addr_id") {
o__AddressImpl.addr_id = atts.getValue(i).length() == 0 ? (long)0 : Long.parseLong(atts.getValue(i));
} else if(attributeName == "boro_cd") {
o__AddressImpl.boro_cd = atts.getValue(i).length() == 0 ? (char)0 : StringUtils.getChar(atts.getValue(i));
} else if(attributeName == "bin") {
o__AddressImpl.bin = atts.getValue(i).length() == 0 ? (long)0 : Long.parseLong(atts.getValue(i));
} else if(attributeName == "house_no") {
o__AddressImpl.house_no = atts.getValue(i);
} else if(attributeName == "street_cd") {
o__AddressImpl.street_cd = atts.getValue(i);
} else if(attributeName == "street_name") {
o__AddressImpl.street_name = atts.getValue(i);
} else if(attributeName == "city_name") {
o__AddressImpl.city_name = atts.getValue(i);
} else if(attributeName == "state_cd") {
o__AddressImpl.state_cd = atts.getValue(i);
} else if(attributeName == "zipcode") {
o__AddressImpl.zipcode = atts.getValue(i);
} else {
}
}
} else if(elementName == "contacts") {
typeStack[++top] = 7;
ContactsImpl o__ContactsImpl = new ContactsImpl();
o__ContactsImpl.outer = o__PatientImpl;
l__ContactsImpl.add(o__ContactsImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "relationship_cd") {
o__ContactsImpl.relationship_cd = atts.getValue(i);
} else if(attributeName == "last_name") {
o__ContactsImpl.last_name = atts.getValue(i);
} else if(attributeName == "first_name") {
o__ContactsImpl.first_name = atts.getValue(i);
} else if(attributeName == "sex_cd") {
o__ContactsImpl.sex_cd = atts.getValue(i).length() == 0 ? (char)0 : StringUtils.getChar(atts.getValue(i));
} else if(attributeName == "phone_no_h") {
o__ContactsImpl.phone_no_h = atts.getValue(i);
} else if(attributeName == "phone_no_w") {
o__ContactsImpl.phone_no_w = atts.getValue(i);
} else {
}
}
} else if(elementName == "mothers") {
typeStack[++top] = 8;
MothersImpl o__MothersImpl = new MothersImpl();
o__MothersImpl.outer = o__PatientImpl;
l__MothersImpl.add(o__MothersImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "mothers_maiden_name") {
o__MothersImpl.mothers_maiden_name = atts.getValue(i);
} else if(attributeName == "mothers_dob") {
o__MothersImpl.mothers_dob = DateHelper.parse(atts.getValue(i));
} else {
}
}
} else if(elementName == "events") {
typeStack[++top] = 9;
EventsImpl o__EventsImpl = new EventsImpl();
o__EventsImpl.outer = o__PatientImpl;
l__EventsImpl.add(o__EventsImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "event_date") {
o__EventsImpl.event_date = DateHelper.parse(atts.getValue(i));
} else if(attributeName == "event_type_cd") {
o__EventsImpl.event_type_cd = atts.getValue(i);
} else if(attributeName == "facility_id") {
o__EventsImpl.facility_id = atts.getValue(i);
} else if(attributeName == "event_id") {
o__EventsImpl.event_id = atts.getValue(i);
} else if(attributeName == "lab_date") {
o__EventsImpl.lab_date = DateHelper.parse(atts.getValue(i));
} else {
}
}
} else if(elementName == "providers") {
typeStack[++top] = 10;
ProvidersImpl o__ProvidersImpl = new ProvidersImpl();
o__ProvidersImpl.outer = o__PatientImpl;
l__ProvidersImpl.add(o__ProvidersImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "provider_id") {
o__ProvidersImpl.provider_id = atts.getValue(i);
} else if(attributeName == "facility_id") {
o__ProvidersImpl.facility_id = atts.getValue(i);
} else {
}
}
} else if(elementName == "frozen") {
typeStack[++top] = 11;
FrozenImpl o__FrozenImpl = new FrozenImpl();
o__FrozenImpl.outer = o__PatientImpl;
l__FrozenImpl.add(o__FrozenImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "src_system_id") {
o__FrozenImpl.src_system_id = atts.getValue(i);
} else {
}
}
} else if(elementName == "indexAndOutstanding") {
typeStack[++top] = 12;
IndexAndOutstandingImpl o__IndexAndOutstandingImpl = new IndexAndOutstandingImpl();
o__IndexAndOutstandingImpl.outer = o__PatientImpl;
l__IndexAndOutstandingImpl.add(o__IndexAndOutstandingImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "src_system_id") {
o__IndexAndOutstandingImpl.src_system_id = atts.getValue(i);
} else if(attributeName == "patient_id") {
o__IndexAndOutstandingImpl.patient_id = atts.getValue(i).length() == 0 ? (int)0 : Integer.parseInt(atts.getValue(i));
} else {
}
}
} else {
++unknown;
}
break;
case 5:
if(elementName == "rel") {
typeStack[++top] = 6;
RelImpl o__RelImpl = new RelImpl();
o__RelImpl.outer = o__AddressImpl;
l__RelImpl.add(o__RelImpl);
int len = atts.getLength();
for(int i = 0; i < len; ++i) {
String attributeName = atts.getQName(i).intern();
if(attributeName == "last_date_rptd") {
o__RelImpl.last_date_rptd = DateHelper.parse(atts.getValue(i));
} else if(attributeName == "apt_no") {
o__RelImpl.apt_no = atts.getValue(i);
} else if(attributeName == "addr_type_cd") {
o__RelImpl.addr_type_cd = atts.getValue(i);
} else if(attributeName == "raw_street_name") {
o__RelImpl.raw_street_name = atts.getValue(i);
} else if(attributeName == "phone_no") {
o__RelImpl.phone_no = atts.getValue(i);
} else {
}
}
} else {
++unknown;
}
break;
}
}
}
public void endElement (String uri, String localName, String qName) throws SAXException {
if(unknown > 0) {
--unknown;
} else {
switch(typeStack[top]) {
case 0:
l__NamesImpl.toArray(o__PatientImpl.names = new NamesImpl[l__NamesImpl.size()]);
l__NamesImpl.clear();
l__EthnicityImpl.toArray(o__PatientImpl.ethnicity = new EthnicityImpl[l__EthnicityImpl.size()]);
l__EthnicityImpl.clear();
l__RaceImpl.toArray(o__PatientImpl.race = new RaceImpl[l__RaceImpl.size()]);
l__RaceImpl.clear();
l__IdsImpl.toArray(o__PatientImpl.ids = new IdsImpl[l__IdsImpl.size()]);
l__IdsImpl.clear();
l__AddressImpl.toArray(o__PatientImpl.address = new AddressImpl[l__AddressImpl.size()]);
l__AddressImpl.clear();
l__ContactsImpl.toArray(o__PatientImpl.contacts = new ContactsImpl[l__ContactsImpl.size()]);
l__ContactsImpl.clear();
l__MothersImpl.toArray(o__PatientImpl.mothers = new MothersImpl[l__MothersImpl.size()]);
l__MothersImpl.clear();
l__EventsImpl.toArray(o__PatientImpl.events = new EventsImpl[l__EventsImpl.size()]);
l__EventsImpl.clear();
l__ProvidersImpl.toArray(o__PatientImpl.providers = new ProvidersImpl[l__ProvidersImpl.size()]);
l__ProvidersImpl.clear();
l__FrozenImpl.toArray(o__PatientImpl.frozen = new FrozenImpl[l__FrozenImpl.size()]);
l__FrozenImpl.clear();
l__IndexAndOutstandingImpl.toArray(o__PatientImpl.indexAndOutstanding = new IndexAndOutstandingImpl[l__IndexAndOutstandingImpl.size()]);
l__IndexAndOutstandingImpl.clear();
break;
case 5:
l__RelImpl.toArray(o__AddressImpl.rel = new RelImpl[l__RelImpl.size()]);
l__RelImpl.clear();
break;
}
--top;
if(top == 0) {
o__PatientImpl.computeValidityAndDerived(src);
rh.handleRecord(o__PatientImpl);
}
}
}
}
