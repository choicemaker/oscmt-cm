// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.custom.mci.internal.MciRecords;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import java.util.logging.*;
import com.choicemaker.util.StringUtils;







import com.choicemaker.cm.testobjects.mci.MciRecords.Ids;
import com.choicemaker.cm.testobjects.mci.MciRecords.IdsBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.PatientBase;


import java.util.*;

public class IdsImpl implements BaseRecord, Ids {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.custom.mci.internal.MciRecords.IdsImpl.class.getName());
public static IdsImpl[] __zeroArray = new IdsImpl[0];
public PatientImpl outer;
public PatientBase getOuter() {
return outer;
}
public void setOuter(PatientBase outer) {
this.outer = (PatientImpl)outer;
}
public boolean __v_patient_id;
public boolean __v_patient_id_norm;
public boolean __v_identifier_type;
public boolean __v_facility_id;
public String patient_id;
public boolean isPatient_idValid() {
return __v_patient_id;
}
public String getPatient_id() {
return patient_id;
}
public String patient_id_norm;
public boolean isPatient_id_normValid() {
return __v_patient_id_norm;
}
public String getPatient_id_norm() {
return patient_id_norm;
}
public String identifier_type;
public boolean isIdentifier_typeValid() {
return __v_identifier_type;
}
public String getIdentifier_type() {
return identifier_type;
}
public String facility_id;
public boolean isFacility_idValid() {
return __v_facility_id;
}
public String getFacility_id() {
return facility_id;
}
public IdsImpl(IdsBase __o) {
patient_id = __o.getPatient_id();
identifier_type = __o.getIdentifier_type();
facility_id = __o.getFacility_id();
}
public IdsImpl() {
}
public void computeValidityAndDerived(DerivedSource __src) {
java.lang.String __tmpStr;
try {

if(__src1.includes(__src)) {
if(__v_patient_id) {

__v_patient_id_norm = StringUtils.nonEmptyString(patient_id_norm);
}
} else {
__v_patient_id_norm = StringUtils.nonEmptyString(patient_id_norm);
}
__v_identifier_type = StringUtils.nonEmptyString(identifier_type);
__v_facility_id = StringUtils.nonEmptyString(facility_id) && !facility_id.equals("CIRU");
} catch(Exception __ex) {
logger.severe("Computing validity and derived of IdsImpl" + __ex);
}
}
public void resetValidityAndDerived(DerivedSource __src) {
if(__src1.includes(__src)) {
patient_id_norm = null;
__v_patient_id_norm = false;
}
}
public static IdsImpl instance() {
IdsImpl tmpInstance = new IdsImpl();
return tmpInstance;
}
private static DerivedSource __src1 = DerivedSource.valueOf("all");
}
