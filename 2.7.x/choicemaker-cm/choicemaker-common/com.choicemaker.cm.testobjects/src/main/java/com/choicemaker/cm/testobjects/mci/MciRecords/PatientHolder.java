// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.testobjects.mci.MciRecords;
import com.choicemaker.util.StringUtils;
import com.choicemaker.cm.custom.mci.encryption.*;
import com.choicemaker.cm.custom.mci.matching.*;
import com.choicemaker.cm.custom.mci.nameparser.*;
import com.choicemaker.cm.custom.mci.validation.*;
import com.choicemaker.cm.matching.en.*;
import com.choicemaker.cm.matching.en.us.*;
import com.choicemaker.cm.matching.gen.*;
import com.choicemaker.cm.validation.eclipse.*;
import com.choicemaker.cm.validation.eclipse.impl.*;
import java.util.*;
/**
 * Generated holder class for the node type patient. See package documentation for details.
 */
public class PatientHolder implements com.choicemaker.cm.testobjects.mci.MciRecords.PatientBase, java.io.Serializable {
/** Default constructor. Initializes all all arrays for nested record to zero length arrays and all other values to their defaults (0/null). */public PatientHolder() {
names = NamesHolder.ZERO_ARRAY;
ethnicity = EthnicityHolder.ZERO_ARRAY;
race = RaceHolder.ZERO_ARRAY;
ids = IdsHolder.ZERO_ARRAY;
address = AddressHolder.ZERO_ARRAY;
contacts = ContactsHolder.ZERO_ARRAY;
mothers = MothersHolder.ZERO_ARRAY;
events = EventsHolder.ZERO_ARRAY;
providers = ProvidersHolder.ZERO_ARRAY;
frozen = FrozenHolder.ZERO_ARRAY;
indexAndOutstanding = IndexAndOutstandingHolder.ZERO_ARRAY;
}
private boolean mci_idValid;
protected int mci_id;
/**
 * Returns whether the value of the field mci_id is valid according to the validity predicate in the ChoiceMaker schema.
 * @return  Whether the value of the field mci_id is valid according to the validity predicate in the ChoiceMaker schema.
*/
public boolean isMci_idValid() {
return mci_idValid;
}
/**
 * Returns the value of mci_id.
 * @return  The value of mci_id.
*/
public int getMci_id() {
return mci_id;
}
/**
 * Sets the value of mci_id.
 * @param  __v  The value of mci_id.
*/
public void setMci_id(int __v) {
this.mci_id = __v;
}
private boolean facility_idValid;
protected String facility_id;
/**
 * Returns whether the value of the field facility_id is valid according to the validity predicate in the ChoiceMaker schema.
 * @return  Whether the value of the field facility_id is valid according to the validity predicate in the ChoiceMaker schema.
*/
public boolean isFacility_idValid() {
return facility_idValid;
}
/**
 * Returns the value of facility_id.
 * @return  The value of facility_id.
*/
public String getFacility_id() {
return facility_id;
}
/**
 * Sets the value of facility_id.
 * @param  __v  The value of facility_id.
*/
public void setFacility_id(String __v) {
this.facility_id = __v;
}
private boolean language_cdValid;
protected String language_cd;
/**
 * Returns whether the value of the field language_cd is valid according to the validity predicate in the ChoiceMaker schema.
 * @return  Whether the value of the field language_cd is valid according to the validity predicate in the ChoiceMaker schema.
*/
public boolean isLanguage_cdValid() {
return language_cdValid;
}
/**
 * Returns the value of language_cd.
 * @return  The value of language_cd.
*/
public String getLanguage_cd() {
return language_cd;
}
/**
 * Sets the value of language_cd.
 * @param  __v  The value of language_cd.
*/
public void setLanguage_cd(String __v) {
this.language_cd = __v;
}
private boolean birth_country_cdValid;
protected String birth_country_cd;
/**
 * Returns whether the value of the field birth_country_cd is valid according to the validity predicate in the ChoiceMaker schema.
 * @return  Whether the value of the field birth_country_cd is valid according to the validity predicate in the ChoiceMaker schema.
*/
public boolean isBirth_country_cdValid() {
return birth_country_cdValid;
}
/**
 * Returns the value of birth_country_cd.
 * @return  The value of birth_country_cd.
*/
public String getBirth_country_cd() {
return birth_country_cd;
}
/**
 * Sets the value of birth_country_cd.
 * @param  __v  The value of birth_country_cd.
*/
public void setBirth_country_cd(String __v) {
this.birth_country_cd = __v;
}
private boolean multi_birth_indValid;
protected char multi_birth_ind;
/**
 * Returns whether the value of the field multi_birth_ind is valid according to the validity predicate in the ChoiceMaker schema.
 * @return  Whether the value of the field multi_birth_ind is valid according to the validity predicate in the ChoiceMaker schema.
*/
public boolean isMulti_birth_indValid() {
return multi_birth_indValid;
}
/**
 * Returns the value of multi_birth_ind.
 * @return  The value of multi_birth_ind.
*/
public char getMulti_birth_ind() {
return multi_birth_ind;
}
/**
 * Sets the value of multi_birth_ind.
 * @param  __v  The value of multi_birth_ind.
*/
public void setMulti_birth_ind(char __v) {
this.multi_birth_ind = __v;
}
private boolean src_system_idValid;
protected String src_system_id;
/**
 * Returns whether the value of the field src_system_id is valid according to the validity predicate in the ChoiceMaker schema.
 * @return  Whether the value of the field src_system_id is valid according to the validity predicate in the ChoiceMaker schema.
*/
public boolean isSrc_system_idValid() {
return src_system_idValid;
}
/**
 * Returns the value of src_system_id.
 * @return  The value of src_system_id.
*/
public String getSrc_system_id() {
return src_system_id;
}
/**
 * Sets the value of src_system_id.
 * @param  __v  The value of src_system_id.
*/
public void setSrc_system_id(String __v) {
this.src_system_id = __v;
}
protected NamesBase[] names;
/**
 * Returns the nested nodes of type names.
 * @return  The nested nodes of type names.
*/
public NamesBase[] getNames() {
return names;
}
/**
 * Sets the nested nodes of type names.
 * The value may not be <code>null</code> and all array elements must be non <code>null</code>.
 * @param  __val  The nested nodes of type names.
*/
public void setNames(NamesBase[] __val) {
this.names = __val;
}
/**
 * Returns the nested names at the specified index.
 * @param  __index  The index.
 * @return  The nested names at the specified index.
*/
public NamesBase getNames(int __index) {
return names[__index];
}
/**
 * Sets the nested node at the specified index.
 * @param   __val  The value. Must not be <code>null</code>.
 * @param  __index  The index.
*/
public void setNames(int __index, NamesBase __val) {
this.names[__index] = __val;
}
protected EthnicityBase[] ethnicity;
/**
 * Returns the nested nodes of type ethnicity.
 * @return  The nested nodes of type ethnicity.
*/
public EthnicityBase[] getEthnicity() {
return ethnicity;
}
/**
 * Sets the nested nodes of type ethnicity.
 * The value may not be <code>null</code> and all array elements must be non <code>null</code>.
 * @param  __val  The nested nodes of type ethnicity.
*/
public void setEthnicity(EthnicityBase[] __val) {
this.ethnicity = __val;
}
/**
 * Returns the nested ethnicity at the specified index.
 * @param  __index  The index.
 * @return  The nested ethnicity at the specified index.
*/
public EthnicityBase getEthnicity(int __index) {
return ethnicity[__index];
}
/**
 * Sets the nested node at the specified index.
 * @param   __val  The value. Must not be <code>null</code>.
 * @param  __index  The index.
*/
public void setEthnicity(int __index, EthnicityBase __val) {
this.ethnicity[__index] = __val;
}
protected RaceBase[] race;
/**
 * Returns the nested nodes of type race.
 * @return  The nested nodes of type race.
*/
public RaceBase[] getRace() {
return race;
}
/**
 * Sets the nested nodes of type race.
 * The value may not be <code>null</code> and all array elements must be non <code>null</code>.
 * @param  __val  The nested nodes of type race.
*/
public void setRace(RaceBase[] __val) {
this.race = __val;
}
/**
 * Returns the nested race at the specified index.
 * @param  __index  The index.
 * @return  The nested race at the specified index.
*/
public RaceBase getRace(int __index) {
return race[__index];
}
/**
 * Sets the nested node at the specified index.
 * @param   __val  The value. Must not be <code>null</code>.
 * @param  __index  The index.
*/
public void setRace(int __index, RaceBase __val) {
this.race[__index] = __val;
}
protected IdsBase[] ids;
/**
 * Returns the nested nodes of type ids.
 * @return  The nested nodes of type ids.
*/
public IdsBase[] getIds() {
return ids;
}
/**
 * Sets the nested nodes of type ids.
 * The value may not be <code>null</code> and all array elements must be non <code>null</code>.
 * @param  __val  The nested nodes of type ids.
*/
public void setIds(IdsBase[] __val) {
this.ids = __val;
}
/**
 * Returns the nested ids at the specified index.
 * @param  __index  The index.
 * @return  The nested ids at the specified index.
*/
public IdsBase getIds(int __index) {
return ids[__index];
}
/**
 * Sets the nested node at the specified index.
 * @param   __val  The value. Must not be <code>null</code>.
 * @param  __index  The index.
*/
public void setIds(int __index, IdsBase __val) {
this.ids[__index] = __val;
}
protected AddressBase[] address;
/**
 * Returns the nested nodes of type address.
 * @return  The nested nodes of type address.
*/
public AddressBase[] getAddress() {
return address;
}
/**
 * Sets the nested nodes of type address.
 * The value may not be <code>null</code> and all array elements must be non <code>null</code>.
 * @param  __val  The nested nodes of type address.
*/
public void setAddress(AddressBase[] __val) {
this.address = __val;
}
/**
 * Returns the nested address at the specified index.
 * @param  __index  The index.
 * @return  The nested address at the specified index.
*/
public AddressBase getAddress(int __index) {
return address[__index];
}
/**
 * Sets the nested node at the specified index.
 * @param   __val  The value. Must not be <code>null</code>.
 * @param  __index  The index.
*/
public void setAddress(int __index, AddressBase __val) {
this.address[__index] = __val;
}
protected ContactsBase[] contacts;
/**
 * Returns the nested nodes of type contacts.
 * @return  The nested nodes of type contacts.
*/
public ContactsBase[] getContacts() {
return contacts;
}
/**
 * Sets the nested nodes of type contacts.
 * The value may not be <code>null</code> and all array elements must be non <code>null</code>.
 * @param  __val  The nested nodes of type contacts.
*/
public void setContacts(ContactsBase[] __val) {
this.contacts = __val;
}
/**
 * Returns the nested contacts at the specified index.
 * @param  __index  The index.
 * @return  The nested contacts at the specified index.
*/
public ContactsBase getContacts(int __index) {
return contacts[__index];
}
/**
 * Sets the nested node at the specified index.
 * @param   __val  The value. Must not be <code>null</code>.
 * @param  __index  The index.
*/
public void setContacts(int __index, ContactsBase __val) {
this.contacts[__index] = __val;
}
protected MothersBase[] mothers;
/**
 * Returns the nested nodes of type mothers.
 * @return  The nested nodes of type mothers.
*/
public MothersBase[] getMothers() {
return mothers;
}
/**
 * Sets the nested nodes of type mothers.
 * The value may not be <code>null</code> and all array elements must be non <code>null</code>.
 * @param  __val  The nested nodes of type mothers.
*/
public void setMothers(MothersBase[] __val) {
this.mothers = __val;
}
/**
 * Returns the nested mothers at the specified index.
 * @param  __index  The index.
 * @return  The nested mothers at the specified index.
*/
public MothersBase getMothers(int __index) {
return mothers[__index];
}
/**
 * Sets the nested node at the specified index.
 * @param   __val  The value. Must not be <code>null</code>.
 * @param  __index  The index.
*/
public void setMothers(int __index, MothersBase __val) {
this.mothers[__index] = __val;
}
protected EventsBase[] events;
/**
 * Returns the nested nodes of type events.
 * @return  The nested nodes of type events.
*/
public EventsBase[] getEvents() {
return events;
}
/**
 * Sets the nested nodes of type events.
 * The value may not be <code>null</code> and all array elements must be non <code>null</code>.
 * @param  __val  The nested nodes of type events.
*/
public void setEvents(EventsBase[] __val) {
this.events = __val;
}
/**
 * Returns the nested events at the specified index.
 * @param  __index  The index.
 * @return  The nested events at the specified index.
*/
public EventsBase getEvents(int __index) {
return events[__index];
}
/**
 * Sets the nested node at the specified index.
 * @param   __val  The value. Must not be <code>null</code>.
 * @param  __index  The index.
*/
public void setEvents(int __index, EventsBase __val) {
this.events[__index] = __val;
}
protected ProvidersBase[] providers;
/**
 * Returns the nested nodes of type providers.
 * @return  The nested nodes of type providers.
*/
public ProvidersBase[] getProviders() {
return providers;
}
/**
 * Sets the nested nodes of type providers.
 * The value may not be <code>null</code> and all array elements must be non <code>null</code>.
 * @param  __val  The nested nodes of type providers.
*/
public void setProviders(ProvidersBase[] __val) {
this.providers = __val;
}
/**
 * Returns the nested providers at the specified index.
 * @param  __index  The index.
 * @return  The nested providers at the specified index.
*/
public ProvidersBase getProviders(int __index) {
return providers[__index];
}
/**
 * Sets the nested node at the specified index.
 * @param   __val  The value. Must not be <code>null</code>.
 * @param  __index  The index.
*/
public void setProviders(int __index, ProvidersBase __val) {
this.providers[__index] = __val;
}
protected FrozenBase[] frozen;
/**
 * Returns the nested nodes of type frozen.
 * @return  The nested nodes of type frozen.
*/
public FrozenBase[] getFrozen() {
return frozen;
}
/**
 * Sets the nested nodes of type frozen.
 * The value may not be <code>null</code> and all array elements must be non <code>null</code>.
 * @param  __val  The nested nodes of type frozen.
*/
public void setFrozen(FrozenBase[] __val) {
this.frozen = __val;
}
/**
 * Returns the nested frozen at the specified index.
 * @param  __index  The index.
 * @return  The nested frozen at the specified index.
*/
public FrozenBase getFrozen(int __index) {
return frozen[__index];
}
/**
 * Sets the nested node at the specified index.
 * @param   __val  The value. Must not be <code>null</code>.
 * @param  __index  The index.
*/
public void setFrozen(int __index, FrozenBase __val) {
this.frozen[__index] = __val;
}
protected IndexAndOutstandingBase[] indexAndOutstanding;
/**
 * Returns the nested nodes of type indexAndOutstanding.
 * @return  The nested nodes of type indexAndOutstanding.
*/
public IndexAndOutstandingBase[] getIndexAndOutstanding() {
return indexAndOutstanding;
}
/**
 * Sets the nested nodes of type indexAndOutstanding.
 * The value may not be <code>null</code> and all array elements must be non <code>null</code>.
 * @param  __val  The nested nodes of type indexAndOutstanding.
*/
public void setIndexAndOutstanding(IndexAndOutstandingBase[] __val) {
this.indexAndOutstanding = __val;
}
/**
 * Returns the nested indexAndOutstanding at the specified index.
 * @param  __index  The index.
 * @return  The nested indexAndOutstanding at the specified index.
*/
public IndexAndOutstandingBase getIndexAndOutstanding(int __index) {
return indexAndOutstanding[__index];
}
/**
 * Sets the nested node at the specified index.
 * @param   __val  The value. Must not be <code>null</code>.
 * @param  __index  The index.
*/
public void setIndexAndOutstanding(int __index, IndexAndOutstandingBase __val) {
this.indexAndOutstanding[__index] = __val;
}
/** Copy constructor. Performs a deep copy of the nodes, but not the values.
 * @param  __o  The node to copy.
*/
public PatientHolder(PatientBase __o) {
mci_id = __o.getMci_id();
mci_idValid = __o.isMci_idValid();
facility_id = __o.getFacility_id();
facility_idValid = __o.isFacility_idValid();
language_cd = __o.getLanguage_cd();
language_cdValid = __o.isLanguage_cdValid();
birth_country_cd = __o.getBirth_country_cd();
birth_country_cdValid = __o.isBirth_country_cdValid();
multi_birth_ind = __o.getMulti_birth_ind();
multi_birth_indValid = __o.isMulti_birth_indValid();
src_system_id = __o.getSrc_system_id();
src_system_idValid = __o.isSrc_system_idValid();
NamesBase[] __onames = __o.getNames();
names = new NamesBase[__onames.length];
for(int __i = 0; __i < names.length; ++__i) {
(names[__i] = new NamesHolder(__onames[__i])).setOuter(this);
}
EthnicityBase[] __oethnicity = __o.getEthnicity();
ethnicity = new EthnicityBase[__oethnicity.length];
for(int __i = 0; __i < ethnicity.length; ++__i) {
(ethnicity[__i] = new EthnicityHolder(__oethnicity[__i])).setOuter(this);
}
RaceBase[] __orace = __o.getRace();
race = new RaceBase[__orace.length];
for(int __i = 0; __i < race.length; ++__i) {
(race[__i] = new RaceHolder(__orace[__i])).setOuter(this);
}
IdsBase[] __oids = __o.getIds();
ids = new IdsBase[__oids.length];
for(int __i = 0; __i < ids.length; ++__i) {
(ids[__i] = new IdsHolder(__oids[__i])).setOuter(this);
}
AddressBase[] __oaddress = __o.getAddress();
address = new AddressBase[__oaddress.length];
for(int __i = 0; __i < address.length; ++__i) {
(address[__i] = new AddressHolder(__oaddress[__i])).setOuter(this);
}
ContactsBase[] __ocontacts = __o.getContacts();
contacts = new ContactsBase[__ocontacts.length];
for(int __i = 0; __i < contacts.length; ++__i) {
(contacts[__i] = new ContactsHolder(__ocontacts[__i])).setOuter(this);
}
MothersBase[] __omothers = __o.getMothers();
mothers = new MothersBase[__omothers.length];
for(int __i = 0; __i < mothers.length; ++__i) {
(mothers[__i] = new MothersHolder(__omothers[__i])).setOuter(this);
}
EventsBase[] __oevents = __o.getEvents();
events = new EventsBase[__oevents.length];
for(int __i = 0; __i < events.length; ++__i) {
(events[__i] = new EventsHolder(__oevents[__i])).setOuter(this);
}
ProvidersBase[] __oproviders = __o.getProviders();
providers = new ProvidersBase[__oproviders.length];
for(int __i = 0; __i < providers.length; ++__i) {
(providers[__i] = new ProvidersHolder(__oproviders[__i])).setOuter(this);
}
FrozenBase[] __ofrozen = __o.getFrozen();
frozen = new FrozenBase[__ofrozen.length];
for(int __i = 0; __i < frozen.length; ++__i) {
(frozen[__i] = new FrozenHolder(__ofrozen[__i])).setOuter(this);
}
IndexAndOutstandingBase[] __oindexAndOutstanding = __o.getIndexAndOutstanding();
indexAndOutstanding = new IndexAndOutstandingBase[__oindexAndOutstanding.length];
for(int __i = 0; __i < indexAndOutstanding.length; ++__i) {
(indexAndOutstanding[__i] = new IndexAndOutstandingHolder(__oindexAndOutstanding[__i])).setOuter(this);
}
}
}
