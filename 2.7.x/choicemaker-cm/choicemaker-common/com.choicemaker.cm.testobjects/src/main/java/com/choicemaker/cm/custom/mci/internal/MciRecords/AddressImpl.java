// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.custom.mci.internal.MciRecords;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import java.util.logging.*;
import com.choicemaker.util.StringUtils;







import com.choicemaker.cm.testobjects.mci.MciRecords.Address;
import com.choicemaker.cm.testobjects.mci.MciRecords.AddressBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.PatientBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.RelBase;


import java.util.*;

public class AddressImpl implements BaseRecord, Address {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.custom.mci.internal.MciRecords.AddressImpl.class.getName());
public static AddressImpl[] __zeroArray = new AddressImpl[0];
public PatientImpl outer;
public PatientBase getOuter() {
return outer;
}
public void setOuter(PatientBase outer) {
this.outer = (PatientImpl)outer;
}
public boolean __v_addr_id;
public boolean __v_boro_cd;
public boolean __v_bin;
public boolean __v_house_no;
public boolean __v_street_cd;
public boolean __v_street_name;
public boolean __v_city_name;
public boolean __v_state_cd;
public boolean __v_zipcode;
public long addr_id;
public boolean isAddr_idValid() {
return __v_addr_id;
}
public long getAddr_id() {
return addr_id;
}
public char boro_cd;
public boolean isBoro_cdValid() {
return __v_boro_cd;
}
public char getBoro_cd() {
return boro_cd;
}
public long bin;
public boolean isBinValid() {
return __v_bin;
}
public long getBin() {
return bin;
}
public String house_no;
public boolean isHouse_noValid() {
return __v_house_no;
}
public String getHouse_no() {
return house_no;
}
public String street_cd;
public boolean isStreet_cdValid() {
return __v_street_cd;
}
public String getStreet_cd() {
return street_cd;
}
public String street_name;
public boolean isStreet_nameValid() {
return __v_street_name;
}
public String getStreet_name() {
return street_name;
}
public String city_name;
public boolean isCity_nameValid() {
return __v_city_name;
}
public String getCity_name() {
return city_name;
}
public String state_cd;
public boolean isState_cdValid() {
return __v_state_cd;
}
public String getState_cd() {
return state_cd;
}
public String zipcode;
public boolean isZipcodeValid() {
return __v_zipcode;
}
public String getZipcode() {
return zipcode;
}
public RelImpl[] rel;
public RelBase[] getRel() {
return rel;
}
public RelBase getRel(int __index) {
return rel[__index];
}
public AddressImpl(AddressBase __o) {
addr_id = __o.getAddr_id();
boro_cd = __o.getBoro_cd();
bin = __o.getBin();
house_no = __o.getHouse_no();
street_cd = __o.getStreet_cd();
street_name = __o.getStreet_name();
city_name = __o.getCity_name();
state_cd = __o.getState_cd();
zipcode = __o.getZipcode();
RelBase[] __orel = __o.getRel();
rel = new RelImpl[__orel.length];
for(int __i = 0; __i < rel.length; ++__i) {
(rel[__i] = new RelImpl(__orel[__i])).setOuter(this);
}
}
public AddressImpl() {
}
public void computeValidityAndDerived(DerivedSource __src) {
java.lang.String __tmpStr;
try {
__v_addr_id = addr_id != 0;
__v_boro_cd = boro_cd!='\0' && boro_cd != '9';
__v_bin = bin > 100 && bin != 10000007 && bin / 10 != 1000001 && bin / 10 != 9005000;
__v_house_no = StringUtils.nonEmptyString(house_no) && !house_no.equals("999999") && !house_no.equals("????") && !house_no.equals("UNK");
__v_street_cd = StringUtils.nonEmptyString(street_cd) &&       !street_cd.equals("99999999999") && !street_cd.startsWith("1000000000") && !street_cd.equals("0");

__v_city_name = StringUtils.nonEmptyString(city_name);
__v_state_cd = StringUtils.nonEmptyString(state_cd);
__v_zipcode = StringUtils.nonEmptyString(zipcode) && !zipcode.equals("99999") && !zipcode.equals("00000");
for(int i = 0; i < rel.length; ++i) {
rel[i].computeValidityAndDerived(__src);
}
} catch(Exception __ex) {
logger.severe("Computing validity and derived of AddressImpl" + __ex);
}
}
public void resetValidityAndDerived(DerivedSource __src) {
for(int i = 0; i < rel.length; ++i) {
rel[i].resetValidityAndDerived(__src);
}
}
public static AddressImpl instance() {
AddressImpl tmpInstance = new AddressImpl();
tmpInstance.rel = new RelImpl[0];
return tmpInstance;
}
}
