// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.testobjects.mci.internal.MciRecords.flatfile;
import java.util.logging.*;
import java.util.*;
import java.io.*;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import com.choicemaker.cm.io.flatfile.base.*;














import com.choicemaker.util.StringUtils;









import java.util.*;
public final class MciRecordsMultiFileFlatFileReader implements FlatFileReader {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.testobjects.mci.internal.MciRecords.flatfile.MciRecordsMultiFileFlatFileReader.class.getName());
private Tokenizer[] tokenizer;
private boolean tagged;
private static DerivedSource src = DerivedSource.valueOf("flatfile");
private PatientImpl o__PatientImpl;
private NamesImpl o__NamesImpl;
private LinkedList l__NamesImpl = new LinkedList();
private int NamesImpl__mci_id;
private EthnicityImpl o__EthnicityImpl;
private LinkedList l__EthnicityImpl = new LinkedList();
private int EthnicityImpl__mci_id;
private RaceImpl o__RaceImpl;
private LinkedList l__RaceImpl = new LinkedList();
private int RaceImpl__mci_id;
private IdsImpl o__IdsImpl;
private LinkedList l__IdsImpl = new LinkedList();
private int IdsImpl__mci_id;
private AddressImpl o__AddressImpl;
private LinkedList l__AddressImpl = new LinkedList();
private int AddressImpl__mci_id;
private RelImpl o__RelImpl;
private LinkedList l__RelImpl = new LinkedList();
private int RelImpl__mci_id;
private long RelImpl__addr_id;
private ContactsImpl o__ContactsImpl;
private LinkedList l__ContactsImpl = new LinkedList();
private int ContactsImpl__mci_id;
private MothersImpl o__MothersImpl;
private LinkedList l__MothersImpl = new LinkedList();
private int MothersImpl__mci_id;
private EventsImpl o__EventsImpl;
private LinkedList l__EventsImpl = new LinkedList();
private int EventsImpl__mci_id;
private ProvidersImpl o__ProvidersImpl;
private LinkedList l__ProvidersImpl = new LinkedList();
private int ProvidersImpl__mci_id;
private FrozenImpl o__FrozenImpl;
private LinkedList l__FrozenImpl = new LinkedList();
private int FrozenImpl__mci_id;
private IndexAndOutstandingImpl o__IndexAndOutstandingImpl;
private LinkedList l__IndexAndOutstandingImpl = new LinkedList();
private int IndexAndOutstandingImpl__mci_id;
public MciRecordsMultiFileFlatFileReader(Tokenizer[] tokenizer, boolean tagged) {
this.tokenizer = tokenizer;
this.tagged = tagged;
}
public void open() throws IOException {
getRecordNamesImpl();
getRecordEthnicityImpl();
getRecordRaceImpl();
getRecordIdsImpl();
getRecordRelImpl();
getRecordAddressImpl();
getRecordContactsImpl();
getRecordMothersImpl();
getRecordEventsImpl();
getRecordProvidersImpl();
getRecordFrozenImpl();
getRecordIndexAndOutstandingImpl();
getRecordPatientImpl();
}
public Record getRecord() throws IOException {
Record __res = o__PatientImpl;
__res.computeValidityAndDerived(src);
getRecordPatientImpl();
return __res;
}
private void getRecordPatientImpl() throws IOException {
if(tokenizer[1].lineRead()) {
if(tagged && tokenizer[1].tag != "0") {
throw new IOException("Illegal tag: " + tokenizer[1].tag);
}
 o__PatientImpl = new PatientImpl();
o__PatientImpl.mci_id = tokenizer[1].nextInt(11);
o__PatientImpl.facility_id = tokenizer[1].nextTrimedString(32);
o__PatientImpl.language_cd = tokenizer[1].nextTrimedString(32);
o__PatientImpl.birth_country_cd = tokenizer[1].nextTrimedString(32);
o__PatientImpl.multi_birth_ind = tokenizer[1].nextChar(1, '\u0020');
o__PatientImpl.src_system_id = tokenizer[1].nextTrimedString(32);
tokenizer[1].readLine();
while(o__NamesImpl != null && o__PatientImpl.mci_id == NamesImpl__mci_id) {
l__NamesImpl.add(o__NamesImpl);
o__NamesImpl.outer = o__PatientImpl;
getRecordNamesImpl();
}
if(l__NamesImpl.size() == 0) {
o__PatientImpl.names = NamesImpl.__zeroArray;
} else {
l__NamesImpl.toArray(o__PatientImpl.names = new NamesImpl[l__NamesImpl.size()]);
l__NamesImpl.clear();
}
while(o__EthnicityImpl != null && o__PatientImpl.mci_id == EthnicityImpl__mci_id) {
l__EthnicityImpl.add(o__EthnicityImpl);
o__EthnicityImpl.outer = o__PatientImpl;
getRecordEthnicityImpl();
}
if(l__EthnicityImpl.size() == 0) {
o__PatientImpl.ethnicity = EthnicityImpl.__zeroArray;
} else {
l__EthnicityImpl.toArray(o__PatientImpl.ethnicity = new EthnicityImpl[l__EthnicityImpl.size()]);
l__EthnicityImpl.clear();
}
while(o__RaceImpl != null && o__PatientImpl.mci_id == RaceImpl__mci_id) {
l__RaceImpl.add(o__RaceImpl);
o__RaceImpl.outer = o__PatientImpl;
getRecordRaceImpl();
}
if(l__RaceImpl.size() == 0) {
o__PatientImpl.race = RaceImpl.__zeroArray;
} else {
l__RaceImpl.toArray(o__PatientImpl.race = new RaceImpl[l__RaceImpl.size()]);
l__RaceImpl.clear();
}
while(o__IdsImpl != null && o__PatientImpl.mci_id == IdsImpl__mci_id) {
l__IdsImpl.add(o__IdsImpl);
o__IdsImpl.outer = o__PatientImpl;
getRecordIdsImpl();
}
if(l__IdsImpl.size() == 0) {
o__PatientImpl.ids = IdsImpl.__zeroArray;
} else {
l__IdsImpl.toArray(o__PatientImpl.ids = new IdsImpl[l__IdsImpl.size()]);
l__IdsImpl.clear();
}
while(o__AddressImpl != null && o__PatientImpl.mci_id == AddressImpl__mci_id) {
l__AddressImpl.add(o__AddressImpl);
o__AddressImpl.outer = o__PatientImpl;
getRecordAddressImpl();
}
if(l__AddressImpl.size() == 0) {
o__PatientImpl.address = AddressImpl.__zeroArray;
} else {
l__AddressImpl.toArray(o__PatientImpl.address = new AddressImpl[l__AddressImpl.size()]);
l__AddressImpl.clear();
}
while(o__ContactsImpl != null && o__PatientImpl.mci_id == ContactsImpl__mci_id) {
l__ContactsImpl.add(o__ContactsImpl);
o__ContactsImpl.outer = o__PatientImpl;
getRecordContactsImpl();
}
if(l__ContactsImpl.size() == 0) {
o__PatientImpl.contacts = ContactsImpl.__zeroArray;
} else {
l__ContactsImpl.toArray(o__PatientImpl.contacts = new ContactsImpl[l__ContactsImpl.size()]);
l__ContactsImpl.clear();
}
while(o__MothersImpl != null && o__PatientImpl.mci_id == MothersImpl__mci_id) {
l__MothersImpl.add(o__MothersImpl);
o__MothersImpl.outer = o__PatientImpl;
getRecordMothersImpl();
}
if(l__MothersImpl.size() == 0) {
o__PatientImpl.mothers = MothersImpl.__zeroArray;
} else {
l__MothersImpl.toArray(o__PatientImpl.mothers = new MothersImpl[l__MothersImpl.size()]);
l__MothersImpl.clear();
}
while(o__EventsImpl != null && o__PatientImpl.mci_id == EventsImpl__mci_id) {
l__EventsImpl.add(o__EventsImpl);
o__EventsImpl.outer = o__PatientImpl;
getRecordEventsImpl();
}
if(l__EventsImpl.size() == 0) {
o__PatientImpl.events = EventsImpl.__zeroArray;
} else {
l__EventsImpl.toArray(o__PatientImpl.events = new EventsImpl[l__EventsImpl.size()]);
l__EventsImpl.clear();
}
while(o__ProvidersImpl != null && o__PatientImpl.mci_id == ProvidersImpl__mci_id) {
l__ProvidersImpl.add(o__ProvidersImpl);
o__ProvidersImpl.outer = o__PatientImpl;
getRecordProvidersImpl();
}
if(l__ProvidersImpl.size() == 0) {
o__PatientImpl.providers = ProvidersImpl.__zeroArray;
} else {
l__ProvidersImpl.toArray(o__PatientImpl.providers = new ProvidersImpl[l__ProvidersImpl.size()]);
l__ProvidersImpl.clear();
}
while(o__FrozenImpl != null && o__PatientImpl.mci_id == FrozenImpl__mci_id) {
l__FrozenImpl.add(o__FrozenImpl);
o__FrozenImpl.outer = o__PatientImpl;
getRecordFrozenImpl();
}
if(l__FrozenImpl.size() == 0) {
o__PatientImpl.frozen = FrozenImpl.__zeroArray;
} else {
l__FrozenImpl.toArray(o__PatientImpl.frozen = new FrozenImpl[l__FrozenImpl.size()]);
l__FrozenImpl.clear();
}
while(o__IndexAndOutstandingImpl != null && o__PatientImpl.mci_id == IndexAndOutstandingImpl__mci_id) {
l__IndexAndOutstandingImpl.add(o__IndexAndOutstandingImpl);
o__IndexAndOutstandingImpl.outer = o__PatientImpl;
getRecordIndexAndOutstandingImpl();
}
if(l__IndexAndOutstandingImpl.size() == 0) {
o__PatientImpl.indexAndOutstanding = IndexAndOutstandingImpl.__zeroArray;
} else {
l__IndexAndOutstandingImpl.toArray(o__PatientImpl.indexAndOutstanding = new IndexAndOutstandingImpl[l__IndexAndOutstandingImpl.size()]);
l__IndexAndOutstandingImpl.clear();
}
} else {
o__PatientImpl = null;
}
}
private void getRecordNamesImpl() throws IOException {
if(tokenizer[2].lineRead()) {
if(tagged && tokenizer[2].tag != "1") {
throw new IOException("Illegal tag: " + tokenizer[2].tag);
}
 o__NamesImpl = new NamesImpl();
NamesImpl__mci_id = tokenizer[2].nextInt(11);
o__NamesImpl.first_name = tokenizer[2].nextTrimedString(32);
o__NamesImpl.middle_name = tokenizer[2].nextTrimedString(32);
o__NamesImpl.last_name = tokenizer[2].nextTrimedString(32);
o__NamesImpl.dob = tokenizer[2].nextDate(10);
o__NamesImpl.sex_cd = tokenizer[2].nextChar(1, '\u0020');
o__NamesImpl.facility_id = tokenizer[2].nextTrimedString(32);
tokenizer[2].readLine();
} else {
o__NamesImpl = null;
}
}
private void getRecordEthnicityImpl() throws IOException {
if(tokenizer[3].lineRead()) {
if(tagged && tokenizer[3].tag != "2") {
throw new IOException("Illegal tag: " + tokenizer[3].tag);
}
 o__EthnicityImpl = new EthnicityImpl();
EthnicityImpl__mci_id = tokenizer[3].nextInt(11);
o__EthnicityImpl.ethnicity_cd = tokenizer[3].nextTrimedString(32);
tokenizer[3].readLine();
} else {
o__EthnicityImpl = null;
}
}
private void getRecordRaceImpl() throws IOException {
if(tokenizer[4].lineRead()) {
if(tagged && tokenizer[4].tag != "3") {
throw new IOException("Illegal tag: " + tokenizer[4].tag);
}
 o__RaceImpl = new RaceImpl();
RaceImpl__mci_id = tokenizer[4].nextInt(11);
o__RaceImpl.race_cd = tokenizer[4].nextTrimedString(32);
tokenizer[4].readLine();
} else {
o__RaceImpl = null;
}
}
private void getRecordIdsImpl() throws IOException {
if(tokenizer[5].lineRead()) {
if(tagged && tokenizer[5].tag != "4") {
throw new IOException("Illegal tag: " + tokenizer[5].tag);
}
 o__IdsImpl = new IdsImpl();
IdsImpl__mci_id = tokenizer[5].nextInt(11);
o__IdsImpl.patient_id = tokenizer[5].nextTrimedString(32);
o__IdsImpl.identifier_type = tokenizer[5].nextTrimedString(32);
o__IdsImpl.facility_id = tokenizer[5].nextTrimedString(32);
tokenizer[5].readLine();
} else {
o__IdsImpl = null;
}
}
private void getRecordAddressImpl() throws IOException {
if(tokenizer[6].lineRead()) {
if(tagged && tokenizer[6].tag != "5") {
throw new IOException("Illegal tag: " + tokenizer[6].tag);
}
 o__AddressImpl = new AddressImpl();
AddressImpl__mci_id = tokenizer[6].nextInt(11);
o__AddressImpl.addr_id = tokenizer[6].nextLong(20);
o__AddressImpl.boro_cd = tokenizer[6].nextChar(1, '\u0020');
o__AddressImpl.bin = tokenizer[6].nextLong(20);
o__AddressImpl.house_no = tokenizer[6].nextTrimedString(32);
o__AddressImpl.street_cd = tokenizer[6].nextTrimedString(32);
o__AddressImpl.street_name = tokenizer[6].nextTrimedString(32);
o__AddressImpl.city_name = tokenizer[6].nextTrimedString(32);
o__AddressImpl.state_cd = tokenizer[6].nextTrimedString(32);
o__AddressImpl.zipcode = tokenizer[6].nextTrimedString(32);
tokenizer[6].readLine();
while(o__RelImpl != null && AddressImpl__mci_id == RelImpl__mci_id && o__AddressImpl.addr_id == RelImpl__addr_id) {
l__RelImpl.add(o__RelImpl);
o__RelImpl.outer = o__AddressImpl;
getRecordRelImpl();
}
if(l__RelImpl.size() == 0) {
o__AddressImpl.rel = RelImpl.__zeroArray;
} else {
l__RelImpl.toArray(o__AddressImpl.rel = new RelImpl[l__RelImpl.size()]);
l__RelImpl.clear();
}
} else {
o__AddressImpl = null;
}
}
private void getRecordRelImpl() throws IOException {
if(tokenizer[7].lineRead()) {
if(tagged && tokenizer[7].tag != "6") {
throw new IOException("Illegal tag: " + tokenizer[7].tag);
}
 o__RelImpl = new RelImpl();
RelImpl__mci_id = tokenizer[7].nextInt(11);
RelImpl__addr_id = tokenizer[7].nextLong(20);
o__RelImpl.last_date_rptd = tokenizer[7].nextDate(10);
o__RelImpl.apt_no = tokenizer[7].nextTrimedString(32);
o__RelImpl.addr_type_cd = tokenizer[7].nextTrimedString(32);
o__RelImpl.raw_street_name = tokenizer[7].nextTrimedString(32);
o__RelImpl.phone_no = tokenizer[7].nextTrimedString(32);
tokenizer[7].readLine();
} else {
o__RelImpl = null;
}
}
private void getRecordContactsImpl() throws IOException {
if(tokenizer[8].lineRead()) {
if(tagged && tokenizer[8].tag != "7") {
throw new IOException("Illegal tag: " + tokenizer[8].tag);
}
 o__ContactsImpl = new ContactsImpl();
ContactsImpl__mci_id = tokenizer[8].nextInt(11);
o__ContactsImpl.relationship_cd = tokenizer[8].nextTrimedString(32);
o__ContactsImpl.last_name = tokenizer[8].nextTrimedString(32);
o__ContactsImpl.first_name = tokenizer[8].nextTrimedString(32);
o__ContactsImpl.sex_cd = tokenizer[8].nextChar(1, '\u0020');
o__ContactsImpl.phone_no_h = tokenizer[8].nextTrimedString(32);
o__ContactsImpl.phone_no_w = tokenizer[8].nextTrimedString(32);
tokenizer[8].readLine();
} else {
o__ContactsImpl = null;
}
}
private void getRecordMothersImpl() throws IOException {
if(tokenizer[9].lineRead()) {
if(tagged && tokenizer[9].tag != "8") {
throw new IOException("Illegal tag: " + tokenizer[9].tag);
}
 o__MothersImpl = new MothersImpl();
MothersImpl__mci_id = tokenizer[9].nextInt(11);
o__MothersImpl.mothers_maiden_name = tokenizer[9].nextTrimedString(32);
o__MothersImpl.mothers_dob = tokenizer[9].nextDate(10);
tokenizer[9].readLine();
} else {
o__MothersImpl = null;
}
}
private void getRecordEventsImpl() throws IOException {
if(tokenizer[10].lineRead()) {
if(tagged && tokenizer[10].tag != "9") {
throw new IOException("Illegal tag: " + tokenizer[10].tag);
}
 o__EventsImpl = new EventsImpl();
EventsImpl__mci_id = tokenizer[10].nextInt(11);
o__EventsImpl.event_date = tokenizer[10].nextDate(10);
o__EventsImpl.event_type_cd = tokenizer[10].nextTrimedString(32);
o__EventsImpl.facility_id = tokenizer[10].nextTrimedString(32);
o__EventsImpl.event_id = tokenizer[10].nextTrimedString(32);
o__EventsImpl.lab_date = tokenizer[10].nextDate(10);
tokenizer[10].readLine();
} else {
o__EventsImpl = null;
}
}
private void getRecordProvidersImpl() throws IOException {
if(tokenizer[11].lineRead()) {
if(tagged && tokenizer[11].tag != "10") {
throw new IOException("Illegal tag: " + tokenizer[11].tag);
}
 o__ProvidersImpl = new ProvidersImpl();
ProvidersImpl__mci_id = tokenizer[11].nextInt(11);
o__ProvidersImpl.provider_id = tokenizer[11].nextTrimedString(32);
o__ProvidersImpl.facility_id = tokenizer[11].nextTrimedString(32);
tokenizer[11].readLine();
} else {
o__ProvidersImpl = null;
}
}
private void getRecordFrozenImpl() throws IOException {
if(tokenizer[12].lineRead()) {
if(tagged && tokenizer[12].tag != "11") {
throw new IOException("Illegal tag: " + tokenizer[12].tag);
}
 o__FrozenImpl = new FrozenImpl();
FrozenImpl__mci_id = tokenizer[12].nextInt(11);
o__FrozenImpl.src_system_id = tokenizer[12].nextTrimedString(32);
tokenizer[12].readLine();
} else {
o__FrozenImpl = null;
}
}
private void getRecordIndexAndOutstandingImpl() throws IOException {
if(tokenizer[13].lineRead()) {
if(tagged && tokenizer[13].tag != "12") {
throw new IOException("Illegal tag: " + tokenizer[13].tag);
}
 o__IndexAndOutstandingImpl = new IndexAndOutstandingImpl();
IndexAndOutstandingImpl__mci_id = tokenizer[13].nextInt(11);
o__IndexAndOutstandingImpl.src_system_id = tokenizer[13].nextTrimedString(32);
o__IndexAndOutstandingImpl.patient_id = tokenizer[13].nextInt(11);
tokenizer[13].readLine();
} else {
o__IndexAndOutstandingImpl = null;
}
}
}
