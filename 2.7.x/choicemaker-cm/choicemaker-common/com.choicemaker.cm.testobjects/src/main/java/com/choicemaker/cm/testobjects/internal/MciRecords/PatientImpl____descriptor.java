// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.custom.mci.gend.internal.MciRecords;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import com.choicemaker.cm.core.util.*;
import com.choicemaker.util.*;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JLabel;
import com.choicemaker.util.StringUtils;
import com.choicemaker.cm.custom.mci.encryption.*;
import com.choicemaker.cm.custom.mci.matching.*;
import com.choicemaker.cm.custom.mci.nameparser.*;
import com.choicemaker.cm.custom.mci.validation.*;
import com.choicemaker.cm.matching.en.*;
import com.choicemaker.cm.matching.en.us.*;
import com.choicemaker.cm.matching.gen.*;
import com.choicemaker.cm.validation.eclipse.*;
import com.choicemaker.cm.validation.eclipse.impl.*;
import java.util.*;
public class PatientImpl____descriptor implements com.choicemaker.cm.core.Descriptor {
public static com.choicemaker.cm.core.Descriptor instance = new PatientImpl____descriptor();
private static HashMap m;
private static ColumnDefinition[] cols = {
new ColumnDefinition("mci_id", "mci_id", 100, JLabel.CENTER),
new ColumnDefinition("facility_id", "facility_id", 100, JLabel.CENTER),
new ColumnDefinition("language_cd", "language_cd", 100, JLabel.CENTER),
new ColumnDefinition("birth_country_cd", "birth_country_cd", 100, JLabel.CENTER),
new ColumnDefinition("multi_birth_ind", "multi_birth_ind", 100, JLabel.CENTER),
new ColumnDefinition("src_system_id", "src_system_id", 100, JLabel.CENTER)};
private static com.choicemaker.cm.core.Descriptor[] children = {
NamesImpl____descriptor.instance,
EthnicityImpl____descriptor.instance,
RaceImpl____descriptor.instance,
IdsImpl____descriptor.instance,
AddressImpl____descriptor.instance,
ContactsImpl____descriptor.instance,
MothersImpl____descriptor.instance,
EventsImpl____descriptor.instance,
ProvidersImpl____descriptor.instance,
FrozenImpl____descriptor.instance,
IndexAndOutstandingImpl____descriptor.instance};
public boolean[] getEditable(DerivedSource src) {
return new boolean[] {
true,
true,
true,
true,
true,
true};
}
public String getName() {
return "Patient";
}
public String getRecordName() {
return "patient";
}
public boolean isStackable() {
return false;
}
public ColumnDefinition[] getColumnDefinitions() {
return cols;
}
public Descriptor[] getChildren() {
return children;
}
public Record[][] getChildRecords(Record ri) {
return null;
}
public String getValueAsString(Record ri, int row, int col) {
if(row == 0) {
PatientImpl r = (PatientImpl)ri;
switch(col) {
case 0:
return String.valueOf(r.mci_id);
case 1:
return r.facility_id;
case 2:
return r.language_cd;
case 3:
return r.birth_country_cd;
case 4:
return r.multi_birth_ind == '\0' ? "" : String.valueOf(r.multi_birth_ind);
case 5:
return r.src_system_id;
default:
throw new IndexOutOfBoundsException();
}
} else {
throw new IndexOutOfBoundsException();
}
}
public Object getValue(Record ri, int row, int col) {
if(row == 0) {
PatientImpl r = (PatientImpl)ri;
switch(col) {
case 0:
return String.valueOf(r.mci_id);
case 1:
return r.facility_id;
case 2:
return r.language_cd;
case 3:
return r.birth_country_cd;
case 4:
return r.multi_birth_ind == '\0' ? "" : String.valueOf(r.multi_birth_ind);
case 5:
return r.src_system_id;
default:
throw new IndexOutOfBoundsException();
}
} else {
throw new IndexOutOfBoundsException();
}
}
public Class getHandledClass() {
return PatientImpl.class;
}
public boolean setValue(Record ri, int row, int col, String value) {
try {
if(row == 0) {
PatientImpl r = (PatientImpl)ri;
switch(col) {
case 0:
r.mci_id = value.length() == 0 ? (int)0 : Integer.parseInt(value);
break;
case 1:
r.facility_id = value;
break;
case 2:
r.language_cd = value;
break;
case 3:
r.birth_country_cd = value;
break;
case 4:
r.multi_birth_ind = value.length() == 0 ? (char)0 : StringUtils.getChar(value);
break;
case 5:
r.src_system_id = value;
break;
default:
throw new IndexOutOfBoundsException();
}
return true;} else {
throw new IndexOutOfBoundsException();
}
} catch(Exception ex) {
return false;
}
}
public boolean getValidity(Record ri, int row, int col) {
if(row == 0) {
PatientImpl r = (PatientImpl)ri;
switch(col) {
case 0:
return r.__v_mci_id;
case 1:
return r.__v_facility_id;
case 2:
return r.__v_language_cd;
case 3:
return r.__v_birth_country_cd;
case 4:
return r.__v_multi_birth_ind;
case 5:
return r.__v_src_system_id;
default:
throw new IndexOutOfBoundsException();
}
} else {
throw new IndexOutOfBoundsException();
}
}
public void addRow(int row, boolean above, Record ri) {
throw new UnsupportedOperationException("Unable to delete row. Data not stacked.");
}
public void deleteRow(Record ri, int row) {
throw new UnsupportedOperationException("Unable to add row. Data not stacked.");
}
public int getColumnCount() {
return cols.length;
}
public int getRowCount(Record ri) {
return 1;
}

public int getColumnIndexByName(String name) {
if(m == null) {
m = new HashMap(cols.length);
for(int i = 0; i < cols.length; ++i) {
m.put(cols[i].getFieldName(), new Integer(i));
}
}
Object o = m.get(name);
if(o == null) {
return -1;
} else {
return ((Integer)o).intValue();
}
}
}
