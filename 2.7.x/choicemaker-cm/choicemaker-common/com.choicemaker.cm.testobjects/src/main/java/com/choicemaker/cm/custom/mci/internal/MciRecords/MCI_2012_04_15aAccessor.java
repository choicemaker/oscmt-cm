// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.custom.mci.internal.MciRecords;
import java.io.Serializable;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import com.choicemaker.cm.io.flatfile.base.*;

import com.choicemaker.cm.io.blocking.automated.base.*;

import com.choicemaker.cm.io.xml.base.*;
import com.choicemaker.cm.testobjects.mci.MciRecords.PatientBase;
import com.choicemaker.cm.testobjects.mci.MciRecords.PatientHolder;
import com.choicemaker.cm.testobjects.mci.MciRecords.PatientRecordHolder;

import com.choicemaker.cm.io.xml.base.*;
import com.choicemaker.cm.io.xml.base.*;
import com.choicemaker.cm.io.db.base.*;

import com.choicemaker.cm.core.blocking.*;
import com.choicemaker.cm.io.blocking.exact.base.*;

public class MCI_2012_04_15aAccessor implements java.io.Serializable, com.choicemaker.cm.core.Accessor{
public ClueSet getClueSet() {
return new MCI_2012_04_15aClueSet();
}
public Descriptor getDescriptor() {
return PatientImpl____descriptor.instance;
}
public String getSchemaFileName() {
return "/Users/rphall/Documents/git.nosync/mci-proprietary/2.7.x/mci-models/mci20120415a/etc/models/MciRecords.schema";
}
public long getCreationDate() {
return 1517855188002L;
}
public int getNumRecordTypes() {
return 12;
}
public String getClueSetName() {
return "MCI_2012_04_15a";
}
public String getSchemaName() {
return "MciRecords";
}
private final DerivedSource BEAN_SOURCE = DerivedSource.valueOf("bean");
public Object toHolder(Record r) {
return new PatientHolder((PatientBase)r);
}
public Object toRecordHolder(Record r) {
return new PatientRecordHolder((PatientBase)r);
}
public Record toImpl(Object o) {
PatientImpl __res = new PatientImpl((PatientBase)o);
__res.computeValidityAndDerived(BEAN_SOURCE);
return __res;
}
public String[] getFlatFileFileNames() {
return flatFileFileNames;
}
private static final String[] flatFileFileNames = {"","TB_PATIENT","ST_PATIENT_NAMES","ST_PATIENT_ETHNICITY","ST_PATIENT_RACE","ST_PATIENT_IDS","TB_ADDRESS","ST_ADDRESS_RELATIONSHIP","ST_CONTACTS","ST_MOTHERS_MAIDEN_NAME","ST_HEALTH_EVENTS","ST_HEALTH_PROVIDERS","ST_FROZEN_IDS","TB_PATIENT_INDEX"};
private static int[] descWidths = {2, 10, 10, 6, 10, 32, 32, 32};
public int[] getDescWidths() {
return descWidths;
}
public Object getSingleFileFlatFileReader(Object tokenizer, boolean tagged, boolean singleLine) {
return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.flatfile.MciRecordsSingleFileFlatFileReader((Tokenizer)tokenizer, tagged, singleLine);
}
public Object getMultiFileFlatFileReader(Object tokenizer, boolean tagged) {
return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.flatfile.MciRecordsMultiFileFlatFileReader((Tokenizer[])tokenizer, tagged);
}
public Object getFlatFileRecordOutputter(boolean multiFile, boolean singleLine, boolean fixedLength, char sep, boolean tagged, int tagWidth, boolean filter) {
return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.flatfile.MciRecordsFlatFileRecordOutputter(multiFile, singleLine, fixedLength, sep, tagged, tagWidth, filter);
}
public Object getBlockingConfiguration(String name, String dbConf) {
if("batch".equals(name)) return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.blocking.MciRecords__batch__BlockingConfiguration(dbConf);
if("initialVital".equals(name)) return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.blocking.MciRecords__initialVital__BlockingConfiguration(dbConf);
if("interactive".equals(name)) return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.blocking.MciRecords__interactive__BlockingConfiguration(dbConf);
return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.blocking.MciRecords__batch__BlockingConfiguration(dbConf);
}
private static String[] blockingConfigurations = {"batch","initialVital","interactive"};
public String[] getBlockingConfigurations() {return blockingConfigurations;
}
public Object getXmlReader() {
return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.xml.MciRecordsXmlReader();
}
private static transient Object xmlRecordOutputter = null;
public synchronized Object getXmlRecordOutputter() {
if(xmlRecordOutputter == null) {
xmlRecordOutputter = new com.choicemaker.cm.testobjects.mci.internal.MciRecords.xml.MciRecordsXmlRecordOutputter();
}
return xmlRecordOutputter;
}
private static transient Object reportOutputter = null;
public synchronized Object getReportOutputter() {
if(reportOutputter == null) {
reportOutputter = new com.choicemaker.cm.custom.mci.internal.MciRecords.MciRecordsXmlReporter();
}
return reportOutputter;
}
private static String[] dbConfigurations = {"patient"};
public String[] getDbConfigurations() {return dbConfigurations;
}
public Object getDbReaderParallel(String name) {
if("patient".equals(name)) return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.db.MciRecords__patient__DbReaderParallel();
return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.db.MciRecords__patient__DbReaderParallel();
}
public Object getDbReaderSequential(String name) {
if("patient".equals(name)) return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.db.MciRecords__patient__DbReaderSequential();
return new com.choicemaker.cm.testobjects.mci.internal.MciRecords.db.MciRecords__patient__DbReaderSequential();
}
public Object getExactInMemoryBlockingConfiguration(String name, Object pm) {
PositionMap positionMap = (PositionMap)pm;
return null;
}
private static String[] exactInMemoryBlockingConfigurations = {};
public String[] getExactInMemoryBlockingConfigurations() {return exactInMemoryBlockingConfigurations;
}
}
