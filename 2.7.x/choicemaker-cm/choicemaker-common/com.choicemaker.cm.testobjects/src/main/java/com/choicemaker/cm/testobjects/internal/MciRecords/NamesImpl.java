// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.custom.mci.gend.internal.MciRecords;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import java.util.logging.*;
import com.choicemaker.util.StringUtils;
import com.choicemaker.cm.custom.mci.encryption.*;
import com.choicemaker.cm.custom.mci.matching.*;
import com.choicemaker.cm.custom.mci.nameparser.*;
import com.choicemaker.cm.custom.mci.validation.*;
import com.choicemaker.cm.matching.en.*;
import com.choicemaker.cm.matching.en.us.*;
import com.choicemaker.cm.matching.gen.*;
import com.choicemaker.cm.validation.eclipse.*;
import com.choicemaker.cm.validation.eclipse.impl.*;
import java.util.*;
import com.choicemaker.cm.custom.mci.gend.MciRecords.*;
public class NamesImpl implements BaseRecord, Names {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.custom.mci.gend.internal.MciRecords.NamesImpl.class.getName());
public static NamesImpl[] __zeroArray = new NamesImpl[0];
public PatientImpl outer;
public PatientBase getOuter() {
return outer;
}
public void setOuter(PatientBase outer) {
this.outer = (PatientImpl)outer;
}
public boolean __v_first_name;
public boolean __v_middle_name;
public boolean __v_last_name;
public boolean __v_sound_first_name;
public boolean __v_sound_last_name;
public boolean __v_parsedName;
public boolean __v_nameF;
public boolean __v_nameM;
public boolean __v_nameL;
public boolean __v_nameMaidn;
public boolean __v_nameT;
public boolean __v_mothersFirstName;
public boolean __v_multiBirthOrder;
public boolean __v_dob;
public boolean __v_dob_y_m;
public boolean __v_dobNumbers;
public boolean __v_sex_cd;
public boolean __v_clean_sex;
public boolean __v_facility_id;
public String first_name;
public boolean isFirst_nameValid() {
return __v_first_name;
}
public String getFirst_name() {
return first_name;
}
public String middle_name;
public boolean isMiddle_nameValid() {
return __v_middle_name;
}
public String getMiddle_name() {
return middle_name;
}
public String last_name;
public boolean isLast_nameValid() {
return __v_last_name;
}
public String getLast_name() {
return last_name;
}
public String sound_first_name;
public boolean isSound_first_nameValid() {
return __v_sound_first_name;
}
public String getSound_first_name() {
return sound_first_name;
}
public String sound_last_name;
public boolean isSound_last_nameValid() {
return __v_sound_last_name;
}
public String getSound_last_name() {
return sound_last_name;
}
public NameParser parsedName;
public boolean isParsedNameValid() {
return __v_parsedName;
}
public NameParser getParsedName() {
return parsedName;
}
public String nameF;
public boolean isNameFValid() {
return __v_nameF;
}
public String getNameF() {
return nameF;
}
public String nameM;
public boolean isNameMValid() {
return __v_nameM;
}
public String getNameM() {
return nameM;
}
public String nameL;
public boolean isNameLValid() {
return __v_nameL;
}
public String getNameL() {
return nameL;
}
public String nameMaidn;
public boolean isNameMaidnValid() {
return __v_nameMaidn;
}
public String getNameMaidn() {
return nameMaidn;
}
public String nameT;
public boolean isNameTValid() {
return __v_nameT;
}
public String getNameT() {
return nameT;
}
public String mothersFirstName;
public boolean isMothersFirstNameValid() {
return __v_mothersFirstName;
}
public String getMothersFirstName() {
return mothersFirstName;
}
public int multiBirthOrder;
public boolean isMultiBirthOrderValid() {
return __v_multiBirthOrder;
}
public int getMultiBirthOrder() {
return multiBirthOrder;
}
public Date dob;
public boolean isDobValid() {
return __v_dob;
}
public Date getDob() {
return dob;
}
public String dob_y_m;
public boolean isDob_y_mValid() {
return __v_dob_y_m;
}
public String getDob_y_m() {
return dob_y_m;
}
public int dobNumbers;
public boolean isDobNumbersValid() {
return __v_dobNumbers;
}
public int getDobNumbers() {
return dobNumbers;
}
public char sex_cd;
public boolean isSex_cdValid() {
return __v_sex_cd;
}
public char getSex_cd() {
return sex_cd;
}
public char clean_sex;
public boolean isClean_sexValid() {
return __v_clean_sex;
}
public char getClean_sex() {
return clean_sex;
}
public String facility_id;
public boolean isFacility_idValid() {
return __v_facility_id;
}
public String getFacility_id() {
return facility_id;
}
public NamesImpl(NamesBase __o) {
first_name = __o.getFirst_name();
middle_name = __o.getMiddle_name();
last_name = __o.getLast_name();
dob = __o.getDob();
sex_cd = __o.getSex_cd();
facility_id = __o.getFacility_id();
}
public NamesImpl() {
}
public void computeValidityAndDerived(DerivedSource __src) {
java.lang.String __tmpStr;
try {
__v_first_name = Validators.isValid("mciRawFirstNameValidator",first_name);
__v_middle_name = Validators.isValid("mciRawMiddleNameValidator",middle_name);
__v_last_name = Validators.isValid("mciRawLastNameValidator",last_name);
if(__src1.includes(__src)) {
if(__v_first_name) {
sound_first_name = Soundex.soundex(first_name);
__v_sound_first_name = true;
}
} else {
__v_sound_first_name = true;
}
if(__src1.includes(__src)) {
if(__v_last_name) {
sound_last_name = Soundex.soundex(last_name);
__v_sound_last_name = true;
}
} else {
__v_sound_last_name = true;
}
if(__src1.includes(__src)) {
if(__v_last_name || __v_first_name || __v_middle_name) {
parsedName = new NameParser(             __v_first_name ? MciNameUtils.preprocessFirstName(first_name) : "",             __v_middle_name ? middle_name : "",             __v_last_name ? MciNameUtils.preprocessLastName(last_name) : ""             );
__v_parsedName = true;
}
} else {
__v_parsedName = true;
}
if(__src1.includes(__src)) {
if(__v_parsedName) {
nameF = parsedName.getFirstName();
__v_nameF = Validators.isValid("mciParsedFirstNameValidator",nameF);
}
} else {
__v_nameF = Validators.isValid("mciParsedFirstNameValidator",nameF);
}
if(__src1.includes(__src)) {
if(__v_parsedName) {
nameM = parsedName.getMiddleNames();
__v_nameM = Validators.isValid("mciParsedMiddleNameValidator",nameM);
}
} else {
__v_nameM = Validators.isValid("mciParsedMiddleNameValidator",nameM);
}
if(__src1.includes(__src)) {
if(__v_parsedName) {
nameL = parsedName.getLastName();
__v_nameL = StringUtils.nonEmptyString(nameL);
}
} else {
__v_nameL = StringUtils.nonEmptyString(nameL);
}
if(__src1.includes(__src)) {
if(__v_parsedName) {
nameMaidn = parsedName.getPotentialMaidenName();
__v_nameMaidn = StringUtils.nonEmptyString(nameMaidn);
}
} else {
__v_nameMaidn = StringUtils.nonEmptyString(nameMaidn);
}
if(__src1.includes(__src)) {
if(__v_parsedName) {
nameT = parsedName.getTitles();
__v_nameT = StringUtils.nonEmptyString(nameT);
}
} else {
__v_nameT = StringUtils.nonEmptyString(nameT);
}
if(__src1.includes(__src)) {
if(__v_parsedName) {
mothersFirstName = parsedName.getMothersFirstName();
__v_mothersFirstName = StringUtils.nonEmptyString(mothersFirstName);
}
} else {
__v_mothersFirstName = StringUtils.nonEmptyString(mothersFirstName);
}
if(__src1.includes(__src)) {
if(StringUtils.nonEmptyString(first_name)) {
multiBirthOrder = MciBirthOrderNameParser.getBirthOrder(__v_first_name ? first_name : "");
__v_multiBirthOrder = true;
}
} else {
__v_multiBirthOrder = true;
}
__v_dob = dob != null &&      DateUtils.getYear(dob) <= DateUtils.getYear(new Date(System.currentTimeMillis())) &&     !(DateUtils.getMonth(dob) == 12 && DateUtils.getDayOfMonth(dob) == 31 && DateUtils.getYear(dob) == 1950) &&     !(DateUtils.getMonth(dob) == 1 && DateUtils.getDayOfMonth(dob) == 1 && DateUtils.getYear(dob) < 1910) &&     !(DateUtils.getMonth(dob) == DateUtils.getDayOfMonth(dob) && DateUtils.getDayOfMonth(dob) == DateUtils.getYear(dob) % 100 && DateUtils.getYear(dob) < 1913)     ;
if(__src1.includes(__src)) {
if(__v_dob) {
dob_y_m = DateUtils.yearAndMonth(dob);
__v_dob_y_m = true;
}
} else {
__v_dob_y_m = true;
}
if(__src1.includes(__src)) {
if(__v_dob) {
dobNumbers = DateUtils.numbersOnly(dob);
__v_dobNumbers = dobNumbers != 0;
}
} else {
__v_dobNumbers = dobNumbers != 0;
}
__v_sex_cd = sex_cd != '\0' && sex_cd != 'U';
if(__src1.includes(__src)) {
if(true) {
clean_sex = sex_cd == '1' ? 'M' : sex_cd == '2' ? 'F' : sex_cd;
__v_clean_sex = clean_sex != '\0' && clean_sex != 'U';
}
} else {
__v_clean_sex = clean_sex != '\0' && clean_sex != 'U';
}
__v_facility_id = StringUtils.nonEmptyString(facility_id) && !facility_id.startsWith("UNKNOWN") && !facility_id.equals("CIRU") && !facility_id.equals("DOH");
} catch(Exception __ex) {
logger.severe("Computing validity and derived of NamesImpl" + __ex);
}
}
public void resetValidityAndDerived(DerivedSource __src) {
if(__src1.includes(__src)) {
sound_first_name = null;
__v_sound_first_name = false;
}
if(__src1.includes(__src)) {
sound_last_name = null;
__v_sound_last_name = false;
}
if(__src1.includes(__src)) {
parsedName = null;
__v_parsedName = false;
}
if(__src1.includes(__src)) {
nameF = null;
__v_nameF = false;
}
if(__src1.includes(__src)) {
nameM = null;
__v_nameM = false;
}
if(__src1.includes(__src)) {
nameL = null;
__v_nameL = false;
}
if(__src1.includes(__src)) {
nameMaidn = null;
__v_nameMaidn = false;
}
if(__src1.includes(__src)) {
nameT = null;
__v_nameT = false;
}
if(__src1.includes(__src)) {
mothersFirstName = null;
__v_mothersFirstName = false;
}
if(__src1.includes(__src)) {
multiBirthOrder = 0;
__v_multiBirthOrder = false;
}
if(__src1.includes(__src)) {
dob_y_m = null;
__v_dob_y_m = false;
}
if(__src1.includes(__src)) {
dobNumbers = 0;
__v_dobNumbers = false;
}
if(__src1.includes(__src)) {
clean_sex = 0;
__v_clean_sex = false;
}
}
public static NamesImpl instance() {
NamesImpl tmpInstance = new NamesImpl();
return tmpInstance;
}
private static DerivedSource __src1 = DerivedSource.valueOf("all");
}
