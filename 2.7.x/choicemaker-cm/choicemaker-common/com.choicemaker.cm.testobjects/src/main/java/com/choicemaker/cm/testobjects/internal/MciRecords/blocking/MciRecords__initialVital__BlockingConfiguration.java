// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.custom.mci.gend.internal.MciRecords.blocking;
import java.util.logging.*;
import java.util.*;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import com.choicemaker.cm.io.blocking.automated.*;
import com.choicemaker.cm.io.blocking.automated.base.*;
import com.choicemaker.cm.custom.mci.gend.internal.MciRecords.*;
import com.choicemaker.util.StringUtils;
import com.choicemaker.cm.custom.mci.encryption.*;
import com.choicemaker.cm.custom.mci.matching.*;
import com.choicemaker.cm.custom.mci.nameparser.*;
import com.choicemaker.cm.custom.mci.validation.*;
import com.choicemaker.cm.matching.en.*;
import com.choicemaker.cm.matching.en.us.*;
import com.choicemaker.cm.matching.gen.*;
import com.choicemaker.cm.validation.eclipse.*;
import com.choicemaker.cm.validation.eclipse.impl.*;
import java.util.*;
public final class MciRecords__initialVital__BlockingConfiguration extends BlockingConfiguration {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.custom.mci.gend.internal.MciRecords.blocking.MciRecords__initialVital__BlockingConfiguration.class.getName());
public MciRecords__initialVital__BlockingConfiguration(String dbConf) {
int dbConfIndex;
if("patient".equals(dbConf)) {
dbConfIndex = 0;
 } else {
throw new IllegalArgumentException("dbConf: " + dbConf);
}
dbTables = dbConfigurations[dbConfIndex].dbts;
dbFields = dbConfigurations[dbConfIndex].dbfs;
blockingFields = dbConfigurations[dbConfIndex].bfs;
name = dbConfigurations[dbConfIndex].name;
}
public IBlockingValue[] createBlockingValues(Record q) {
init(NUM_BLOCKING_FIELDS);
addPatientImpl((PatientImpl)q);
return unionValues();
}
private void addPatientImpl(PatientImpl r) {
addIdsImpl(r.ids);
}
private void addIdsImpl(IdsImpl[] rs) {
for(int i = 0; i < rs.length; ++i) {
IdsImpl r = rs[i];
__l0 = r.__v_patient_id_norm && ("VITAL".equals(r.identifier_type))? addField(0, r.patient_id_norm, null) : null;
}
}
private static final BlockingConfiguration.DbConfiguration[] dbConfigurations = new BlockingConfiguration.DbConfiguration[1];
static {
QueryField[] qfs;
DbTable[] dbts;
DbField[] dbfs;
BlockingField[] bfs;
qfs = new QueryField[] {
new QueryField()
};
dbts = new DbTable[] {
new DbTable("TB_PATIENT", 0, "mci_id"),
new DbTable("ST_PATIENT_IDS", 1, "mci_id")
};
dbfs = new DbField[] {
new DbField(0, "patient_id_norm", "String", dbts[1], 29)
};
bfs = new BlockingField[] {
new BlockingField(0, qfs[0], dbfs[0], "")
};
dbConfigurations[0] = new DbConfiguration("MciRecords:b:initialVital:patient", qfs, dbts, dbfs, bfs);
};
private static final int NUM_BLOCKING_FIELDS = 1;
private IBlockingValue __l0;
static {
}
}
