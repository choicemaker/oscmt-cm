// Generated by ClueMaker compiler 2.7.1
//    Source: /Users/rphall/Documents/git.nosync/mci-proprietary/2.7.x/mci-models/mci20120415a/etc/models/MCI_2012_04_15a.clues
//    Date:   2/5/18 1:26 PM

package com.choicemaker.cm.custom.mci.internal.MciRecords;
import java.util.*;
import java.text.SimpleDateFormat;
import com.choicemaker.util.StringUtils;



.*;





import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import java.util.logging.*;
public class MCI_2012_04_15aClueSet implements com.choicemaker.cm.core.ClueSet {
   private static java.util.logging.Logger cat = java.util.logging.Logger.getLogger(MCI_2012_04_15aClueSet.class.getName());
   private int __evalNum;
   private int __evalNumrLargerMci_id_isMB;
   private boolean __exprrLargerMci_id_isMB;
   private boolean getCluerLargerMci_id_isMB(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrLargerMci_id_isMB != __evalNum))
         {
            __evalNumrLargerMci_id_isMB = __evalNum;
            __exprrLargerMci_id_isMB = ((q.mci_id >= m.mci_id) && (q.multi_birth_ind == 'Y')) || ((m.mci_id >= q.mci_id) && (m.multi_birth_ind == 'Y'));
         };
      return __exprrLargerMci_id_isMB;
   };
   private int __evalNumrSmallerMci_id_isMB;
   private boolean __exprrSmallerMci_id_isMB;
   private boolean getCluerSmallerMci_id_isMB(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrSmallerMci_id_isMB != __evalNum))
         {
            __evalNumrSmallerMci_id_isMB = __evalNum;
            __exprrSmallerMci_id_isMB = ((q.mci_id <= m.mci_id) && (q.multi_birth_ind == 'Y')) || ((m.mci_id <= q.mci_id) && (m.multi_birth_ind == 'Y'));
         };
      return __exprrSmallerMci_id_isMB;
   };
   private boolean __exists0(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.ids.length; i = i + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists1(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int j = 0; j < m.ids.length; j = j + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrLargerMci_id_isVR;
   private boolean __exprrLargerMci_id_isVR;
   private boolean getCluerLargerMci_id_isVR(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrLargerMci_id_isVR != __evalNum))
         {
            __evalNumrLargerMci_id_isVR = __evalNum;
            __exprrLargerMci_id_isVR = ((q.mci_id >= m.mci_id) && __exists0(q, m)) || ((m.mci_id >= q.mci_id) && __exists1(q, m));
         };
      return __exprrLargerMci_id_isVR;
   };
   private boolean __exists2(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.ids.length; i = i + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists3(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int j = 0; j < m.ids.length; j = j + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrSmallerMci_id_isVR;
   private boolean __exprrSmallerMci_id_isVR;
   private boolean getCluerSmallerMci_id_isVR(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrSmallerMci_id_isVR != __evalNum))
         {
            __evalNumrSmallerMci_id_isVR = __evalNum;
            __exprrSmallerMci_id_isVR = ((q.mci_id <= m.mci_id) && __exists2(q, m)) || ((m.mci_id <= q.mci_id) && __exists3(q, m));
         };
      return __exprrSmallerMci_id_isVR;
   };
   private boolean __exists4(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.frozen.length; i = i + 1)
         {
            if (q.frozen[i].__v_src_system_id)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists5(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int j = 0; j < m.frozen.length; j = j + 1)
         {
            if (m.frozen[j].__v_src_system_id)
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrLargerMci_id_isFrozen;
   private boolean __exprrLargerMci_id_isFrozen;
   private boolean getCluerLargerMci_id_isFrozen(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrLargerMci_id_isFrozen != __evalNum))
         {
            __evalNumrLargerMci_id_isFrozen = __evalNum;
            __exprrLargerMci_id_isFrozen = ((q.mci_id >= m.mci_id) && __exists4(q, m)) || ((m.mci_id >= q.mci_id) && __exists5(q, m));
         };
      return __exprrLargerMci_id_isFrozen;
   };
   private boolean __exists6(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.frozen.length; i = i + 1)
         {
            if (q.frozen[i].__v_src_system_id)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists7(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int j = 0; j < m.frozen.length; j = j + 1)
         {
            if (m.frozen[j].__v_src_system_id)
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrSmallerMci_id_isFrozen;
   private boolean __exprrSmallerMci_id_isFrozen;
   private boolean getCluerSmallerMci_id_isFrozen(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrSmallerMci_id_isFrozen != __evalNum))
         {
            __evalNumrSmallerMci_id_isFrozen = __evalNum;
            __exprrSmallerMci_id_isFrozen = ((q.mci_id <= m.mci_id) && __exists6(q, m)) || ((m.mci_id <= q.mci_id) && __exists7(q, m));
         };
      return __exprrSmallerMci_id_isFrozen;
   };
   private boolean __exists8(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $0 = false;
      long $2 = 0;
      boolean z$3;
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         {
            $0 = q.address[__i0].__v_bin;
            z$3 = false;
            if ((!$0))
               continue ;
            for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
               {
                  if ((($0 && m.address[__j0].__v_bin) && ((((!z$3) && (z$3 = true)) ?(($2 = q.address[__i0].bin)) : ($2)) == m.address[__j0].bin)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaBin;
   private boolean __expraBin;
   private boolean getClueaBin(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaBin != __evalNum))
         {
            __evalNumaBin = __evalNum;
            __expraBin = __exists8(q, m);
         };
      return __expraBin;
   };
   private boolean __exists9(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $4 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $6 = null;
      boolean z$7;
      boolean $8 = false;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $10 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $12 = null;
      boolean z$13;
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         {
            $4 = q.address[__i0].rel;
            z$7 = false;
            for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
               {
                  $8 = $4[__i1].__v_parsedPoBox;
                  if ((!$8))
                     continue ;
                  for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
                     {
                        $10 = m.address[__j0].rel;
                        z$13 = false;
                        if ((!$8))
                           continue ;
                        for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
                           {
                              if ((($8 && $10[__j1].__v_parsedPoBox) && (((!z$13) && (z$13 = true)) ?(($12 = m.address[__j0].rel)) : ($12))[__j1].parsedPoBox.equals((((!z$7) && (z$7 = true)) ?(($6 = q.address[__i0].rel)) : ($6))[__i1].parsedPoBox)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private int __evalNumaPoBox;
   private boolean __expraPoBox;
   private boolean getClueaPoBox(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaPoBox != __evalNum))
         {
            __evalNumaPoBox = __evalNum;
            __expraPoBox = (!getClueaBin(q, m)) && __exists9(q, m);
         };
      return __expraPoBox;
   };
   private boolean __swap10(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         if (q.address[__i0].__v_street_name)
            __lacc.add(q.address[__i0].street_name);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_parsedStreetName)
               __lacc.add(q.address[__i0].rel[__i1].parsedStreetName);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         if (m.address[__j0].__v_street_name)
            __lacc.add(m.address[__j0].street_name);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_parsedStreetName)
               __lacc.add(m.address[__j0].rel[__j1].parsedStreetName);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 0);
   };
   private int __evalNumaStreetName;
   private boolean __expraStreetName;
   private boolean getClueaStreetName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaStreetName != __evalNum))
         {
            __evalNumaStreetName = __evalNum;
            __expraStreetName = (!(getClueaBin(q, m) || getClueaPoBox(q, m))) && __swap10(q, m);
         };
      return __expraStreetName;
   };
   private boolean __exists11(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $14 = false;
      java.lang.String $16 = null;
      boolean z$17;
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         {
            $14 = q.address[__i0].__v_street_name && (StringUtils.removeNonDigits(q.address[__i0].street_name).length() > 0);
            z$17 = false;
            if ((!$14))
               continue ;
            for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
               {
                  if ((($14 && (m.address[__j0].__v_street_name && (StringUtils.removeNonDigits(m.address[__j0].street_name).length() > 0))) && StringUtils.removeNonDigits(m.address[__j0].street_name).equals(((!z$17) && (z$17 = true)) ?(($16 = StringUtils.removeNonDigits(q.address[__i0].street_name))) : ($16))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists12(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $18 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $20 = null;
      boolean z$21;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $22 = null;
      boolean z$23;
      boolean $24 = false;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $26 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $28 = null;
      boolean z$29;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $30 = null;
      boolean z$31;
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         {
            $18 = q.address[__i0].rel;
            z$21 = false;
            z$23 = false;
            for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
               {
                  $24 = $18[__i1].__v_parsedStreetName;
                  if ((!$24))
                     continue ;
                  for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
                     {
                        $26 = m.address[__j0].rel;
                        z$29 = false;
                        z$31 = false;
                        if ((!$24))
                           continue ;
                        for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
                           {
                              if (((($24 && (StringUtils.removeNonDigits((((!z$21) && (z$21 = true)) ?(($20 = q.address[__i0].rel)) : ($20))[__i1].parsedStreetName).length() > 0)) && ($26[__j1].__v_parsedStreetName && (StringUtils.removeNonDigits((((!z$29) && (z$29 = true)) ?(($28 = m.address[__j0].rel)) : ($28))[__j1].parsedStreetName).length() > 0))) && StringUtils.removeNonDigits((((!z$31) && (z$31 = true)) ?(($30 = m.address[__j0].rel)) : ($30))[__j1].parsedStreetName).equals(StringUtils.removeNonDigits((((!z$23) && (z$23 = true)) ?(($22 = q.address[__i0].rel)) : ($22))[__i1].parsedStreetName))))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private boolean let14(PatientImpl q, PatientImpl m, int i, int j, int k, String addrq, String addrm) throws java.lang.Exception {
      return ((addrq.length() > 0) && (addrm.length() > 0)) && addrq.equals(addrm);
   };
   private boolean __exists13(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $32 = false;
      java.lang.String $34 = null;
      boolean z$35;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $36 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $38 = null;
      boolean z$39;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $32 = q.address[i].__v_street_name;
            z$35 = false;
            if ((!$32))
               continue ;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  $36 = m.address[j].rel;
                  z$39 = false;
                  if ((!$32))
                     continue ;
                  for (int k = 0; k < m.address[j].rel.length; k = k + 1)
                     {
                        if ((($32 && $36[k].__v_parsedStreetName) && let14(q, m, i, j, k, ((!z$35) && (z$35 = true)) ?(($34 = StringUtils.removeNonDigits(q.address[i].street_name))) : ($34), StringUtils.removeNonDigits((((!z$39) && (z$39 = true)) ?(($38 = m.address[j].rel)) : ($38))[k].parsedStreetName))))
                           {
                              return true;
                           };
                     };
               };
         };
      return false;
   };
   private boolean let16(PatientImpl q, PatientImpl m, int i, int j, int k, String addrm, String addrq) throws java.lang.Exception {
      return ((addrq.length() > 0) && (addrm.length() > 0)) && addrq.equals(addrm);
   };
   private boolean __exists15(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $40 = false;
      java.lang.String $42 = null;
      boolean z$43;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $44 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $46 = null;
      boolean z$47;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $40 = m.address[i].__v_street_name;
            z$43 = false;
            if ((!$40))
               continue ;
            for (int j = 0; j < q.address.length; j = j + 1)
               {
                  $44 = q.address[j].rel;
                  z$47 = false;
                  if ((!$40))
                     continue ;
                  for (int k = 0; k < q.address[j].rel.length; k = k + 1)
                     {
                        if ((($40 && $44[k].__v_parsedStreetName) && let16(q, m, i, j, k, ((!z$43) && (z$43 = true)) ?(($42 = StringUtils.removeNonDigits(m.address[i].street_name))) : ($42), StringUtils.removeNonDigits((((!z$47) && (z$47 = true)) ?(($46 = q.address[j].rel)) : ($46))[k].parsedStreetName))))
                           {
                              return true;
                           };
                     };
               };
         };
      return false;
   };
   private int __evalNumaStreetNameDigits;
   private boolean __expraStreetNameDigits;
   private boolean getClueaStreetNameDigits(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaStreetNameDigits != __evalNum))
         {
            __evalNumaStreetNameDigits = __evalNum;
            __expraStreetNameDigits = (!((getClueaBin(q, m) || getClueaPoBox(q, m)) || getClueaStreetName(q, m))) && (((__exists11(q, m) || __exists12(q, m)) || __exists13(q, m)) || __exists15(q, m));
         };
      return __expraStreetNameDigits;
   };
   private int __evalNumaRoughHouseholdAddress;
   private boolean __expraRoughHouseholdAddress;
   private boolean getClueaRoughHouseholdAddress(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaRoughHouseholdAddress != __evalNum))
         {
            __evalNumaRoughHouseholdAddress = __evalNum;
            __expraRoughHouseholdAddress = ((getClueaBin(q, m) || getClueaPoBox(q, m)) || getClueaStreetName(q, m)) || getClueaStreetNameDigits(q, m);
         };
      return __expraRoughHouseholdAddress;
   };
   private boolean __swap17(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_clean_phone_no_h)
            __lacc.add(q.contacts[__i0].clean_phone_no_h);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_clean_phone_no_w)
            __lacc.add(q.contacts[__i0].clean_phone_no_w);
      qr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_clean_phone_no)
               __lacc.add(q.address[__i0].rel[__i1].clean_phone_no);
      qr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_phoneAsStreet)
               __lacc.add(q.address[__i0].rel[__i1].phoneAsStreet);
      qr[3] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_clean_phone_no_h)
            __lacc.add(m.contacts[__j0].clean_phone_no_h);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_clean_phone_no_w)
            __lacc.add(m.contacts[__j0].clean_phone_no_w);
      mr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_clean_phone_no)
               __lacc.add(m.address[__j0].rel[__j1].clean_phone_no);
      mr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_phoneAsStreet)
               __lacc.add(m.address[__j0].rel[__j1].phoneAsStreet);
      mr[3] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 0);
   };
   private int __evalNumaPhone_0;
   private boolean __expraPhone_0;
   private boolean getClueaPhone_0(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaPhone_0 != __evalNum))
         {
            __evalNumaPhone_0 = __evalNum;
            __expraPhone_0 = __swap17(q, m);
         };
      return __expraPhone_0;
   };
   private boolean __swap18(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_clean_phone_no_h)
            __lacc.add(LocalPhone.localPhone(q.contacts[__i0].clean_phone_no_h));
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_clean_phone_no_w)
            __lacc.add(LocalPhone.localPhone(q.contacts[__i0].clean_phone_no_w));
      qr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_clean_phone_no)
               __lacc.add(LocalPhone.localPhone(q.address[__i0].rel[__i1].clean_phone_no));
      qr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_phoneAsStreet)
               __lacc.add(LocalPhone.localPhone(q.address[__i0].rel[__i1].phoneAsStreet));
      qr[3] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_clean_phone_no_h)
            __lacc.add(LocalPhone.localPhone(m.contacts[__j0].clean_phone_no_h));
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_clean_phone_no_w)
            __lacc.add(LocalPhone.localPhone(m.contacts[__j0].clean_phone_no_w));
      mr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_clean_phone_no)
               __lacc.add(LocalPhone.localPhone(m.address[__j0].rel[__j1].clean_phone_no));
      mr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_phoneAsStreet)
               __lacc.add(LocalPhone.localPhone(m.address[__j0].rel[__j1].phoneAsStreet));
      mr[3] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 0);
   };
   private int __evalNumaLocalPhone_0;
   private boolean __expraLocalPhone_0;
   private boolean getClueaLocalPhone_0(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaLocalPhone_0 != __evalNum))
         {
            __evalNumaLocalPhone_0 = __evalNum;
            __expraLocalPhone_0 = __swap18(q, m);
         };
      return __expraLocalPhone_0;
   };
   private int __evalNumaRoughHouseholdPhone;
   private boolean __expraRoughHouseholdPhone;
   private boolean getClueaRoughHouseholdPhone(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaRoughHouseholdPhone != __evalNum))
         {
            __evalNumaRoughHouseholdPhone = __evalNum;
            __expraRoughHouseholdPhone = getClueaPhone_0(q, m) || getClueaLocalPhone_0(q, m);
         };
      return __expraRoughHouseholdPhone;
   };
   private boolean __exists19(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $48 = false;
      java.lang.String $50 = null;
      boolean z$51;
      java.lang.String $52 = null;
      boolean z$53;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $48 = q.contacts[i].__v_nameF;
            z$51 = false;
            z$53 = false;
            if ((!$48))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if ((($48 && m.contacts[j].__v_nameF) && ((((!z$51) && (z$51 = true)) ?(($50 = q.contacts[i].nameF)) : ($50)).equals(m.contacts[j].nameF) || approximateMatch(((!z$53) && (z$53 = true)) ?(($52 = q.contacts[i].nameF)) : ($52), m.contacts[j].nameF))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists20(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $54 = false;
      java.lang.String $56 = null;
      boolean z$57;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $54 = q.contacts[i].__v_nameL;
            z$57 = false;
            if ((!$54))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if ((($54 && m.contacts[j].__v_nameL) && approximateMatch(((!z$57) && (z$57 = true)) ?(($56 = q.contacts[i].nameL)) : ($56), m.contacts[j].nameL)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaApproxContactsNamesFirstAndLast_0;
   private boolean __expraApproxContactsNamesFirstAndLast_0;
   private boolean getClueaApproxContactsNamesFirstAndLast_0(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaApproxContactsNamesFirstAndLast_0 != __evalNum))
         {
            __evalNumaApproxContactsNamesFirstAndLast_0 = __evalNum;
            __expraApproxContactsNamesFirstAndLast_0 = __exists19(q, m) && __exists20(q, m);
         };
      return __expraApproxContactsNamesFirstAndLast_0;
   };
   private boolean __exists21(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $58 = false;
      java.lang.String $60 = null;
      boolean z$61;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $58 = q.contacts[__i0].__v_nameL;
            z$61 = false;
            if ((!$58))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((($58 && m.contacts[__j0].__v_nameL) && m.contacts[__j0].nameL.equals(((!z$61) && (z$61 = true)) ?(($60 = q.contacts[__i0].nameL)) : ($60))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaContactsNamesLast_0;
   private boolean __expraContactsNamesLast_0;
   private boolean getClueaContactsNamesLast_0(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesLast_0 != __evalNum))
         {
            __evalNumaContactsNamesLast_0 = __evalNum;
            __expraContactsNamesLast_0 = __exists21(q, m);
         };
      return __expraContactsNamesLast_0;
   };
   private int __evalNumaRoughHouseholdContacts;
   private boolean __expraRoughHouseholdContacts;
   private boolean getClueaRoughHouseholdContacts(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaRoughHouseholdContacts != __evalNum))
         {
            __evalNumaRoughHouseholdContacts = __evalNum;
            __expraRoughHouseholdContacts = getClueaContactsNamesLast_0(q, m) || getClueaApproxContactsNamesFirstAndLast_0(q, m);
         };
      return __expraRoughHouseholdContacts;
   };
   private boolean __exists22(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $62 = false;
      java.lang.String $64 = null;
      boolean z$65;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $62 = q.contacts[__i0].__v_nameMaidn;
            z$65 = false;
            if ((!$62))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((($62 && m.contacts[__j0].__v_nameMaidn) && m.contacts[__j0].nameMaidn.equals(((!z$65) && (z$65 = true)) ?(($64 = q.contacts[__i0].nameMaidn)) : ($64))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaContactsNamesMaiden_0;
   private boolean __expraContactsNamesMaiden_0;
   private boolean getClueaContactsNamesMaiden_0(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesMaiden_0 != __evalNum))
         {
            __evalNumaContactsNamesMaiden_0 = __evalNum;
            __expraContactsNamesMaiden_0 = __exists22(q, m);
         };
      return __expraContactsNamesMaiden_0;
   };
   private boolean __exists23(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $66 = false;
      java.lang.String $68 = null;
      boolean z$69;
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         {
            $66 = q.mothers[__i0].__v_mothers_maiden_name;
            z$69 = false;
            if ((!$66))
               continue ;
            for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
               {
                  if ((($66 && m.mothers[__j0].__v_mothers_maiden_name) && m.mothers[__j0].mothers_maiden_name.equals(((!z$69) && (z$69 = true)) ?(($68 = q.mothers[__i0].mothers_maiden_name)) : ($68))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaMothersMaiden_0;
   private boolean __expraMothersMaiden_0;
   private boolean getClueaMothersMaiden_0(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMothersMaiden_0 != __evalNum))
         {
            __evalNumaMothersMaiden_0 = __evalNum;
            __expraMothersMaiden_0 = __exists23(q, m);
         };
      return __expraMothersMaiden_0;
   };
   private int __evalNumaRoughHouseholdMother;
   private boolean __expraRoughHouseholdMother;
   private boolean getClueaRoughHouseholdMother(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaRoughHouseholdMother != __evalNum))
         {
            __evalNumaRoughHouseholdMother = __evalNum;
            __expraRoughHouseholdMother = getClueaContactsNamesMaiden_0(q, m) || getClueaMothersMaiden_0(q, m);
         };
      return __expraRoughHouseholdMother;
   };
   private int __evalNumisHH;
   private boolean __exprisHH;
   private boolean getClueisHH(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumisHH != __evalNum))
         {
            __evalNumisHH = __evalNum;
            __exprisHH = ((getClueaRoughHouseholdAddress(q, m) || getClueaRoughHouseholdPhone(q, m)) || getClueaRoughHouseholdContacts(q, m)) || getClueaRoughHouseholdMother(q, m);
         };
      return __exprisHH;
   };
   private int __evalNumisMB;
   private boolean __exprisMB;
   private boolean getClueisMB(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumisMB != __evalNum))
         {
            __evalNumisMB = __evalNum;
            __exprisMB = (q.multi_birth_ind == 'Y') || (m.multi_birth_ind == 'Y');
         };
      return __exprisMB;
   };
   private boolean __exists24(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $70 = false;
      for (int i = 0; i < q.ids.length; i = i + 1)
         {

            if ($70)
               return true;
            for (int j = 0; j < m.ids.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumisVR;
   private boolean __exprisVR;
   private boolean getClueisVR(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumisVR != __evalNum))
         {
            __evalNumisVR = __evalNum;
            __exprisVR = __exists24(q, m);
         };
      return __exprisVR;
   };
   private boolean __exists25(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $72 = false;
      boolean $74 = false;
      boolean z$75;
      for (int i = 0; i < q.ids.length; i = i + 1)
         {
            $72 = m.multi_birth_ind == 'N';
            z$75 = false;

               return true;

               continue ;
            for (int j = 0; j < m.ids.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumisVitalNotMB;
   private boolean __exprisVitalNotMB;
   private boolean getClueisVitalNotMB(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumisVitalNotMB != __evalNum))
         {
            __evalNumisVitalNotMB = __evalNum;
            __exprisVitalNotMB = __exists25(q, m);
         };
      return __exprisVitalNotMB;
   };
   private int __evalNumunreliableNotMB;
   private boolean __exprunreliableNotMB;
   private boolean getClueunreliableNotMB(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumunreliableNotMB != __evalNum))
         {
            __evalNumunreliableNotMB = __evalNum;
            __exprunreliableNotMB = ((q.multi_birth_ind != 'Y') && (m.multi_birth_ind != 'Y')) && (!getClueisVR(q, m));
         };
      return __exprunreliableNotMB;
   };
   private int TYPE_ALL_7;
   private int pairType;
   private int __evalNumPairType_7_ALL;
   private boolean __exprPairType_7_ALL;
   private boolean getCluePairType_7_ALL(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumPairType_7_ALL != __evalNum))
         {
            __evalNumPairType_7_ALL = __evalNum;
            __exprPairType_7_ALL = pairType == TYPE_ALL_7;
         };
      return __exprPairType_7_ALL;
   };
   private boolean __exists26(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $76 = false;
      java.lang.String $78 = null;
      boolean z$79;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $76 = q.names[__i0].__v_nameF;
            z$79 = false;
            if ((!$76))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($76 && m.names[__j0].__v_nameF) && m.names[__j0].nameF.equals(((!z$79) && (z$79 = true)) ?(($78 = q.names[__i0].nameF)) : ($78))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists27(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $80 = false;
      java.lang.String $82 = null;
      boolean z$83;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $80 = q.names[__i0].__v_first_name && ((q.names[__i0].first_name != null) && (q.names[__i0].first_name.length() > 0));
            z$83 = false;
            if ((!$80))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($80 && (m.names[__j0].__v_first_name && ((m.names[__j0].first_name != null) && (m.names[__j0].first_name.length() > 0)))) && StringUtils.removeNonLetters(m.names[__j0].first_name.trim()).equals(((!z$83) && (z$83 = true)) ?(($82 = StringUtils.removeNonLetters(q.names[__i0].first_name.trim()))) : ($82))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaPatientNamesFirst;
   private boolean __expraPatientNamesFirst;
   private boolean getClueaPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaPatientNamesFirst != __evalNum))
         {
            __evalNumaPatientNamesFirst = __evalNum;
            __expraPatientNamesFirst = __exists26(q, m) || __exists27(q, m);
         };
      return __expraPatientNamesFirst;
   };
   private int __evalNummPatientNamesFirst;
   private boolean __exprmPatientNamesFirst;
   private boolean getCluemPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummPatientNamesFirst != __evalNum))
         {
            __evalNummPatientNamesFirst = __evalNum;
            __exprmPatientNamesFirst = getClueaPatientNamesFirst(q, m);
         };
      return __exprmPatientNamesFirst;
   };
   private boolean __exists28(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $84 = false;
      boolean $86 = false;
      boolean z$87;
      java.lang.String $88 = null;
      boolean z$89;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $84 = q.names[i].__v_nameF;
            z$87 = false;
            z$89 = false;
            if ((!$84))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((($84 && m.names[j].__v_nameF) && ((((!z$87) && (z$87 = true)) ?(($86 = q.names[i].nameF.length() == 1)) : ($86)) || (m.names[j].nameF.length() == 1))) && NameParser.matchingInitialOrName(((!z$89) && (z$89 = true)) ?(($88 = q.names[i].nameF)) : ($88), m.names[j].nameF)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaPatientNamesFirstInitial;
   private boolean __expraPatientNamesFirstInitial;
   private boolean getClueaPatientNamesFirstInitial(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaPatientNamesFirstInitial != __evalNum))
         {
            __evalNumaPatientNamesFirstInitial = __evalNum;
            __expraPatientNamesFirstInitial = (!getClueaPatientNamesFirst(q, m)) && __exists28(q, m);
         };
      return __expraPatientNamesFirstInitial;
   };
   private int __evalNummPatientNamesFirstInitial;
   private boolean __exprmPatientNamesFirstInitial;
   private boolean getCluemPatientNamesFirstInitial(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummPatientNamesFirstInitial != __evalNum))
         {
            __evalNummPatientNamesFirstInitial = __evalNum;
            __exprmPatientNamesFirstInitial = getClueaPatientNamesFirstInitial(q, m);
         };
      return __exprmPatientNamesFirstInitial;
   };
   private boolean __exists29(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.String $90 = null;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $90 = q.names[i].nameF;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((!Relations.emptyIntersection("nicknames", $90, m.names[j].nameF)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaNicknameRaw;
   private boolean __expraNicknameRaw;
   private boolean getClueaNicknameRaw(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaNicknameRaw != __evalNum))
         {
            __evalNumaNicknameRaw = __evalNum;
            __expraNicknameRaw = __exists29(q, m);
         };
      return __expraNicknameRaw;
   };
   private int __evalNumaNicknameQualified;
   private boolean __expraNicknameQualified;
   private boolean getClueaNicknameQualified(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaNicknameQualified != __evalNum))
         {
            __evalNumaNicknameQualified = __evalNum;
            __expraNicknameQualified = (!(getClueaPatientNamesFirst(q, m) || getClueaPatientNamesFirstInitial(q, m))) && getClueaNicknameRaw(q, m);
         };
      return __expraNicknameQualified;
   };
   private int __evalNummNickname;
   private boolean __exprmNickname;
   private boolean getCluemNickname(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummNickname != __evalNum))
         {
            __evalNummNickname = __evalNum;
            __exprmNickname = getClueaNicknameQualified(q, m);
         };
      return __exprmNickname;
   };
   private boolean __exists30(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $92 = false;
      java.lang.String $94 = null;
      boolean z$95;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $92 = q.names[i].__v_nameF && (q.names[i].nameF.length() >= 2);
            z$95 = false;
            if ((!$92))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($92 && (m.names[j].__v_nameF && (m.names[j].nameF.length() >= 2))) && StringUtils.overlap(((!z$95) && (z$95 = true)) ?(($94 = q.names[i].nameF)) : ($94), m.names[j].nameF)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaOverlapPatientNamesFirst;
   private boolean __expraOverlapPatientNamesFirst;
   private boolean getClueaOverlapPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaOverlapPatientNamesFirst != __evalNum))
         {
            __evalNumaOverlapPatientNamesFirst = __evalNum;
            __expraOverlapPatientNamesFirst = (!((getClueaPatientNamesFirst(q, m) || getClueaPatientNamesFirstInitial(q, m)) || getClueaNicknameQualified(q, m))) && __exists30(q, m);
         };
      return __expraOverlapPatientNamesFirst;
   };
   private int __evalNummOverlapPatientNamesFirst;
   private boolean __exprmOverlapPatientNamesFirst;
   private boolean getCluemOverlapPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummOverlapPatientNamesFirst != __evalNum))
         {
            __evalNummOverlapPatientNamesFirst = __evalNum;
            __exprmOverlapPatientNamesFirst = getClueaOverlapPatientNamesFirst(q, m);
         };
      return __exprmOverlapPatientNamesFirst;
   };
   private boolean __exists31(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $96 = false;
      int $98 = 0;
      boolean z$99;
      java.lang.String $100 = null;
      boolean z$101;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $96 = q.names[i].__v_nameF;
            z$99 = false;
            z$101 = false;
            if ((!$96))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((($96 && m.names[j].__v_nameF) && (Math.min(((!z$99) && (z$99 = true)) ?(($98 = q.names[i].nameF.length())) : ($98), m.names[j].nameF.length()) >= 4)) && (EditDistance2.editDistance2(((!z$101) && (z$101 = true)) ?(($100 = q.names[i].nameF)) : ($100), m.names[j].nameF, 1) < 2)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaEditDistancePatientNamesFirst;
   private boolean __expraEditDistancePatientNamesFirst;
   private boolean getClueaEditDistancePatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaEditDistancePatientNamesFirst != __evalNum))
         {
            __evalNumaEditDistancePatientNamesFirst = __evalNum;
            __expraEditDistancePatientNamesFirst = (!(((getClueaPatientNamesFirst(q, m) || getClueaPatientNamesFirstInitial(q, m)) || getClueaNicknameQualified(q, m)) || getClueaOverlapPatientNamesFirst(q, m))) && __exists31(q, m);
         };
      return __expraEditDistancePatientNamesFirst;
   };
   private int __evalNummEditDistancePatientNamesFirst;
   private boolean __exprmEditDistancePatientNamesFirst;
   private boolean getCluemEditDistancePatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummEditDistancePatientNamesFirst != __evalNum))
         {
            __evalNummEditDistancePatientNamesFirst = __evalNum;
            __exprmEditDistancePatientNamesFirst = getClueaEditDistancePatientNamesFirst(q, m);
         };
      return __exprmEditDistancePatientNamesFirst;
   };
   private boolean __exists32(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $102 = false;
      java.lang.String $104 = null;
      boolean z$105;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $102 = q.names[i].__v_nameF && (q.names[i].nameF.length() >= 2);
            z$105 = false;
            if ((!$102))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($102 && (m.names[j].__v_nameF && (m.names[j].nameF.length() >= 2))) && (Jaro.jaro(((!z$105) && (z$105 = true)) ?(($104 = q.names[i].nameF)) : ($104), m.names[j].nameF) >= 0.95F)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaJaroPatientNamesFirst;
   private boolean __expraJaroPatientNamesFirst;
   private boolean getClueaJaroPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaJaroPatientNamesFirst != __evalNum))
         {
            __evalNumaJaroPatientNamesFirst = __evalNum;
            __expraJaroPatientNamesFirst = (!((((getClueaPatientNamesFirst(q, m) || getClueaPatientNamesFirstInitial(q, m)) || getClueaNicknameQualified(q, m)) || getClueaOverlapPatientNamesFirst(q, m)) || getClueaEditDistancePatientNamesFirst(q, m))) && __exists32(q, m);
         };
      return __expraJaroPatientNamesFirst;
   };
   private int __evalNummJaroPatientNamesFirst;
   private boolean __exprmJaroPatientNamesFirst;
   private boolean getCluemJaroPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummJaroPatientNamesFirst != __evalNum))
         {
            __evalNummJaroPatientNamesFirst = __evalNum;
            __exprmJaroPatientNamesFirst = getClueaJaroPatientNamesFirst(q, m);
         };
      return __exprmJaroPatientNamesFirst;
   };
   private boolean __exists33(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $106 = false;
      java.lang.String $108 = null;
      boolean z$109;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $106 = q.names[__i0].__v_nameF;
            z$109 = false;
            if ((!$106))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($106 && m.names[__j0].__v_nameF) && Nysiis.nysiis(m.names[__j0].nameF).equals(((!z$109) && (z$109 = true)) ?(($108 = Nysiis.nysiis(q.names[__i0].nameF))) : ($108))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists34(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $110 = false;
      com.choicemaker.cm.matching.en.DoubleMetaphone $112 = null;
      boolean z$113;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $110 = q.names[__i0].__v_nameF;
            z$113 = false;
            if ((!$110))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($110 && m.names[__j0].__v_nameF) && DoubleMetaphone.doubleMetaphone(m.names[__j0].nameF).equals(((!z$113) && (z$113 = true)) ?(($112 = DoubleMetaphone.doubleMetaphone(q.names[__i0].nameF))) : ($112))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaNysiisOrDoubleMetaphonePatientNamesFirst;
   private boolean __expraNysiisOrDoubleMetaphonePatientNamesFirst;
   private boolean getClueaNysiisOrDoubleMetaphonePatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaNysiisOrDoubleMetaphonePatientNamesFirst != __evalNum))
         {
            __evalNumaNysiisOrDoubleMetaphonePatientNamesFirst = __evalNum;
            __expraNysiisOrDoubleMetaphonePatientNamesFirst = (!(((((getClueaPatientNamesFirst(q, m) || getClueaPatientNamesFirstInitial(q, m)) || getClueaNicknameQualified(q, m)) || getClueaOverlapPatientNamesFirst(q, m)) || getClueaEditDistancePatientNamesFirst(q, m)) || getClueaJaroPatientNamesFirst(q, m))) && (__exists33(q, m) || __exists34(q, m));
         };
      return __expraNysiisOrDoubleMetaphonePatientNamesFirst;
   };
   private int __evalNummNysiisOrDoubleMetaphonePatientNamesFirst;
   private boolean __exprmNysiisOrDoubleMetaphonePatientNamesFirst;
   private boolean getCluemNysiisOrDoubleMetaphonePatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummNysiisOrDoubleMetaphonePatientNamesFirst != __evalNum))
         {
            __evalNummNysiisOrDoubleMetaphonePatientNamesFirst = __evalNum;
            __exprmNysiisOrDoubleMetaphonePatientNamesFirst = getClueaNysiisOrDoubleMetaphonePatientNamesFirst(q, m);
         };
      return __exprmNysiisOrDoubleMetaphonePatientNamesFirst;
   };
   private boolean __exists35(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $114 = false;
      java.lang.String $116 = null;
      boolean z$117;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $114 = q.names[__i0].__v_nameF;
            z$117 = false;
            if ((!$114))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($114 && m.names[__j0].__v_nameF) && Soundex.soundex(m.names[__j0].nameF).equals(((!z$117) && (z$117 = true)) ?(($116 = Soundex.soundex(q.names[__i0].nameF))) : ($116))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrSoundexPatientNamesFirst;
   private boolean __exprrSoundexPatientNamesFirst;
   private boolean getCluerSoundexPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrSoundexPatientNamesFirst != __evalNum))
         {
            __evalNumrSoundexPatientNamesFirst = __evalNum;
            __exprrSoundexPatientNamesFirst = ((!getClueaPatientNamesFirst(q, m)) && (!(((((getClueaPatientNamesFirstInitial(q, m) || getClueaNicknameQualified(q, m)) || getClueaOverlapPatientNamesFirst(q, m)) || getClueaEditDistancePatientNamesFirst(q, m)) || getClueaJaroPatientNamesFirst(q, m)) || getClueaNysiisOrDoubleMetaphonePatientNamesFirst(q, m)))) && __exists35(q, m);
         };
      return __exprrSoundexPatientNamesFirst;
   };
   int[] aMultiBirthOrderQ = new int[1];
   private static int[] __aMultiBirthOrderQ__idx__order = {
      0, 
      1, 
      2, 
      3, 
      Integer.MAX_VALUE, 
   };
   private int __quant36(PatientImpl q, PatientImpl m, int order) throws java.lang.Exception {
      int __e = Integer.MIN_VALUE;
      __quant36l: for (int i = 0; i < q.names.length; i = i + 1)
         if (true)
            {
               int __v = q.names[i].multiBirthOrder;
               if ((__v > __e))
                  __e = __v;
            };
      return __e;
   };
   private int __evalNumaMultiBirthOrderQ;
   private boolean __expraMultiBirthOrderQ;
   private boolean getClueaMultiBirthOrderQ(PatientImpl q, PatientImpl m, int order) throws java.lang.Exception {
      if (true)
         {
            __evalNumaMultiBirthOrderQ = __evalNum;
            __expraMultiBirthOrderQ = order == __quant36(q, m, order);
         };
      return __expraMultiBirthOrderQ;
   };
   int[] aMultiBirthOrderM = new int[1];
   private static int[] __aMultiBirthOrderM__idx__order = {
      0, 
      1, 
      2, 
      3, 
      Integer.MAX_VALUE, 
   };
   private int __quant37(PatientImpl q, PatientImpl m, int order) throws java.lang.Exception {
      int __e = Integer.MIN_VALUE;
      __quant37l: for (int j = 0; j < m.names.length; j = j + 1)
         if (true)
            {
               int __v = m.names[j].multiBirthOrder;
               if ((__v > __e))
                  __e = __v;
            };
      return __e;
   };
   private int __evalNumaMultiBirthOrderM;
   private boolean __expraMultiBirthOrderM;
   private boolean getClueaMultiBirthOrderM(PatientImpl q, PatientImpl m, int order) throws java.lang.Exception {
      if (true)
         {
            __evalNumaMultiBirthOrderM = __evalNum;
            __expraMultiBirthOrderM = order == __quant37(q, m, order);
         };
      return __expraMultiBirthOrderM;
   };
   private int __quant38(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      int __e = Integer.MIN_VALUE;
      __quant38l: for (int i = 0; i < q.names.length; i = i + 1)
         if (true)
            {
               int __v = q.names[i].multiBirthOrder;
               if ((__v > __e))
                  __e = __v;
            };
      return __e;
   };
   private int __quant39(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      int __e = Integer.MIN_VALUE;
      __quant39l: for (int j = 0; j < m.names.length; j = j + 1)
         if (true)
            {
               int __v = m.names[j].multiBirthOrder;
               if ((__v > __e))
                  __e = __v;
            };
      return __e;
   };
   private boolean let40(PatientImpl q, PatientImpl m, int qMBO, int mMBO) throws java.lang.Exception {
      return qMBO != mMBO;
   };
   private int __evalNumdMultiBirthOrderQ;
   private boolean __exprdMultiBirthOrderQ;
   private boolean getCluedMultiBirthOrderQ(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMultiBirthOrderQ != __evalNum))
         {
            __evalNumdMultiBirthOrderQ = __evalNum;
            __exprdMultiBirthOrderQ = let40(q, m, __quant38(q, m), __quant39(q, m));
         };
      return __exprdMultiBirthOrderQ;
   };
   private boolean approximateFirstNameMatch;
   private boolean __exists41(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            if (q.names[__i0].__v_nameF)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists42(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         {
            if (m.names[__j0].__v_nameF)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all43(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $118 = false;
      java.lang.String $120 = null;
      boolean z$121;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $118 = q.names[__i0].__v_nameF;
            z$121 = false;
            if ((!$118))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($118 && m.names[__j0].__v_nameF) && m.names[__j0].nameF.equals(((!z$121) && (z$121 = true)) ?(($120 = q.names[__i0].nameF)) : ($120))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffPatientNamesFirst;
   private boolean __expraDiffPatientNamesFirst;
   private boolean getClueaDiffPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffPatientNamesFirst != __evalNum))
         {
            __evalNumaDiffPatientNamesFirst = __evalNum;
            __expraDiffPatientNamesFirst = (!getClueaPatientNamesFirst(q, m)) && ((__exists41(q, m) && __exists42(q, m)) && __all43(q, m));
         };
      return __expraDiffPatientNamesFirst;
   };
   private int __evalNumdPatientNamesFirst;
   private boolean __exprdPatientNamesFirst;
   private boolean getCluedPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdPatientNamesFirst != __evalNum))
         {
            __evalNumdPatientNamesFirst = __evalNum;
            __exprdPatientNamesFirst = getClueaDiffPatientNamesFirst(q, m);
         };
      return __exprdPatientNamesFirst;
   };
   int[] mJaroSoundexFrequencyFirst = new int[1];
   private static int[] __mJaroSoundexFrequencyFirst__idx__frequency = {
      4, 
      3, 
      2, 
      1, 
      0, 
      Integer.MIN_VALUE, 
   };
   private boolean __exists44(PatientImpl q, PatientImpl m, int frequency) throws java.lang.Exception {
      boolean $122 = false;
      java.lang.String $124 = null;
      boolean z$125;
      int $126 = 0;
      boolean z$127;
      java.lang.String $128 = null;
      boolean z$129;
      int $130 = 0;
      boolean z$131;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $122 = q.names[i].__v_nameF;
            z$125 = false;
            z$127 = false;
            z$129 = false;
            z$131 = false;
            if ((!$122))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((($122 && m.names[j].__v_nameF) && ((((!z$125) && (z$125 = true)) ?(($124 = Soundex.soundex(q.names[i].nameF))) : ($124)).equals(Soundex.soundex(m.names[j].nameF)) || ((Math.min(((!z$127) && (z$127 = true)) ?(($126 = q.names[i].nameF.length())) : ($126), m.names[j].nameF.length()) >= 2) && (0.85 <= Jaro.jaro(((!z$129) && (z$129 = true)) ?(($128 = q.names[i].nameF)) : ($128), m.names[j].nameF))))) && (frequency == Math.max(((!z$131) && (z$131 = true)) ?(($130 = Maps.lookupInt("firstNameFrequency", q.names[i].nameF))) : ($130), Maps.lookupInt("firstNameFrequency", m.names[j].nameF)))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNummJaroSoundexFrequencyFirst;
   private boolean __exprmJaroSoundexFrequencyFirst;
   private boolean getCluemJaroSoundexFrequencyFirst(PatientImpl q, PatientImpl m, int frequency) throws java.lang.Exception {
      if (true)
         {
            __evalNummJaroSoundexFrequencyFirst = __evalNum;
            __exprmJaroSoundexFrequencyFirst = getClueaDiffPatientNamesFirst(q, m) && __exists44(q, m, frequency);
         };
      return __exprmJaroSoundexFrequencyFirst;
   };
   int[] mFrequencyPatientNamesFirst = new int[1];
   private static int[] __mFrequencyPatientNamesFirst__idx__frequency = {
      Integer.MIN_VALUE, 
      0, 
      1, 
      2, 
      3, 
      4, 
      5, 
      6, 
      7, 
      8, 
      9, 
   };
   private boolean __exists45(PatientImpl q, PatientImpl m, int frequency) throws java.lang.Exception {
      boolean $132 = false;
      java.lang.String $134 = null;
      boolean z$135;
      boolean $136 = false;
      boolean z$137;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $132 = q.names[i].__v_nameF;
            z$135 = false;
            z$137 = false;
            if ((!($132 && (((!z$137) && (z$137 = true)) ?(($136 = Maps.lookupInt("firstNameFrequencyCir10", q.names[i].nameF) == frequency)) : ($136)))))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((($132 && m.names[j].__v_nameF) && (((!z$135) && (z$135 = true)) ?(($134 = q.names[i].nameF)) : ($134)).equals(m.names[j].nameF)) && (((!z$137) && (z$137 = true)) ?(($136 = Maps.lookupInt("firstNameFrequencyCir10", q.names[i].nameF) == frequency)) : ($136))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNummFrequencyPatientNamesFirst;
   private boolean __exprmFrequencyPatientNamesFirst;
   private boolean getCluemFrequencyPatientNamesFirst(PatientImpl q, PatientImpl m, int frequency) throws java.lang.Exception {
      if (true)
         {
            __evalNummFrequencyPatientNamesFirst = __evalNum;
            __exprmFrequencyPatientNamesFirst = getClueaPatientNamesFirst(q, m) && __exists45(q, m, frequency);
         };
      return __exprmFrequencyPatientNamesFirst;
   };
   private boolean __exists46(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $138 = false;
      java.lang.String $140 = null;
      boolean z$141;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $138 = q.names[__i0].__v_nameM && (q.names[__i0].nameM.length() > 1);
            z$141 = false;
            if ((!$138))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($138 && (m.names[__j0].__v_nameM && (m.names[__j0].nameM.length() > 1))) && m.names[__j0].nameM.equals(((!z$141) && (z$141 = true)) ?(($140 = q.names[__i0].nameM)) : ($140))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaPatientNamesMiddle;
   private boolean __expraPatientNamesMiddle;
   private boolean getClueaPatientNamesMiddle(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaPatientNamesMiddle != __evalNum))
         {
            __evalNumaPatientNamesMiddle = __evalNum;
            __expraPatientNamesMiddle = __exists46(q, m);
         };
      return __expraPatientNamesMiddle;
   };
   private int __evalNummPatientNamesMiddle;
   private boolean __exprmPatientNamesMiddle;
   private boolean getCluemPatientNamesMiddle(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummPatientNamesMiddle != __evalNum))
         {
            __evalNummPatientNamesMiddle = __evalNum;
            __exprmPatientNamesMiddle = getClueaPatientNamesMiddle(q, m);
         };
      return __exprmPatientNamesMiddle;
   };
   private boolean __exists47(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $142 = false;
      boolean $144 = false;
      boolean z$145;
      java.lang.String $146 = null;
      boolean z$147;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $142 = q.names[i].__v_nameM;
            z$145 = false;
            z$147 = false;
            if ((!$142))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((($142 && m.names[j].__v_nameM) && ((((!z$145) && (z$145 = true)) ?(($144 = q.names[i].nameM.length() == 1)) : ($144)) || (m.names[j].nameM.length() == 1))) && NameParser.matchingInitialOrName(((!z$147) && (z$147 = true)) ?(($146 = q.names[i].nameM)) : ($146), m.names[j].nameM)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaPatientNamesMiddleInitial;
   private boolean __expraPatientNamesMiddleInitial;
   private boolean getClueaPatientNamesMiddleInitial(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaPatientNamesMiddleInitial != __evalNum))
         {
            __evalNumaPatientNamesMiddleInitial = __evalNum;
            __expraPatientNamesMiddleInitial = (!getClueaPatientNamesMiddle(q, m)) && __exists47(q, m);
         };
      return __expraPatientNamesMiddleInitial;
   };
   private int __evalNummPatientNamesMiddleInitial;
   private boolean __exprmPatientNamesMiddleInitial;
   private boolean getCluemPatientNamesMiddleInitial(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummPatientNamesMiddleInitial != __evalNum))
         {
            __evalNummPatientNamesMiddleInitial = __evalNum;
            __exprmPatientNamesMiddleInitial = getClueaPatientNamesMiddleInitial(q, m);
         };
      return __exprmPatientNamesMiddleInitial;
   };
   private boolean __exists48(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $148 = false;
      java.lang.String $150 = null;
      boolean z$151;
      boolean $152 = false;
      boolean z$153;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $148 = q.names[__i0].__v_nameM;
            z$151 = false;
            z$153 = false;
            if ((!$148))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($148 && m.names[__j0].__v_nameM) && (Soundex.soundex(m.names[__j0].nameM).equals(((!z$151) && (z$151 = true)) ?(($150 = Soundex.soundex(q.names[__i0].nameM))) : ($150)) && ((((!z$153) && (z$153 = true)) ?(($152 = q.names[__i0].nameM.length() > 1)) : ($152)) == (m.names[__j0].nameM.length() > 1)))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaPatientNamesMiddleSoundex;
   private boolean __expraPatientNamesMiddleSoundex;
   private boolean getClueaPatientNamesMiddleSoundex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaPatientNamesMiddleSoundex != __evalNum))
         {
            __evalNumaPatientNamesMiddleSoundex = __evalNum;
            __expraPatientNamesMiddleSoundex = (!(getClueaPatientNamesMiddle(q, m) || getClueaPatientNamesMiddleInitial(q, m))) && __exists48(q, m);
         };
      return __expraPatientNamesMiddleSoundex;
   };
   private int __evalNummPatientNamesMiddleSoundex;
   private boolean __exprmPatientNamesMiddleSoundex;
   private boolean getCluemPatientNamesMiddleSoundex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummPatientNamesMiddleSoundex != __evalNum))
         {
            __evalNummPatientNamesMiddleSoundex = __evalNum;
            __exprmPatientNamesMiddleSoundex = getClueaPatientNamesMiddleSoundex(q, m);
         };
      return __exprmPatientNamesMiddleSoundex;
   };
   private boolean __exists49(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $154 = false;
      java.lang.String $156 = null;
      boolean z$157;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $154 = q.names[i].__v_nameM && (q.names[i].nameM.length() > 1);
            z$157 = false;
            if ((!$154))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($154 && (m.names[j].__v_nameM && (m.names[j].nameM.length() > 1))) && (Jaro.jaro(((!z$157) && (z$157 = true)) ?(($156 = q.names[i].nameM)) : ($156), m.names[j].nameM) >= 0.9)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaPatientNamesMiddleJaro;
   private boolean __expraPatientNamesMiddleJaro;
   private boolean getClueaPatientNamesMiddleJaro(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaPatientNamesMiddleJaro != __evalNum))
         {
            __evalNumaPatientNamesMiddleJaro = __evalNum;
            __expraPatientNamesMiddleJaro = (!((getClueaPatientNamesMiddle(q, m) || getClueaPatientNamesMiddleInitial(q, m)) || getClueaPatientNamesMiddleSoundex(q, m))) && __exists49(q, m);
         };
      return __expraPatientNamesMiddleJaro;
   };
   private int __evalNummPatientNamesMiddleJaro;
   private boolean __exprmPatientNamesMiddleJaro;
   private boolean getCluemPatientNamesMiddleJaro(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummPatientNamesMiddleJaro != __evalNum))
         {
            __evalNummPatientNamesMiddleJaro = __evalNum;
            __exprmPatientNamesMiddleJaro = getClueaPatientNamesMiddleJaro(q, m);
         };
      return __exprmPatientNamesMiddleJaro;
   };
   private boolean __swap50(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameF)
            __lacc.add(q.names[__i0].nameF);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameM)
            __lacc.add(q.names[__i0].nameM);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameF)
            __lacc.add(m.names[__j0].nameF);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameM)
            __lacc.add(m.names[__j0].nameM);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 2, 2);
   };
   private boolean __exists51(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $158 = false;
      java.lang.String $160 = null;
      boolean z$161;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $158 = q.names[__i0].__v_nameMaidn;
            z$161 = false;
            if ((!$158))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($158 && m.names[__j0].__v_nameMaidn) && m.names[__j0].nameMaidn.equals(((!z$161) && (z$161 = true)) ?(($160 = q.names[__i0].nameMaidn)) : ($160))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists52(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            if (q.names[__i0].__v_nameM)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists53(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         {
            if (m.names[__j0].__v_nameM)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all54(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $162 = false;
      java.lang.String $164 = null;
      boolean z$165;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $162 = q.names[__i0].__v_nameM;
            z$165 = false;
            if ((!$162))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($162 && m.names[__j0].__v_nameM) && m.names[__j0].nameM.equals(((!z$165) && (z$165 = true)) ?(($164 = q.names[__i0].nameM)) : ($164))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffPatientNamesMiddle;
   private boolean __expraDiffPatientNamesMiddle;
   private boolean getClueaDiffPatientNamesMiddle(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffPatientNamesMiddle != __evalNum))
         {
            __evalNumaDiffPatientNamesMiddle = __evalNum;
            __expraDiffPatientNamesMiddle = (((!((getClueaPatientNamesMiddle(q, m) || getClueaPatientNamesMiddleInitial(q, m)) || getClueaPatientNamesMiddleSoundex(q, m))) && (!__swap50(q, m))) && (!__exists51(q, m))) && ((__exists52(q, m) && __exists53(q, m)) && __all54(q, m));
         };
      return __expraDiffPatientNamesMiddle;
   };
   private int __evalNumdPatientNamesMiddle;
   private boolean __exprdPatientNamesMiddle;
   private boolean getCluedPatientNamesMiddle(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdPatientNamesMiddle != __evalNum))
         {
            __evalNumdPatientNamesMiddle = __evalNum;
            __exprdPatientNamesMiddle = getClueaDiffPatientNamesMiddle(q, m);
         };
      return __exprdPatientNamesMiddle;
   };
   private boolean __exists55(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $166 = false;
      java.lang.String $168 = null;
      boolean z$169;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $166 = q.names[__i0].__v_nameL;
            z$169 = false;
            if ((!$166))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($166 && m.names[__j0].__v_nameL) && m.names[__j0].nameL.equals(((!z$169) && (z$169 = true)) ?(($168 = q.names[__i0].nameL)) : ($168))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists56(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $170 = false;
      java.lang.String $172 = null;
      boolean z$173;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $170 = q.names[__i0].__v_last_name && ((q.names[__i0].last_name != null) && (q.names[__i0].last_name.length() > 0));
            z$173 = false;
            if ((!$170))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($170 && (m.names[__j0].__v_last_name && ((m.names[__j0].last_name != null) && (m.names[__j0].last_name.length() > 0)))) && StringUtils.removeNonLetters(m.names[__j0].last_name.trim()).equals(((!z$173) && (z$173 = true)) ?(($172 = StringUtils.removeNonLetters(q.names[__i0].last_name.trim()))) : ($172))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaPatientNamesLast;
   private boolean __expraPatientNamesLast;
   private boolean getClueaPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaPatientNamesLast != __evalNum))
         {
            __evalNumaPatientNamesLast = __evalNum;
            __expraPatientNamesLast = __exists55(q, m) || __exists56(q, m);
         };
      return __expraPatientNamesLast;
   };
   private int __evalNummPatientNamesLast;
   private boolean __exprmPatientNamesLast;
   private boolean getCluemPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummPatientNamesLast != __evalNum))
         {
            __evalNummPatientNamesLast = __evalNum;
            __exprmPatientNamesLast = getClueaPatientNamesLast(q, m);
         };
      return __exprmPatientNamesLast;
   };
   private boolean __exists57(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $174 = false;
      java.lang.String $176 = null;
      boolean z$177;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $174 = q.names[i].__v_nameL && (q.names[i].nameL.length() >= 4);
            z$177 = false;
            if ((!$174))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($174 && (m.names[j].__v_nameL && (m.names[j].nameL.length() >= 4))) && StringUtils.overlap(((!z$177) && (z$177 = true)) ?(($176 = q.names[i].nameL)) : ($176), m.names[j].nameL)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaOverlapPatientNamesLast;
   private boolean __expraOverlapPatientNamesLast;
   private boolean getClueaOverlapPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaOverlapPatientNamesLast != __evalNum))
         {
            __evalNumaOverlapPatientNamesLast = __evalNum;
            __expraOverlapPatientNamesLast = (!getClueaPatientNamesLast(q, m)) && __exists57(q, m);
         };
      return __expraOverlapPatientNamesLast;
   };
   private int __evalNummOverlapPatientNamesLast;
   private boolean __exprmOverlapPatientNamesLast;
   private boolean getCluemOverlapPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummOverlapPatientNamesLast != __evalNum))
         {
            __evalNummOverlapPatientNamesLast = __evalNum;
            __exprmOverlapPatientNamesLast = getClueaOverlapPatientNamesLast(q, m);
         };
      return __exprmOverlapPatientNamesLast;
   };
   private boolean __exists58(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $178 = false;
      java.lang.String $180 = null;
      boolean z$181;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $178 = q.names[__i0].__v_nameL;
            z$181 = false;
            if ((!$178))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($178 && m.names[__j0].__v_nameL) && Nysiis.nysiis(m.names[__j0].nameL).equals(((!z$181) && (z$181 = true)) ?(($180 = Nysiis.nysiis(q.names[__i0].nameL))) : ($180))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaNysiisPatientNamesLast;
   private boolean __expraNysiisPatientNamesLast;
   private boolean getClueaNysiisPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaNysiisPatientNamesLast != __evalNum))
         {
            __evalNumaNysiisPatientNamesLast = __evalNum;
            __expraNysiisPatientNamesLast = (!(getClueaPatientNamesLast(q, m) || getClueaOverlapPatientNamesLast(q, m))) && __exists58(q, m);
         };
      return __expraNysiisPatientNamesLast;
   };
   private int __evalNummNysiisPatientNamesLast;
   private boolean __exprmNysiisPatientNamesLast;
   private boolean getCluemNysiisPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummNysiisPatientNamesLast != __evalNum))
         {
            __evalNummNysiisPatientNamesLast = __evalNum;
            __exprmNysiisPatientNamesLast = getClueaNysiisPatientNamesLast(q, m);
         };
      return __exprmNysiisPatientNamesLast;
   };
   private boolean __exists59(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $182 = false;
      com.choicemaker.cm.matching.en.DoubleMetaphone $184 = null;
      boolean z$185;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $182 = q.names[__i0].__v_nameL;
            z$185 = false;
            if ((!$182))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($182 && m.names[__j0].__v_nameL) && DoubleMetaphone.doubleMetaphone(m.names[__j0].nameL).equals(((!z$185) && (z$185 = true)) ?(($184 = DoubleMetaphone.doubleMetaphone(q.names[__i0].nameL))) : ($184))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDoubleMetaphonePatientNamesLast;
   private boolean __expraDoubleMetaphonePatientNamesLast;
   private boolean getClueaDoubleMetaphonePatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDoubleMetaphonePatientNamesLast != __evalNum))
         {
            __evalNumaDoubleMetaphonePatientNamesLast = __evalNum;
            __expraDoubleMetaphonePatientNamesLast = (!((getClueaPatientNamesLast(q, m) || getClueaOverlapPatientNamesLast(q, m)) || getClueaNysiisPatientNamesLast(q, m))) && __exists59(q, m);
         };
      return __expraDoubleMetaphonePatientNamesLast;
   };
   private int __evalNummDoubleMetaphonePatientNamesLast;
   private boolean __exprmDoubleMetaphonePatientNamesLast;
   private boolean getCluemDoubleMetaphonePatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummDoubleMetaphonePatientNamesLast != __evalNum))
         {
            __evalNummDoubleMetaphonePatientNamesLast = __evalNum;
            __exprmDoubleMetaphonePatientNamesLast = getClueaDoubleMetaphonePatientNamesLast(q, m);
         };
      return __exprmDoubleMetaphonePatientNamesLast;
   };
   private boolean __exists60(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $186 = false;
      java.lang.String $188 = null;
      boolean z$189;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $186 = q.names[i].__v_nameL && (q.names[i].nameL.length() >= 4);
            z$189 = false;
            if ((!$186))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($186 && (m.names[j].__v_nameL && (m.names[j].nameL.length() >= 4))) && (EditDistance2.editDistance2(((!z$189) && (z$189 = true)) ?(($188 = q.names[i].nameL)) : ($188), m.names[j].nameL, 1) < 2)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaEditDistancePatientNamesLast;
   private boolean __expraEditDistancePatientNamesLast;
   private boolean getClueaEditDistancePatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaEditDistancePatientNamesLast != __evalNum))
         {
            __evalNumaEditDistancePatientNamesLast = __evalNum;
            __expraEditDistancePatientNamesLast = (!(((getClueaPatientNamesLast(q, m) || getClueaOverlapPatientNamesLast(q, m)) || getClueaNysiisPatientNamesLast(q, m)) || getClueaDoubleMetaphonePatientNamesLast(q, m))) && __exists60(q, m);
         };
      return __expraEditDistancePatientNamesLast;
   };
   private int __evalNummEditDistancePatientNamesLast;
   private boolean __exprmEditDistancePatientNamesLast;
   private boolean getCluemEditDistancePatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummEditDistancePatientNamesLast != __evalNum))
         {
            __evalNummEditDistancePatientNamesLast = __evalNum;
            __exprmEditDistancePatientNamesLast = getClueaEditDistancePatientNamesLast(q, m);
         };
      return __exprmEditDistancePatientNamesLast;
   };
   private boolean __exists61(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $190 = false;
      java.lang.String $192 = null;
      boolean z$193;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $190 = q.names[i].__v_nameL && (q.names[i].nameL.length() >= 4);
            z$193 = false;
            if ((!$190))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($190 && (m.names[j].__v_nameL && (m.names[j].nameL.length() >= 4))) && (Jaro.jaro(((!z$193) && (z$193 = true)) ?(($192 = q.names[i].nameL)) : ($192), m.names[j].nameL) >= 0.9F)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaJaroPatientNamesLast;
   private boolean __expraJaroPatientNamesLast;
   private boolean getClueaJaroPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaJaroPatientNamesLast != __evalNum))
         {
            __evalNumaJaroPatientNamesLast = __evalNum;
            __expraJaroPatientNamesLast = (!((((getClueaPatientNamesLast(q, m) || getClueaOverlapPatientNamesLast(q, m)) || getClueaNysiisPatientNamesLast(q, m)) || getClueaDoubleMetaphonePatientNamesLast(q, m)) || getClueaEditDistancePatientNamesLast(q, m))) && __exists61(q, m);
         };
      return __expraJaroPatientNamesLast;
   };
   private int __evalNummJaroPatientNamesLast;
   private boolean __exprmJaroPatientNamesLast;
   private boolean getCluemJaroPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummJaroPatientNamesLast != __evalNum))
         {
            __evalNummJaroPatientNamesLast = __evalNum;
            __exprmJaroPatientNamesLast = getClueaJaroPatientNamesLast(q, m);
         };
      return __exprmJaroPatientNamesLast;
   };
   private boolean __exists62(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $194 = false;
      java.lang.String $196 = null;
      boolean z$197;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $194 = q.names[__i0].__v_nameL;
            z$197 = false;
            if ((!$194))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($194 && m.names[__j0].__v_nameL) && Soundex.soundex(m.names[__j0].nameL).equals(((!z$197) && (z$197 = true)) ?(($196 = Soundex.soundex(q.names[__i0].nameL))) : ($196))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrSoundexPatientNamesLast;
   private boolean __exprrSoundexPatientNamesLast;
   private boolean getCluerSoundexPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrSoundexPatientNamesLast != __evalNum))
         {
            __evalNumrSoundexPatientNamesLast = __evalNum;
            __exprrSoundexPatientNamesLast = (!(((((getClueaPatientNamesLast(q, m) || getClueaOverlapPatientNamesLast(q, m)) || getClueaNysiisPatientNamesLast(q, m)) || getClueaDoubleMetaphonePatientNamesLast(q, m)) || getClueaEditDistancePatientNamesLast(q, m)) || getClueaJaroPatientNamesLast(q, m))) && __exists62(q, m);
         };
      return __exprrSoundexPatientNamesLast;
   };
   private boolean approximateLastNameMatch;
   private boolean __exists63(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            if (q.names[__i0].__v_nameL)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists64(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         {
            if (m.names[__j0].__v_nameL)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all65(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $198 = false;
      java.lang.String $200 = null;
      boolean z$201;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $198 = q.names[__i0].__v_nameL;
            z$201 = false;
            if ((!$198))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($198 && m.names[__j0].__v_nameL) && m.names[__j0].nameL.equals(((!z$201) && (z$201 = true)) ?(($200 = q.names[__i0].nameL)) : ($200))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffPatientNamesLast;
   private boolean __expraDiffPatientNamesLast;
   private boolean getClueaDiffPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffPatientNamesLast != __evalNum))
         {
            __evalNumaDiffPatientNamesLast = __evalNum;
            __expraDiffPatientNamesLast = (!getClueaPatientNamesLast(q, m)) && ((__exists63(q, m) && __exists64(q, m)) && __all65(q, m));
         };
      return __expraDiffPatientNamesLast;
   };
   private int __evalNumdPatientNamesLast;
   private boolean __exprdPatientNamesLast;
   private boolean getCluedPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdPatientNamesLast != __evalNum))
         {
            __evalNumdPatientNamesLast = __evalNum;
            __exprdPatientNamesLast = getClueaDiffPatientNamesLast(q, m);
         };
      return __exprdPatientNamesLast;
   };
   int[] mJaroSoundexFrequencyLast = new int[1];
   private static int[] __mJaroSoundexFrequencyLast__idx__frequency = {
      4, 
      3, 
      2, 
      1, 
      0, 
      Integer.MIN_VALUE, 
   };
   private boolean __exists66(PatientImpl q, PatientImpl m, int frequency) throws java.lang.Exception {
      boolean $202 = false;
      java.lang.String $204 = null;
      boolean z$205;
      int $206 = 0;
      boolean z$207;
      java.lang.String $208 = null;
      boolean z$209;
      int $210 = 0;
      boolean z$211;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $202 = q.names[i].__v_nameL;
            z$205 = false;
            z$207 = false;
            z$209 = false;
            z$211 = false;
            if ((!$202))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((($202 && m.names[j].__v_nameL) && ((((!z$205) && (z$205 = true)) ?(($204 = Soundex.soundex(q.names[i].nameL))) : ($204)).equals(Soundex.soundex(m.names[j].nameL)) || ((Math.min(((!z$207) && (z$207 = true)) ?(($206 = q.names[i].nameL.length())) : ($206), m.names[j].nameL.length()) >= 2) && (0.85 <= Jaro.jaro(((!z$209) && (z$209 = true)) ?(($208 = q.names[i].nameL)) : ($208), m.names[j].nameL))))) && (frequency == Math.max(((!z$211) && (z$211 = true)) ?(($210 = Maps.lookupInt("lastNameFrequency", q.names[i].nameL))) : ($210), Maps.lookupInt("lastNameFrequency", m.names[j].nameL)))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNummJaroSoundexFrequencyLast;
   private boolean __exprmJaroSoundexFrequencyLast;
   private boolean getCluemJaroSoundexFrequencyLast(PatientImpl q, PatientImpl m, int frequency) throws java.lang.Exception {
      if (true)
         {
            __evalNummJaroSoundexFrequencyLast = __evalNum;
            __exprmJaroSoundexFrequencyLast = getClueaDiffPatientNamesLast(q, m) && __exists66(q, m, frequency);
         };
      return __exprmJaroSoundexFrequencyLast;
   };
   int[] mFrequencyPatientNamesLast = new int[1];
   private static int[] __mFrequencyPatientNamesLast__idx__frequency = {
      Integer.MIN_VALUE, 
      0, 
      1, 
      2, 
      3, 
      4, 
      5, 
      6, 
      7, 
      8, 
      9, 
   };
   private boolean __exists67(PatientImpl q, PatientImpl m, int frequency) throws java.lang.Exception {
      boolean $212 = false;
      java.lang.String $214 = null;
      boolean z$215;
      boolean $216 = false;
      boolean z$217;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $212 = q.names[i].__v_nameL;
            z$215 = false;
            z$217 = false;
            if ((!($212 && (((!z$217) && (z$217 = true)) ?(($216 = Maps.lookupInt("lastNameFrequencyCir10", q.names[i].nameL) == frequency)) : ($216)))))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((($212 && m.names[j].__v_nameL) && (((!z$215) && (z$215 = true)) ?(($214 = q.names[i].nameL)) : ($214)).equals(m.names[j].nameL)) && (((!z$217) && (z$217 = true)) ?(($216 = Maps.lookupInt("lastNameFrequencyCir10", q.names[i].nameL) == frequency)) : ($216))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNummFrequencyPatientNamesLast;
   private boolean __exprmFrequencyPatientNamesLast;
   private boolean getCluemFrequencyPatientNamesLast(PatientImpl q, PatientImpl m, int frequency) throws java.lang.Exception {
      if (true)
         {
            __evalNummFrequencyPatientNamesLast = __evalNum;
            __exprmFrequencyPatientNamesLast = getClueaPatientNamesLast(q, m) && __exists67(q, m, frequency);
         };
      return __exprmFrequencyPatientNamesLast;
   };
   private boolean __exists68(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $218 = false;
      java.lang.String $220 = null;
      boolean z$221;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $218 = q.names[__i0].__v_mothersFirstName;
            z$221 = false;
            if ((!$218))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($218 && m.names[__j0].__v_mothersFirstName) && m.names[__j0].mothersFirstName.equals(((!z$221) && (z$221 = true)) ?(($220 = q.names[__i0].mothersFirstName)) : ($220))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __swap69(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameF)
            __lacc.add(q.names[__i0].nameF);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_mothersFirstName)
            __lacc.add(q.names[__i0].mothersFirstName);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameF)
            __lacc.add(m.names[__j0].nameF);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_mothersFirstName)
            __lacc.add(m.names[__j0].mothersFirstName);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private boolean __exists70(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.String $222 = null;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $222 = q.names[i].mothersFirstName;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (approximateMatch($222, m.names[j].mothersFirstName))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists71(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.String $224 = null;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $224 = q.names[i].mothersFirstName;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (approximateMatch($224, m.names[j].nameF))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists72(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.String $226 = null;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $226 = q.names[i].nameF;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (approximateMatch($226, m.names[j].mothersFirstName))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists73(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.String $228 = null;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $228 = q.names[i].mothersFirstName;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if (approximateMatch($228, m.contacts[j].nameF))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists74(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.String $230 = null;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $230 = q.contacts[i].nameF;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (approximateMatch($230, m.names[j].mothersFirstName))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaMomsFirst;
   private boolean __expraMomsFirst;
   private boolean getClueaMomsFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMomsFirst != __evalNum))
         {
            __evalNumaMomsFirst = __evalNum;
            __expraMomsFirst = (((((__exists68(q, m) || __swap69(q, m)) || __exists70(q, m)) || __exists71(q, m)) || __exists72(q, m)) || __exists73(q, m)) || __exists74(q, m);
         };
      return __expraMomsFirst;
   };
   private int __evalNummMomsFirst;
   private boolean __exprmMomsFirst;
   private boolean getCluemMomsFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummMomsFirst != __evalNum))
         {
            __evalNummMomsFirst = __evalNum;
            __exprmMomsFirst = getClueaMomsFirst(q, m);
         };
      return __exprmMomsFirst;
   };
   private boolean __swap75(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameF)
            __lacc.add(q.names[__i0].nameF);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameM)
            __lacc.add(q.names[__i0].nameM);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameF)
            __lacc.add(m.names[__j0].nameF);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameM)
            __lacc.add(m.names[__j0].nameM);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 2, 2);
   };
   private int __evalNumaSwapPatientNamesFirstMiddleExact;
   private boolean __expraSwapPatientNamesFirstMiddleExact;
   private boolean getClueaSwapPatientNamesFirstMiddleExact(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapPatientNamesFirstMiddleExact != __evalNum))
         {
            __evalNumaSwapPatientNamesFirstMiddleExact = __evalNum;
            __expraSwapPatientNamesFirstMiddleExact = (!(getClueaPatientNamesFirst(q, m) || getClueaPatientNamesMiddle(q, m))) && __swap75(q, m);
         };
      return __expraSwapPatientNamesFirstMiddleExact;
   };
   private int __evalNummSwapPatientNamesFirstMiddleExact;
   private boolean __exprmSwapPatientNamesFirstMiddleExact;
   private boolean getCluemSwapPatientNamesFirstMiddleExact(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapPatientNamesFirstMiddleExact != __evalNum))
         {
            __evalNummSwapPatientNamesFirstMiddleExact = __evalNum;
            __exprmSwapPatientNamesFirstMiddleExact = getClueaSwapPatientNamesFirstMiddleExact(q, m);
         };
      return __exprmSwapPatientNamesFirstMiddleExact;
   };
   private boolean __swap76(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameF)
            __lacc.add(q.names[__i0].nameF);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameM)
            __lacc.add(q.names[__i0].nameM);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameF)
            __lacc.add(m.names[__j0].nameF);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameM)
            __lacc.add(m.names[__j0].nameM);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaSwapPatientNamesFirstMiddleAny;
   private boolean __expraSwapPatientNamesFirstMiddleAny;
   private boolean getClueaSwapPatientNamesFirstMiddleAny(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapPatientNamesFirstMiddleAny != __evalNum))
         {
            __evalNumaSwapPatientNamesFirstMiddleAny = __evalNum;
            __expraSwapPatientNamesFirstMiddleAny = (!((getClueaPatientNamesFirst(q, m) || getClueaPatientNamesMiddle(q, m)) || getClueaSwapPatientNamesFirstMiddleExact(q, m))) && __swap76(q, m);
         };
      return __expraSwapPatientNamesFirstMiddleAny;
   };
   private int __evalNummSwapPatientNamesFirstMiddleAny;
   private boolean __exprmSwapPatientNamesFirstMiddleAny;
   private boolean getCluemSwapPatientNamesFirstMiddleAny(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapPatientNamesFirstMiddleAny != __evalNum))
         {
            __evalNummSwapPatientNamesFirstMiddleAny = __evalNum;
            __exprmSwapPatientNamesFirstMiddleAny = getClueaSwapPatientNamesFirstMiddleAny(q, m);
         };
      return __exprmSwapPatientNamesFirstMiddleAny;
   };
   private boolean __swap77(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameF)
            __lacc.add(q.names[__i0].nameF);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(q.names[__i0].nameL);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameF)
            __lacc.add(m.names[__j0].nameF);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(m.names[__j0].nameL);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 2, 2);
   };
   private int __evalNumaSwapPatientNamesFirstLastExact;
   private boolean __expraSwapPatientNamesFirstLastExact;
   private boolean getClueaSwapPatientNamesFirstLastExact(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapPatientNamesFirstLastExact != __evalNum))
         {
            __evalNumaSwapPatientNamesFirstLastExact = __evalNum;
            __expraSwapPatientNamesFirstLastExact = (!(getClueaPatientNamesFirst(q, m) || getClueaPatientNamesLast(q, m))) && __swap77(q, m);
         };
      return __expraSwapPatientNamesFirstLastExact;
   };
   private int __evalNummSwapPatientNamesFirstLastExact;
   private boolean __exprmSwapPatientNamesFirstLastExact;
   private boolean getCluemSwapPatientNamesFirstLastExact(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapPatientNamesFirstLastExact != __evalNum))
         {
            __evalNummSwapPatientNamesFirstLastExact = __evalNum;
            __exprmSwapPatientNamesFirstLastExact = getClueaSwapPatientNamesFirstLastExact(q, m);
         };
      return __exprmSwapPatientNamesFirstLastExact;
   };
   private boolean __swap78(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameF)
            __lacc.add(Soundex.soundex(q.names[__i0].nameF));
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(Soundex.soundex(q.names[__i0].nameL));
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameF)
            __lacc.add(Soundex.soundex(m.names[__j0].nameF));
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(Soundex.soundex(m.names[__j0].nameL));
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 2, 2);
   };
   private int __evalNumaSwapPatientNamesFirstLastExactSoundex;
   private boolean __expraSwapPatientNamesFirstLastExactSoundex;
   private boolean getClueaSwapPatientNamesFirstLastExactSoundex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapPatientNamesFirstLastExactSoundex != __evalNum))
         {
            __evalNumaSwapPatientNamesFirstLastExactSoundex = __evalNum;
            __expraSwapPatientNamesFirstLastExactSoundex = (!((getClueaPatientNamesFirst(q, m) || getClueaPatientNamesLast(q, m)) || getClueaSwapPatientNamesFirstLastExact(q, m))) && __swap78(q, m);
         };
      return __expraSwapPatientNamesFirstLastExactSoundex;
   };
   private int __evalNummSwapPatientNamesFirstLastExactSoundex;
   private boolean __exprmSwapPatientNamesFirstLastExactSoundex;
   private boolean getCluemSwapPatientNamesFirstLastExactSoundex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapPatientNamesFirstLastExactSoundex != __evalNum))
         {
            __evalNummSwapPatientNamesFirstLastExactSoundex = __evalNum;
            __exprmSwapPatientNamesFirstLastExactSoundex = getClueaSwapPatientNamesFirstLastExactSoundex(q, m);
         };
      return __exprmSwapPatientNamesFirstLastExactSoundex;
   };
   private boolean __swap79(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameF)
            __lacc.add(q.names[__i0].nameF);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(q.names[__i0].nameL);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameF)
            __lacc.add(m.names[__j0].nameF);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(m.names[__j0].nameL);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaSwapPatientNamesFirstLastAny;
   private boolean __expraSwapPatientNamesFirstLastAny;
   private boolean getClueaSwapPatientNamesFirstLastAny(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapPatientNamesFirstLastAny != __evalNum))
         {
            __evalNumaSwapPatientNamesFirstLastAny = __evalNum;
            __expraSwapPatientNamesFirstLastAny = (!((getClueaPatientNamesFirst(q, m) || getClueaPatientNamesLast(q, m)) || getClueaSwapPatientNamesFirstLastExact(q, m))) && __swap79(q, m);
         };
      return __expraSwapPatientNamesFirstLastAny;
   };
   private int __evalNummSwapPatientNamesFirstLastAny;
   private boolean __exprmSwapPatientNamesFirstLastAny;
   private boolean getCluemSwapPatientNamesFirstLastAny(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapPatientNamesFirstLastAny != __evalNum))
         {
            __evalNummSwapPatientNamesFirstLastAny = __evalNum;
            __exprmSwapPatientNamesFirstLastAny = getClueaSwapPatientNamesFirstLastAny(q, m);
         };
      return __exprmSwapPatientNamesFirstLastAny;
   };
   private boolean __swap80(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameF)
            __lacc.add(Soundex.soundex(q.names[__i0].nameF));
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(Soundex.soundex(q.names[__i0].nameL));
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameF)
            __lacc.add(Soundex.soundex(m.names[__j0].nameF));
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(Soundex.soundex(m.names[__j0].nameL));
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaSwapPatientNamesFirstLastAnySoundex;
   private boolean __expraSwapPatientNamesFirstLastAnySoundex;
   private boolean getClueaSwapPatientNamesFirstLastAnySoundex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapPatientNamesFirstLastAnySoundex != __evalNum))
         {
            __evalNumaSwapPatientNamesFirstLastAnySoundex = __evalNum;
            __expraSwapPatientNamesFirstLastAnySoundex = (!((((getClueaPatientNamesFirst(q, m) || getClueaPatientNamesLast(q, m)) || getClueaSwapPatientNamesFirstLastExact(q, m)) || getClueaSwapPatientNamesFirstLastAny(q, m)) || getClueaSwapPatientNamesFirstLastExactSoundex(q, m))) && __swap80(q, m);
         };
      return __expraSwapPatientNamesFirstLastAnySoundex;
   };
   private int __evalNummSwapPatientNamesFirstLastAnySoundex;
   private boolean __exprmSwapPatientNamesFirstLastAnySoundex;
   private boolean getCluemSwapPatientNamesFirstLastAnySoundex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapPatientNamesFirstLastAnySoundex != __evalNum))
         {
            __evalNummSwapPatientNamesFirstLastAnySoundex = __evalNum;
            __exprmSwapPatientNamesFirstLastAnySoundex = getClueaSwapPatientNamesFirstLastAnySoundex(q, m);
         };
      return __exprmSwapPatientNamesFirstLastAnySoundex;
   };
   private boolean __swap81(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(q.names[__i0].nameL);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameMaidn)
            __lacc.add(q.names[__i0].nameMaidn);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(m.names[__j0].nameL);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameMaidn)
            __lacc.add(m.names[__j0].nameMaidn);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaSwapPatientNamesLastMaidenAny;
   private boolean __expraSwapPatientNamesLastMaidenAny;
   private boolean getClueaSwapPatientNamesLastMaidenAny(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapPatientNamesLastMaidenAny != __evalNum))
         {
            __evalNumaSwapPatientNamesLastMaidenAny = __evalNum;
            __expraSwapPatientNamesLastMaidenAny = (!getClueaPatientNamesLast(q, m)) && __swap81(q, m);
         };
      return __expraSwapPatientNamesLastMaidenAny;
   };
   private int __evalNummSwapPatientNamesLastMaidenAny;
   private boolean __exprmSwapPatientNamesLastMaidenAny;
   private boolean getCluemSwapPatientNamesLastMaidenAny(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapPatientNamesLastMaidenAny != __evalNum))
         {
            __evalNummSwapPatientNamesLastMaidenAny = __evalNum;
            __exprmSwapPatientNamesLastMaidenAny = getClueaSwapPatientNamesLastMaidenAny(q, m);
         };
      return __exprmSwapPatientNamesLastMaidenAny;
   };
   private boolean __swap82(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameM)
            __lacc.add(q.names[__i0].nameM);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(q.names[__i0].nameL);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameM)
            __lacc.add(m.names[__j0].nameM);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(m.names[__j0].nameL);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 2, 2);
   };
   private int __evalNumaSwapPatientNamesMiddleLastExact;
   private boolean __expraSwapPatientNamesMiddleLastExact;
   private boolean getClueaSwapPatientNamesMiddleLastExact(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapPatientNamesMiddleLastExact != __evalNum))
         {
            __evalNumaSwapPatientNamesMiddleLastExact = __evalNum;
            __expraSwapPatientNamesMiddleLastExact = (!((getClueaPatientNamesMiddle(q, m) || getClueaPatientNamesLast(q, m)) || getClueaSwapPatientNamesLastMaidenAny(q, m))) && __swap82(q, m);
         };
      return __expraSwapPatientNamesMiddleLastExact;
   };
   private int __evalNummSwapPatientNamesMiddleLastExact;
   private boolean __exprmSwapPatientNamesMiddleLastExact;
   private boolean getCluemSwapPatientNamesMiddleLastExact(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapPatientNamesMiddleLastExact != __evalNum))
         {
            __evalNummSwapPatientNamesMiddleLastExact = __evalNum;
            __exprmSwapPatientNamesMiddleLastExact = getClueaSwapPatientNamesMiddleLastExact(q, m);
         };
      return __exprmSwapPatientNamesMiddleLastExact;
   };
   private boolean __swap83(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameM)
            __lacc.add(q.names[__i0].nameM);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(q.names[__i0].nameL);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameM)
            __lacc.add(m.names[__j0].nameM);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(m.names[__j0].nameL);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaSwapPatientNamesMiddleLastAny;
   private boolean __expraSwapPatientNamesMiddleLastAny;
   private boolean getClueaSwapPatientNamesMiddleLastAny(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapPatientNamesMiddleLastAny != __evalNum))
         {
            __evalNumaSwapPatientNamesMiddleLastAny = __evalNum;
            __expraSwapPatientNamesMiddleLastAny = (!(((getClueaPatientNamesMiddle(q, m) || getClueaPatientNamesLast(q, m)) || getClueaSwapPatientNamesLastMaidenAny(q, m)) || getClueaSwapPatientNamesMiddleLastExact(q, m))) && __swap83(q, m);
         };
      return __expraSwapPatientNamesMiddleLastAny;
   };
   private int __evalNummSwapPatientNamesMiddleLastAny;
   private boolean __exprmSwapPatientNamesMiddleLastAny;
   private boolean getCluemSwapPatientNamesMiddleLastAny(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapPatientNamesMiddleLastAny != __evalNum))
         {
            __evalNummSwapPatientNamesMiddleLastAny = __evalNum;
            __exprmSwapPatientNamesMiddleLastAny = getClueaSwapPatientNamesMiddleLastAny(q, m);
         };
      return __exprmSwapPatientNamesMiddleLastAny;
   };
   private boolean __exists84(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            if (q.names[__i0].__v_nameF)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists85(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         {
            if (m.names[__j0].__v_nameF)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all86(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $232 = false;
      java.lang.String $234 = null;
      boolean z$235;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $232 = q.names[__i0].__v_nameF;
            z$235 = false;
            if ((!$232))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($232 && m.names[__j0].__v_nameF) && Soundex.soundex(m.names[__j0].nameF, 1).equals(((!z$235) && (z$235 = true)) ?(($234 = Soundex.soundex(q.names[__i0].nameF, 1))) : ($234))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffSoundex1PatientNamesFirst;
   private boolean __expraDiffSoundex1PatientNamesFirst;
   private boolean getClueaDiffSoundex1PatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSoundex1PatientNamesFirst != __evalNum))
         {
            __evalNumaDiffSoundex1PatientNamesFirst = __evalNum;
            __expraDiffSoundex1PatientNamesFirst = (!(((((getClueaPatientNamesFirst(q, m) || approximateFirstNameMatch) || getClueaSwapPatientNamesFirstLastExact(q, m)) || getClueaSwapPatientNamesFirstLastAny(q, m)) || getClueaSwapPatientNamesFirstMiddleExact(q, m)) || getClueaSwapPatientNamesFirstMiddleAny(q, m))) && ((__exists84(q, m) && __exists85(q, m)) && __all86(q, m));
         };
      return __expraDiffSoundex1PatientNamesFirst;
   };
   private int __evalNumdSoundex1PatientNamesFirst;
   private boolean __exprdSoundex1PatientNamesFirst;
   private boolean getCluedSoundex1PatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSoundex1PatientNamesFirst != __evalNum))
         {
            __evalNumdSoundex1PatientNamesFirst = __evalNum;
            __exprdSoundex1PatientNamesFirst = getClueaDiffSoundex1PatientNamesFirst(q, m);
         };
      return __exprdSoundex1PatientNamesFirst;
   };
   private boolean __exists87(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            if (q.names[__i0].__v_nameL)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists88(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         {
            if (m.names[__j0].__v_nameL)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all89(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $236 = false;
      java.lang.String $238 = null;
      boolean z$239;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $236 = q.names[__i0].__v_nameL;
            z$239 = false;
            if ((!$236))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($236 && m.names[__j0].__v_nameL) && Soundex.soundex(m.names[__j0].nameL, 1).equals(((!z$239) && (z$239 = true)) ?(($238 = Soundex.soundex(q.names[__i0].nameL, 1))) : ($238))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffSoundex1PatientNamesLast;
   private boolean __expraDiffSoundex1PatientNamesLast;
   private boolean getClueaDiffSoundex1PatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSoundex1PatientNamesLast != __evalNum))
         {
            __evalNumaDiffSoundex1PatientNamesLast = __evalNum;
            __expraDiffSoundex1PatientNamesLast = (!(((((getClueaPatientNamesLast(q, m) || approximateLastNameMatch) || getClueaSwapPatientNamesFirstLastExact(q, m)) || getClueaSwapPatientNamesFirstLastAny(q, m)) || getClueaSwapPatientNamesMiddleLastExact(q, m)) || getClueaSwapPatientNamesMiddleLastAny(q, m))) && ((__exists87(q, m) && __exists88(q, m)) && __all89(q, m));
         };
      return __expraDiffSoundex1PatientNamesLast;
   };
   private int __evalNumdSoundex1PatientNamesLast;
   private boolean __exprdSoundex1PatientNamesLast;
   private boolean getCluedSoundex1PatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSoundex1PatientNamesLast != __evalNum))
         {
            __evalNumdSoundex1PatientNamesLast = __evalNum;
            __exprdSoundex1PatientNamesLast = getClueaDiffSoundex1PatientNamesLast(q, m);
         };
      return __exprdSoundex1PatientNamesLast;
   };
   int[] dCommonFirstNames = new int[1];
   private static int[] __dCommonFirstNames__idx__limit = {
      6, 
      4, 
      3, 
   };
   private boolean __exists90(PatientImpl q, PatientImpl m, int limit) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((q.names[i].__v_nameF && (Maps.lookupInt("firstNameFrequencyCir10", q.names[i].nameF) > limit)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists91(PatientImpl q, PatientImpl m, int limit) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((m.names[i].__v_nameF && (Maps.lookupInt("firstNameFrequencyCir10", m.names[i].nameF) > limit)))
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumdCommonFirstNames;
   private boolean __exprdCommonFirstNames;
   private boolean getCluedCommonFirstNames(PatientImpl q, PatientImpl m, int limit) throws java.lang.Exception {
      if (true)
         {
            __evalNumdCommonFirstNames = __evalNum;
            __exprdCommonFirstNames = (getClueaDiffPatientNamesFirst(q, m) && (!((((getClueaNicknameQualified(q, m) || getClueaSwapPatientNamesFirstLastExact(q, m)) || getClueaSwapPatientNamesFirstLastAny(q, m)) || getClueaSwapPatientNamesFirstMiddleExact(q, m)) || getClueaSwapPatientNamesFirstMiddleAny(q, m)))) && (__exists90(q, m, limit) && __exists91(q, m, limit));
         };
      return __exprdCommonFirstNames;
   };
   int[] dCommonLastNames = new int[1];
   private static int[] __dCommonLastNames__idx__limit = {
      6, 
      4, 
      3, 
   };
   private boolean __swap92(PatientImpl q, PatientImpl m, int limit) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameL)
            __lacc.add(q.contacts[__i0].nameL);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameMaidn)
            __lacc.add(q.contacts[__i0].nameMaidn);
      qr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         if (q.mothers[__i0].__v_mothers_maiden_name)
            __lacc.add(q.mothers[__i0].mothers_maiden_name);
      qr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(q.names[__i0].nameL);
      qr[3] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameL)
            __lacc.add(m.contacts[__j0].nameL);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameMaidn)
            __lacc.add(m.contacts[__j0].nameMaidn);
      mr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         if (m.mothers[__j0].__v_mothers_maiden_name)
            __lacc.add(m.mothers[__j0].mothers_maiden_name);
      mr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(m.names[__j0].nameL);
      mr[3] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 0);
   };
   private boolean __exists93(PatientImpl q, PatientImpl m, int limit) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((q.names[i].__v_nameL && (Maps.lookupInt("lastNameFrequency10", q.names[i].nameL) > limit)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists94(PatientImpl q, PatientImpl m, int limit) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((m.names[i].__v_nameL && (Maps.lookupInt("lastNameFrequency10", m.names[i].nameL) > limit)))
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumdCommonLastNames;
   private boolean __exprdCommonLastNames;
   private boolean getCluedCommonLastNames(PatientImpl q, PatientImpl m, int limit) throws java.lang.Exception {
      if (true)
         {
            __evalNumdCommonLastNames = __evalNum;
            __exprdCommonLastNames = (getClueaDiffPatientNamesLast(q, m) && (!((getClueaSwapPatientNamesFirstLastExact(q, m) || getClueaSwapPatientNamesFirstLastAny(q, m)) || __swap92(q, m, limit)))) && (__exists93(q, m, limit) && __exists94(q, m, limit));
         };
      return __exprdCommonLastNames;
   };
   private boolean let96(PatientImpl q, PatientImpl m, int i, int j, String fi, String mi, String li, String fj, String mj, String lj) throws java.lang.Exception {
      return LongestCommonSubstring.similarity(join(fi, mi, li), join(fj, mj, lj)) >= 0.9;
   };
   private boolean __exists95(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (let96(q, m, i, j, q.names[i].__v_first_name ?(java.lang.String)(q.names[i].first_name.trim()) : (java.lang.String)(""), q.names[i].__v_middle_name ?(java.lang.String)(q.names[i].middle_name.trim()) : (java.lang.String)(""), q.names[i].__v_last_name ?(java.lang.String)(q.names[i].last_name.trim()) : (java.lang.String)(""), m.names[j].__v_first_name ?(java.lang.String)(m.names[j].first_name.trim()) : (java.lang.String)(""), m.names[j].__v_middle_name ?(java.lang.String)(m.names[j].middle_name.trim()) : (java.lang.String)(""), m.names[j].__v_last_name ?(java.lang.String)(m.names[j].last_name.trim()) : (java.lang.String)("")))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaLcsPatientNames;
   private boolean __expraLcsPatientNames;
   private boolean getClueaLcsPatientNames(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaLcsPatientNames != __evalNum))
         {
            __evalNumaLcsPatientNames = __evalNum;
            __expraLcsPatientNames = (!((getClueaPatientNamesFirst(q, m) && getClueaPatientNamesLast(q, m)) || getClueaSwapPatientNamesFirstLastExact(q, m))) && __exists95(q, m);
         };
      return __expraLcsPatientNames;
   };
   private int __evalNummLcsPatientNames;
   private boolean __exprmLcsPatientNames;
   private boolean getCluemLcsPatientNames(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummLcsPatientNames != __evalNum))
         {
            __evalNummLcsPatientNames = __evalNum;
            __exprmLcsPatientNames = getClueaLcsPatientNames(q, m);
         };
      return __exprmLcsPatientNames;
   };
   private boolean let98(PatientImpl q, PatientImpl m, int i, int j, String fi, String mi, String li, String fj, String mj, String lj) throws java.lang.Exception {
      return Jaro.jaro(join(fi, mi, li), join(fj, mj, lj), false, true, false) >= 0.9;
   };
   private boolean __exists97(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (let98(q, m, i, j, q.names[i].__v_first_name ?(java.lang.String)(q.names[i].first_name.trim()) : (java.lang.String)(""), q.names[i].__v_middle_name ?(java.lang.String)(q.names[i].middle_name.trim()) : (java.lang.String)(""), q.names[i].__v_last_name ?(java.lang.String)(q.names[i].last_name.trim()) : (java.lang.String)(""), m.names[j].__v_first_name ?(java.lang.String)(m.names[j].first_name.trim()) : (java.lang.String)(""), m.names[j].__v_middle_name ?(java.lang.String)(m.names[j].middle_name.trim()) : (java.lang.String)(""), m.names[j].__v_last_name ?(java.lang.String)(m.names[j].last_name.trim()) : (java.lang.String)("")))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaJaroPatientNames;
   private boolean __expraJaroPatientNames;
   private boolean getClueaJaroPatientNames(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaJaroPatientNames != __evalNum))
         {
            __evalNumaJaroPatientNames = __evalNum;
            __expraJaroPatientNames = (!(((getClueaPatientNamesFirst(q, m) && getClueaPatientNamesLast(q, m)) || getClueaSwapPatientNamesFirstLastExact(q, m)) || getClueaLcsPatientNames(q, m))) && __exists97(q, m);
         };
      return __expraJaroPatientNames;
   };
   private int __evalNummJaroPatientNames;
   private boolean __exprmJaroPatientNames;
   private boolean getCluemJaroPatientNames(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummJaroPatientNames != __evalNum))
         {
            __evalNummJaroPatientNames = __evalNum;
            __exprmJaroPatientNames = getClueaJaroPatientNames(q, m);
         };
      return __exprmJaroPatientNames;
   };
   private boolean __exists99(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $240 = false;
      java.util.Date $242 = null;
      boolean z$243;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $240 = q.names[__i0].__v_dob;
            z$243 = false;
            if ((!$240))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($240 && m.names[__j0].__v_dob) && m.names[__j0].dob.equals(((!z$243) && (z$243 = true)) ?(($242 = q.names[__i0].dob)) : ($242))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaBirthday;
   private boolean __expraBirthday;
   private boolean getClueaBirthday(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaBirthday != __evalNum))
         {
            __evalNumaBirthday = __evalNum;
            __expraBirthday = __exists99(q, m);
         };
      return __expraBirthday;
   };
   private int __evalNummBirthday;
   private boolean __exprmBirthday;
   private boolean getCluemBirthday(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummBirthday != __evalNum))
         {
            __evalNummBirthday = __evalNum;
            __exprmBirthday = getClueaBirthday(q, m);
         };
      return __exprmBirthday;
   };
   private boolean __exists100(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $244 = false;
      java.util.Date $246 = null;
      boolean z$247;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $244 = q.names[i].__v_dob;
            z$247 = false;
            if ((!$244))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($244 && m.names[j].__v_dob) && DateUtils.sameDayAndMonth(((!z$247) && (z$247 = true)) ?(($246 = q.names[i].dob)) : ($246), m.names[j].dob)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean sameDayAndMonth;
   private boolean __exists101(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $248 = false;
      java.util.Date $250 = null;
      boolean z$251;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $248 = q.names[i].__v_dob;
            z$251 = false;
            if ((!$248))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($248 && m.names[j].__v_dob) && DateUtils.sameMonthAndYear(((!z$251) && (z$251 = true)) ?(($250 = q.names[i].dob)) : ($250), m.names[j].dob)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean sameMonthAndYear;
   private boolean __exists102(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $252 = false;
      java.util.Date $254 = null;
      boolean z$255;
      boolean $256 = false;
      boolean z$257;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $252 = q.names[i].__v_dob;
            z$255 = false;
            z$257 = false;
            if ((!$252))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaBirthdayFirstOfMonthAndNamesHipFacility;
   private boolean __expraBirthdayFirstOfMonthAndNamesHipFacility;
   private boolean getClueaBirthdayFirstOfMonthAndNamesHipFacility(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaBirthdayFirstOfMonthAndNamesHipFacility != __evalNum))
         {
            __evalNumaBirthdayFirstOfMonthAndNamesHipFacility = __evalNum;
            __expraBirthdayFirstOfMonthAndNamesHipFacility = (!getClueaBirthday(q, m)) && __exists102(q, m);
         };
      return __expraBirthdayFirstOfMonthAndNamesHipFacility;
   };
   private int __evalNummBirthdayFirstOfMonthAndNamesHipFacility;
   private boolean __exprmBirthdayFirstOfMonthAndNamesHipFacility;
   private boolean getCluemBirthdayFirstOfMonthAndNamesHipFacility(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummBirthdayFirstOfMonthAndNamesHipFacility != __evalNum))
         {
            __evalNummBirthdayFirstOfMonthAndNamesHipFacility = __evalNum;
            __exprmBirthdayFirstOfMonthAndNamesHipFacility = getClueaBirthdayFirstOfMonthAndNamesHipFacility(q, m);
         };
      return __exprmBirthdayFirstOfMonthAndNamesHipFacility;
   };
   private boolean __exists103(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists104(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumaDiffBirthdayMatchFirstOfMonthAndHIP;
   private boolean __expraDiffBirthdayMatchFirstOfMonthAndHIP;
   private boolean getClueaDiffBirthdayMatchFirstOfMonthAndHIP(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffBirthdayMatchFirstOfMonthAndHIP != __evalNum))
         {
            __evalNumaDiffBirthdayMatchFirstOfMonthAndHIP = __evalNum;
            __expraDiffBirthdayMatchFirstOfMonthAndHIP = sameDayAndMonth && (__exists103(q, m) && __exists104(q, m));
         };
      return __expraDiffBirthdayMatchFirstOfMonthAndHIP;
   };
   private int __evalNumdBirthdayMatchFirstOfMonthAndHIP;
   private boolean __exprdBirthdayMatchFirstOfMonthAndHIP;
   private boolean getCluedBirthdayMatchFirstOfMonthAndHIP(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdBirthdayMatchFirstOfMonthAndHIP != __evalNum))
         {
            __evalNumdBirthdayMatchFirstOfMonthAndHIP = __evalNum;
            __exprdBirthdayMatchFirstOfMonthAndHIP = getClueaDiffBirthdayMatchFirstOfMonthAndHIP(q, m);
         };
      return __exprdBirthdayMatchFirstOfMonthAndHIP;
   };
   private boolean __exists105(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $258 = false;
      java.util.Date $260 = null;
      boolean z$261;
      boolean $262 = false;
      boolean z$263;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $258 = q.names[i].__v_dob;
            z$261 = false;
            z$263 = false;
            if ((!$258))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffBirthdayDayMonthMatchAndHIP;
   private boolean __expraDiffBirthdayDayMonthMatchAndHIP;
   private boolean getClueaDiffBirthdayDayMonthMatchAndHIP(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffBirthdayDayMonthMatchAndHIP != __evalNum))
         {
            __evalNumaDiffBirthdayDayMonthMatchAndHIP = __evalNum;
            __expraDiffBirthdayDayMonthMatchAndHIP = sameDayAndMonth && __exists105(q, m);
         };
      return __expraDiffBirthdayDayMonthMatchAndHIP;
   };
   private int __evalNumdBirthdayDayMonthMatchAndHIP;
   private boolean __exprdBirthdayDayMonthMatchAndHIP;
   private boolean getCluedBirthdayDayMonthMatchAndHIP(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdBirthdayDayMonthMatchAndHIP != __evalNum))
         {
            __evalNumdBirthdayDayMonthMatchAndHIP = __evalNum;
            __exprdBirthdayDayMonthMatchAndHIP = getClueaDiffBirthdayDayMonthMatchAndHIP(q, m);
         };
      return __exprdBirthdayDayMonthMatchAndHIP;
   };
   private boolean __exists106(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $264 = false;
      java.lang.String $266 = null;
      boolean z$267;
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {
            $264 = q.ids[__i0].__v_patient_id_norm;
            z$267 = false;
            if ((!$264))
               continue ;
            for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
               {
                  if ((($264 && m.ids[__j0].__v_patient_id_norm) && m.ids[__j0].patient_id_norm.equals(((!z$267) && (z$267 = true)) ?(($266 = q.ids[__i0].patient_id_norm)) : ($266))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists107(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $268 = false;
      java.util.Date $270 = null;
      boolean z$271;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $268 = q.names[i].__v_dob;
            z$271 = false;
            if ((!$268))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($268 && m.names[j].__v_dob) && DateUtils.sameMonthAndYear(((!z$271) && (z$271 = true)) ?(($270 = q.names[i].dob)) : ($270), m.names[j].dob)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists108(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $272 = false;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $272 = q.names[i].__v_dob && DateUtils.isFirstOfMonth(q.names[i].dob);
            if ((!$272))
               continue ;
            for (int j = 0; j < q.providers.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists109(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $274 = false;
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            $274 = m.names[i].__v_dob && DateUtils.isFirstOfMonth(m.names[i].dob);
            if ((!$274))
               continue ;
            for (int j = 0; j < m.providers.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaBirthdayFirstOfMonthAndProvidersHipFacility;
   private boolean __expraBirthdayFirstOfMonthAndProvidersHipFacility;
   private boolean getClueaBirthdayFirstOfMonthAndProvidersHipFacility(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaBirthdayFirstOfMonthAndProvidersHipFacility != __evalNum))
         {
            __evalNumaBirthdayFirstOfMonthAndProvidersHipFacility = __evalNum;
            __expraBirthdayFirstOfMonthAndProvidersHipFacility = (((!getClueaBirthday(q, m)) && (((getClueaPatientNamesLast(q, m) || getClueaSwapPatientNamesFirstLastExact(q, m)) || getClueaSwapPatientNamesFirstLastAny(q, m)) || __exists106(q, m))) && __exists107(q, m)) && (__exists108(q, m) || __exists109(q, m));
         };
      return __expraBirthdayFirstOfMonthAndProvidersHipFacility;
   };
   private int __evalNummBirthdayFirstOfMonthAndProvidersHipFacility;
   private boolean __exprmBirthdayFirstOfMonthAndProvidersHipFacility;
   private boolean getCluemBirthdayFirstOfMonthAndProvidersHipFacility(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummBirthdayFirstOfMonthAndProvidersHipFacility != __evalNum))
         {
            __evalNummBirthdayFirstOfMonthAndProvidersHipFacility = __evalNum;
            __exprmBirthdayFirstOfMonthAndProvidersHipFacility = getClueaBirthdayFirstOfMonthAndProvidersHipFacility(q, m);
         };
      return __exprmBirthdayFirstOfMonthAndProvidersHipFacility;
   };
   private boolean hipMatch;
   private int __evalNumaBirthdayDayAndMonth;
   private boolean __expraBirthdayDayAndMonth;
   private boolean getClueaBirthdayDayAndMonth(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaBirthdayDayAndMonth != __evalNum))
         {
            __evalNumaBirthdayDayAndMonth = __evalNum;
            __expraBirthdayDayAndMonth = (!getClueaBirthday(q, m)) && sameDayAndMonth;
         };
      return __expraBirthdayDayAndMonth;
   };
   private int __evalNummBirthdayDayAndMonth;
   private boolean __exprmBirthdayDayAndMonth;
   private boolean getCluemBirthdayDayAndMonth(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummBirthdayDayAndMonth != __evalNum))
         {
            __evalNummBirthdayDayAndMonth = __evalNum;
            __exprmBirthdayDayAndMonth = getClueaBirthdayDayAndMonth(q, m);
         };
      return __exprmBirthdayDayAndMonth;
   };
   private int __evalNumaBirthdayMonthAndYear;
   private boolean __expraBirthdayMonthAndYear;
   private boolean getClueaBirthdayMonthAndYear(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaBirthdayMonthAndYear != __evalNum))
         {
            __evalNumaBirthdayMonthAndYear = __evalNum;
            __expraBirthdayMonthAndYear = (!(getClueaBirthday(q, m) || hipMatch)) && sameMonthAndYear;
         };
      return __expraBirthdayMonthAndYear;
   };
   private int __evalNummBirthdayMonthAndYear;
   private boolean __exprmBirthdayMonthAndYear;
   private boolean getCluemBirthdayMonthAndYear(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummBirthdayMonthAndYear != __evalNum))
         {
            __evalNummBirthdayMonthAndYear = __evalNum;
            __exprmBirthdayMonthAndYear = getClueaBirthdayMonthAndYear(q, m);
         };
      return __exprmBirthdayMonthAndYear;
   };
   private boolean __exists110(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $276 = false;
      int $278 = 0;
      boolean z$279;
      int $280 = 0;
      boolean z$281;
      int $282 = 0;
      boolean z$283;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $276 = q.names[i].__v_dob;
            z$279 = false;
            z$281 = false;
            z$283 = false;
            if ((!$276))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((((($276 && m.names[j].__v_dob) && ((((!z$279) && (z$279 = true)) ?(($278 = DateUtils.getDayOfMonth(q.names[i].dob))) : ($278)) == DateUtils.getDayOfMonth(m.names[j].dob))) && ((((!z$281) && (z$281 = true)) ?(($280 = DateUtils.getYear(q.names[i].dob))) : ($280)) == DateUtils.getYear(m.names[j].dob))) && (Math.abs((((!z$283) && (z$283 = true)) ?(($282 = DateUtils.getMonth(q.names[i].dob))) : ($282)) - DateUtils.getMonth(m.names[j].dob)) == 1)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaBirthdayDayYearAndCloseMonth;
   private boolean __expraBirthdayDayYearAndCloseMonth;
   private boolean getClueaBirthdayDayYearAndCloseMonth(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaBirthdayDayYearAndCloseMonth != __evalNum))
         {
            __evalNumaBirthdayDayYearAndCloseMonth = __evalNum;
            __expraBirthdayDayYearAndCloseMonth = (!getClueaBirthday(q, m)) && __exists110(q, m);
         };
      return __expraBirthdayDayYearAndCloseMonth;
   };
   private int __evalNummBirthdayDayYearAndCloseMonth;
   private boolean __exprmBirthdayDayYearAndCloseMonth;
   private boolean getCluemBirthdayDayYearAndCloseMonth(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummBirthdayDayYearAndCloseMonth != __evalNum))
         {
            __evalNummBirthdayDayYearAndCloseMonth = __evalNum;
            __exprmBirthdayDayYearAndCloseMonth = getClueaBirthdayDayYearAndCloseMonth(q, m);
         };
      return __exprmBirthdayDayYearAndCloseMonth;
   };
   private boolean __exists111(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $284 = false;
      java.util.Date $286 = null;
      boolean z$287;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $284 = q.names[i].__v_dob;
            z$287 = false;
            if ((!$284))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($284 && m.names[j].__v_dob) && DateUtils.missingNumber(((!z$287) && (z$287 = true)) ?(($286 = q.names[i].dob)) : ($286), m.names[j].dob)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaBirthdayMissingDigit;
   private boolean __expraBirthdayMissingDigit;
   private boolean getClueaBirthdayMissingDigit(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaBirthdayMissingDigit != __evalNum))
         {
            __evalNumaBirthdayMissingDigit = __evalNum;
            __expraBirthdayMissingDigit = (!(getClueaBirthday(q, m) || hipMatch)) && __exists111(q, m);
         };
      return __expraBirthdayMissingDigit;
   };
   private int __evalNummBirthdayMissingDigit;
   private boolean __exprmBirthdayMissingDigit;
   private boolean getCluemBirthdayMissingDigit(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummBirthdayMissingDigit != __evalNum))
         {
            __evalNummBirthdayMissingDigit = __evalNum;
            __exprmBirthdayMissingDigit = getClueaBirthdayMissingDigit(q, m);
         };
      return __exprmBirthdayMissingDigit;
   };
   private boolean __exists112(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $288 = false;
      java.util.Date $290 = null;
      boolean z$291;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $288 = q.names[i].__v_dob;
            z$291 = false;
            if ((!$288))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($288 && m.names[j].__v_dob) && DateUtils.swappedDayMonth(((!z$291) && (z$291 = true)) ?(($290 = q.names[i].dob)) : ($290), m.names[j].dob)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaBirthdaySwappedDayAndMonth;
   private boolean __expraBirthdaySwappedDayAndMonth;
   private boolean getClueaBirthdaySwappedDayAndMonth(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaBirthdaySwappedDayAndMonth != __evalNum))
         {
            __evalNumaBirthdaySwappedDayAndMonth = __evalNum;
            __expraBirthdaySwappedDayAndMonth = (!getClueaBirthday(q, m)) && __exists112(q, m);
         };
      return __expraBirthdaySwappedDayAndMonth;
   };
   private int __evalNummBirthdaySwappedDayAndMonth;
   private boolean __exprmBirthdaySwappedDayAndMonth;
   private boolean getCluemBirthdaySwappedDayAndMonth(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummBirthdaySwappedDayAndMonth != __evalNum))
         {
            __evalNummBirthdaySwappedDayAndMonth = __evalNum;
            __exprmBirthdaySwappedDayAndMonth = getClueaBirthdaySwappedDayAndMonth(q, m);
         };
      return __exprmBirthdaySwappedDayAndMonth;
   };
   private boolean __exists113(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $292 = false;
      java.lang.String $294 = null;
      boolean z$295;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $292 = q.names[i].__v_dobNumbers;
            z$295 = false;
            if ((!$292))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($292 && m.names[j].__v_dobNumbers) && (EditDistance2.editDistance2(((!z$295) && (z$295 = true)) ?(($294 = String.valueOf(q.names[i].dobNumbers))) : ($294), String.valueOf(m.names[j].dobNumbers), 1) < 2)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaEditDistanceBirthdayNumbers;
   private boolean __expraEditDistanceBirthdayNumbers;
   private boolean getClueaEditDistanceBirthdayNumbers(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaEditDistanceBirthdayNumbers != __evalNum))
         {
            __evalNumaEditDistanceBirthdayNumbers = __evalNum;
            __expraEditDistanceBirthdayNumbers = (!getClueaBirthday(q, m)) && __exists113(q, m);
         };
      return __expraEditDistanceBirthdayNumbers;
   };
   private int __evalNummEditDistanceBirthdayNumbers;
   private boolean __exprmEditDistanceBirthdayNumbers;
   private boolean getCluemEditDistanceBirthdayNumbers(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummEditDistanceBirthdayNumbers != __evalNum))
         {
            __evalNummEditDistanceBirthdayNumbers = __evalNum;
            __exprmEditDistanceBirthdayNumbers = getClueaEditDistanceBirthdayNumbers(q, m);
         };
      return __exprmEditDistanceBirthdayNumbers;
   };
   private boolean approximateMatchingDobs;
   private boolean birthdayMaybeTypo;
   private int __evalNumaDiffBirthdayMaybeTypo;
   private boolean __expraDiffBirthdayMaybeTypo;
   private boolean getClueaDiffBirthdayMaybeTypo(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffBirthdayMaybeTypo != __evalNum))
         {
            __evalNumaDiffBirthdayMaybeTypo = __evalNum;
            __expraDiffBirthdayMaybeTypo = birthdayMaybeTypo;
         };
      return __expraDiffBirthdayMaybeTypo;
   };
   private int __evalNumdBirthdayMaybeTypo;
   private boolean __exprdBirthdayMaybeTypo;
   private boolean getCluedBirthdayMaybeTypo(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdBirthdayMaybeTypo != __evalNum))
         {
            __evalNumdBirthdayMaybeTypo = __evalNum;
            __exprdBirthdayMaybeTypo = getClueaDiffBirthdayMaybeTypo(q, m);
         };
      return __exprdBirthdayMaybeTypo;
   };
   int[] dBirthdaySeparation = new int[1];
   private static float[] __dBirthdaySeparation__idx__bound = {
      6570, 
      730, 
      270, 
      1, 
   };
   private boolean __exists114(PatientImpl q, PatientImpl m, float bound) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if (q.names[i].__v_dob)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists115(PatientImpl q, PatientImpl m, float bound) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if (m.names[i].__v_dob)
               {
                  return true;
               };
         };
      return false;
   };
   private float __quant116(PatientImpl q, PatientImpl m, float bound) throws java.lang.Exception {
      float __e = Float.MAX_VALUE;
      __quant116l: for (int i = 0; i < q.names.length; i = i + 1)
         for (int j = 0; j < m.names.length; j = j + 1)
            if ((q.names[i].__v_dob && m.names[j].__v_dob))
               {
                  float __v = DateUtils.daysApart(q.names[i].dob, m.names[j].dob);
                  if ((__v < __e))
                     __e = __v;
               };
      return __e;
   };
   private int __evalNumdBirthdaySeparation;
   private boolean __exprdBirthdaySeparation;
   private boolean getCluedBirthdaySeparation(PatientImpl q, PatientImpl m, float bound) throws java.lang.Exception {
      if (true)
         {
            __evalNumdBirthdaySeparation = __evalNum;
            __exprdBirthdaySeparation = ((!(getClueaBirthday(q, m) || birthdayMaybeTypo)) && (__exists114(q, m, bound) && __exists115(q, m, bound))) && (bound <= __quant116(q, m, bound));
         };
      return __exprdBirthdaySeparation;
   };
   private boolean __exists117(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $296 = false;
      java.util.Date $298 = null;
      boolean z$299;
      java.util.Date $300 = null;
      boolean z$301;
      boolean $302 = false;
      java.util.Date $304 = null;
      boolean z$305;
      java.util.Date $306 = null;
      boolean z$307;
      java.util.Date $308 = null;
      boolean $310 = false;
      boolean z$311;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $296 = q.names[i].__v_dob;
            z$299 = false;
            z$301 = false;
            if ((!$296))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  $302 = m.names[j].__v_dob;
                  z$305 = false;
                  z$307 = false;
                  if ((!($296 && $302)))
                     continue ;
                  for (int k = 0; k < q.events.length; k = k + 1)
                     {
                        $308 = q.events[k].event_date;
                        z$311 = false;
                        if ((!((((!z$311) && (z$311 = true)) ?(($310 = $296 && q.events[k].__v_event_date)) : ($310)) && $302)))
                           continue ;
                        for (int l = 0; l < m.events.length; l = l + 1)
                           {
                              if (((((((!z$311) && (z$311 = true)) ?(($310 = $296 && q.events[k].__v_event_date)) : ($310)) && (DateUtils.daysApart(((!z$299) && (z$299 = true)) ?(($298 = q.names[i].dob)) : ($298), $308) < 3)) && (($302 && m.events[l].__v_event_date) && (DateUtils.daysApart(((!z$305) && (z$305 = true)) ?(($304 = m.names[j].dob)) : ($304), m.events[l].event_date) < 3))) && (DateUtils.daysApart(((!z$301) && (z$301 = true)) ?(($300 = q.names[i].dob)) : ($300), ((!z$307) && (z$307 = true)) ?(($306 = m.names[j].dob)) : ($306)) > 3)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffBirthdayAndFirstEvent;
   private boolean __expraDiffBirthdayAndFirstEvent;
   private boolean getClueaDiffBirthdayAndFirstEvent(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffBirthdayAndFirstEvent != __evalNum))
         {
            __evalNumaDiffBirthdayAndFirstEvent = __evalNum;
            __expraDiffBirthdayAndFirstEvent = __exists117(q, m);
         };
      return __expraDiffBirthdayAndFirstEvent;
   };
   private int __evalNumdBirthdayAndFirstEvent;
   private boolean __exprdBirthdayAndFirstEvent;
   private boolean getCluedBirthdayAndFirstEvent(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdBirthdayAndFirstEvent != __evalNum))
         {
            __evalNumdBirthdayAndFirstEvent = __evalNum;
            __exprdBirthdayAndFirstEvent = getClueaDiffBirthdayAndFirstEvent(q, m);
         };
      return __exprdBirthdayAndFirstEvent;
   };
   private boolean __exists118(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            if (q.names[__i0].__v_clean_sex)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists119(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         {
            if (m.names[__j0].__v_clean_sex)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all120(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $312 = false;
      char $314 = ' ';
      boolean z$315;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $312 = q.names[__i0].__v_clean_sex;
            z$315 = false;
            if ((!$312))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($312 && m.names[__j0].__v_clean_sex) && ((((!z$315) && (z$315 = true)) ?(($314 = q.names[__i0].clean_sex)) : ($314)) == m.names[__j0].clean_sex)))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffSexPossiblyTypo;
   private boolean __expraDiffSexPossiblyTypo;
   private boolean getClueaDiffSexPossiblyTypo(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSexPossiblyTypo != __evalNum))
         {
            __evalNumaDiffSexPossiblyTypo = __evalNum;
            __expraDiffSexPossiblyTypo = (((__exists118(q, m) && __exists119(q, m)) && __all120(q, m)) && getClueaPatientNamesFirst(q, m)) && getClueaPatientNamesLast(q, m);
         };
      return __expraDiffSexPossiblyTypo;
   };
   private int __evalNumdSexPossiblyTypo;
   private boolean __exprdSexPossiblyTypo;
   private boolean getCluedSexPossiblyTypo(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSexPossiblyTypo != __evalNum))
         {
            __evalNumdSexPossiblyTypo = __evalNum;
            __exprdSexPossiblyTypo = getClueaDiffSexPossiblyTypo(q, m);
         };
      return __exprdSexPossiblyTypo;
   };
   private boolean __exists121(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            if (q.names[__i0].__v_clean_sex)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists122(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         {
            if (m.names[__j0].__v_clean_sex)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all123(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $316 = false;
      char $318 = ' ';
      boolean z$319;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $316 = q.names[__i0].__v_clean_sex;
            z$319 = false;
            if ((!$316))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($316 && m.names[__j0].__v_clean_sex) && ((((!z$319) && (z$319 = true)) ?(($318 = q.names[__i0].clean_sex)) : ($318)) == m.names[__j0].clean_sex)))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffSex;
   private boolean __expraDiffSex;
   private boolean getClueaDiffSex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSex != __evalNum))
         {
            __evalNumaDiffSex = __evalNum;
            __expraDiffSex = (!getClueaDiffSexPossiblyTypo(q, m)) && ((__exists121(q, m) && __exists122(q, m)) && __all123(q, m));
         };
      return __expraDiffSex;
   };
   private int __evalNumdSex;
   private boolean __exprdSex;
   private boolean getCluedSex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSex != __evalNum))
         {
            __evalNumdSex = __evalNum;
            __exprdSex = getClueaDiffSex(q, m);
         };
      return __exprdSex;
   };
   private boolean let125(PatientImpl q, PatientImpl m, int i, int j, int sq, int sm) throws java.lang.Exception {
      return ((sq != Integer.MIN_VALUE) && (sq != 3)) && (sq == sm);
   };
   private boolean __exists124(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $320 = false;
      int $322 = 0;
      boolean z$323;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $320 = q.names[i].__v_nameF;
            z$323 = false;
            if ((!$320))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($320 && m.names[j].__v_nameF) && let125(q, m, i, j, ((!z$323) && (z$323 = true)) ?(($322 = Maps.lookupInt("firstNameGenders", q.names[i].nameF))) : ($322), Maps.lookupInt("firstNameGenders", m.names[j].nameF))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaWrongSex;
   private boolean __expraWrongSex;
   private boolean getClueaWrongSex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaWrongSex != __evalNum))
         {
            __evalNumaWrongSex = __evalNum;
            __expraWrongSex = (getClueaDiffSexPossiblyTypo(q, m) || getClueaDiffSex(q, m)) && __exists124(q, m);
         };
      return __expraWrongSex;
   };
   private int __evalNummWrongSex;
   private boolean __exprmWrongSex;
   private boolean getCluemWrongSex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummWrongSex != __evalNum))
         {
            __evalNummWrongSex = __evalNum;
            __exprmWrongSex = getClueaWrongSex(q, m);
         };
      return __exprmWrongSex;
   };
   private boolean let127(PatientImpl q, PatientImpl m, int i, int j, int sq, int sm) throws java.lang.Exception {
      return ((sq != Integer.MIN_VALUE) && (sm != Integer.MIN_VALUE)) && ((sq & sm) == 0);
   };
   private boolean __exists126(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $324 = false;
      int $326 = 0;
      boolean z$327;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $324 = q.names[i].__v_nameF;
            z$327 = false;
            if ((!$324))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($324 && m.names[j].__v_nameF) && let127(q, m, i, j, ((!z$327) && (z$327 = true)) ?(($326 = Maps.lookupInt("firstNameGenders", q.names[i].nameF))) : ($326), Maps.lookupInt("firstNameGenders", m.names[j].nameF))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffFirstNameSex;
   private boolean __expraDiffFirstNameSex;
   private boolean getClueaDiffFirstNameSex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffFirstNameSex != __evalNum))
         {
            __evalNumaDiffFirstNameSex = __evalNum;
            __expraDiffFirstNameSex = (getClueaDiffPatientNamesFirst(q, m) && approximateFirstNameMatch) && __exists126(q, m);
         };
      return __expraDiffFirstNameSex;
   };
   private int __evalNumdFirstNameSex;
   private boolean __exprdFirstNameSex;
   private boolean getCluedFirstNameSex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdFirstNameSex != __evalNum))
         {
            __evalNumdFirstNameSex = __evalNum;
            __exprdFirstNameSex = getClueaDiffFirstNameSex(q, m);
         };
      return __exprdFirstNameSex;
   };
   private boolean __all128(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((!(!q.names[i].__v_nameF)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all129(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((!(!m.names[i].__v_nameF)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __exists130(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $328 = false;
      for (int i = 0; i < q.names.length; i = i + 1)
         {

            if ((!$328))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (($328 && (m.names[j].clean_sex == 'M')))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists131(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $330 = false;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $330 = q.names[i].clean_sex == 'M';
            if ((!$330))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists132(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $332 = false;
      for (int i = 0; i < q.names.length; i = i + 1)
         {

            if ((!$332))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (($332 && (m.names[j].clean_sex == 'F')))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists133(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $334 = false;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $334 = q.names[i].clean_sex == 'F';
            if ((!$334))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaImpliedSex;
   private boolean __expraImpliedSex;
   private boolean getClueaImpliedSex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaImpliedSex != __evalNum))
         {
            __evalNumaImpliedSex = __evalNum;
            __expraImpliedSex = ((__all128(q, m) || __all129(q, m)) && ((q.multi_birth_ind != 'Y') && (m.multi_birth_ind != 'Y'))) && (((__exists130(q, m) || __exists131(q, m)) || __exists132(q, m)) || __exists133(q, m));
         };
      return __expraImpliedSex;
   };
   private int __evalNummImpliedSex;
   private boolean __exprmImpliedSex;
   private boolean getCluemImpliedSex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummImpliedSex != __evalNum))
         {
            __evalNummImpliedSex = __evalNum;
            __exprmImpliedSex = getClueaImpliedSex(q, m);
         };
      return __exprmImpliedSex;
   };
   private boolean __exists134(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.ethnicity.length; __i0 = __i0 + 1)
         {
            if (q.ethnicity[__i0].__v_ethnicity_cd)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists135(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.ethnicity.length; __j0 = __j0 + 1)
         {
            if (m.ethnicity[__j0].__v_ethnicity_cd)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all136(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $336 = false;
      java.lang.String $338 = null;
      boolean z$339;
      for (int __i0 = 0; __i0 < q.ethnicity.length; __i0 = __i0 + 1)
         {
            $336 = q.ethnicity[__i0].__v_ethnicity_cd;
            z$339 = false;
            if ((!$336))
               continue ;
            for (int __j0 = 0; __j0 < m.ethnicity.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($336 && m.ethnicity[__j0].__v_ethnicity_cd) && m.ethnicity[__j0].ethnicity_cd.equals(((!z$339) && (z$339 = true)) ?(($338 = q.ethnicity[__i0].ethnicity_cd)) : ($338))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffEthnicity;
   private boolean __expraDiffEthnicity;
   private boolean getClueaDiffEthnicity(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffEthnicity != __evalNum))
         {
            __evalNumaDiffEthnicity = __evalNum;
            __expraDiffEthnicity = (__exists134(q, m) && __exists135(q, m)) && __all136(q, m);
         };
      return __expraDiffEthnicity;
   };
   private int __evalNumdEthnicity;
   private boolean __exprdEthnicity;
   private boolean getCluedEthnicity(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdEthnicity != __evalNum))
         {
            __evalNumdEthnicity = __evalNum;
            __exprdEthnicity = getClueaDiffEthnicity(q, m);
         };
      return __exprdEthnicity;
   };
   private boolean __exists137(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $340 = false;
      java.lang.String $342 = null;
      boolean z$343;
      for (int __i0 = 0; __i0 < q.events.length; __i0 = __i0 + 1)
         {

            z$343 = false;
            if ((!$340))
               continue ;
            for (int __j0 = 0; __j0 < m.events.length; __j0 = __j0 + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaFacilityId_names;
   private boolean __expraFacilityId_names;
   private boolean getClueaFacilityId_names(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaFacilityId_names != __evalNum))
         {
            __evalNumaFacilityId_names = __evalNum;
            __expraFacilityId_names = __exists137(q, m);
         };
      return __expraFacilityId_names;
   };
   private boolean __exists138(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.events.length; __i0 = __i0 + 1)
         {
            if (q.events[__i0].__v_facility_id)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists139(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.events.length; __j0 = __j0 + 1)
         {
            if (m.events[__j0].__v_facility_id)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all140(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $344 = false;
      java.lang.String $346 = null;
      boolean z$347;
      for (int __i0 = 0; __i0 < q.events.length; __i0 = __i0 + 1)
         {
            $344 = q.events[__i0].__v_facility_id;
            z$347 = false;
            if ((!$344))
               continue ;
            for (int __j0 = 0; __j0 < m.events.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($344 && m.events[__j0].__v_facility_id) && m.events[__j0].facility_id.equals(((!z$347) && (z$347 = true)) ?(($346 = q.events[__i0].facility_id)) : ($346))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private boolean __swap141(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_facility_id)
            __lacc.add(q.names[__i0].facility_id);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.providers.length; __i0 = __i0 + 1)
         if (q.providers[__i0].__v_facility_id)
            __lacc.add(q.providers[__i0].facility_id);
      qr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.events.length; __i0 = __i0 + 1)
         if (q.events[__i0].__v_facility_id)
            __lacc.add(q.events[__i0].facility_id);
      qr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         if (q.ids[__i0].__v_facility_id)
            __lacc.add(q.ids[__i0].facility_id);
      qr[3] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_facility_id)
            __lacc.add(m.names[__j0].facility_id);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.providers.length; __j0 = __j0 + 1)
         if (m.providers[__j0].__v_facility_id)
            __lacc.add(m.providers[__j0].facility_id);
      mr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.events.length; __j0 = __j0 + 1)
         if (m.events[__j0].__v_facility_id)
            __lacc.add(m.events[__j0].facility_id);
      mr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
         if (m.ids[__j0].__v_facility_id)
            __lacc.add(m.ids[__j0].facility_id);
      mr[3] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 0);
   };
   private int __evalNumaFacilityId_not_names;
   private boolean __expraFacilityId_not_names;
   private boolean getClueaFacilityId_not_names(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaFacilityId_not_names != __evalNum))
         {
            __evalNumaFacilityId_not_names = __evalNum;
            __expraFacilityId_not_names = ((__exists138(q, m) && __exists139(q, m)) && __all140(q, m)) && __swap141(q, m);
         };
      return __expraFacilityId_not_names;
   };
   private int __evalNumaFacilityId;
   private boolean __expraFacilityId;
   private boolean getClueaFacilityId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaFacilityId != __evalNum))
         {
            __evalNumaFacilityId = __evalNum;
            __expraFacilityId = getClueaFacilityId_names(q, m) || getClueaFacilityId_not_names(q, m);
         };
      return __expraFacilityId;
   };
   private int __evalNummFacilityId;
   private boolean __exprmFacilityId;
   private boolean getCluemFacilityId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummFacilityId != __evalNum))
         {
            __evalNummFacilityId = __evalNum;
            __exprmFacilityId = getClueaFacilityId(q, m);
         };
      return __exprmFacilityId;
   };
   private boolean __exists142(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $348 = false;
      java.lang.String $350 = null;
      boolean z$351;
      java.lang.String $352 = null;
      boolean z$353;
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

            z$351 = false;
            z$353 = false;
            if ((!$348))
               continue ;
            for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaFacilityRecordId;
   private boolean __expraFacilityRecordId;
   private boolean getClueaFacilityRecordId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaFacilityRecordId != __evalNum))
         {
            __evalNumaFacilityRecordId = __evalNum;
            __expraFacilityRecordId = __exists142(q, m);
         };
      return __expraFacilityRecordId;
   };
   private int __evalNummFacilityRecordId;
   private boolean __exprmFacilityRecordId;
   private boolean getCluemFacilityRecordId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummFacilityRecordId != __evalNum))
         {
            __evalNummFacilityRecordId = __evalNum;
            __exprmFacilityRecordId = getClueaFacilityRecordId(q, m);
         };
      return __exprmFacilityRecordId;
   };
   private boolean __exists143(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $354 = false;
      java.lang.String $356 = null;
      boolean z$357;
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

            z$357 = false;
            if ((!$354))
               continue ;
            for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaVitalRecordId;
   private boolean __expraVitalRecordId;
   private boolean getClueaVitalRecordId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaVitalRecordId != __evalNum))
         {
            __evalNumaVitalRecordId = __evalNum;
            __expraVitalRecordId = __exists143(q, m);
         };
      return __expraVitalRecordId;
   };
   private int __evalNummVitalRecordId;
   private boolean __exprmVitalRecordId;
   private boolean getCluemVitalRecordId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummVitalRecordId != __evalNum))
         {
            __evalNummVitalRecordId = __evalNum;
            __exprmVitalRecordId = getClueaVitalRecordId(q, m);
         };
      return __exprmVitalRecordId;
   };
   private boolean __exists144(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists145(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all146(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $358 = false;
      java.lang.String $360 = null;
      boolean z$361;
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

            z$361 = false;
            if ((!$358))
               continue ;
            for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
               {

                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffVitalRecordId;
   private boolean __expraDiffVitalRecordId;
   private boolean getClueaDiffVitalRecordId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffVitalRecordId != __evalNum))
         {
            __evalNumaDiffVitalRecordId = __evalNum;
            __expraDiffVitalRecordId = (__exists144(q, m) && __exists145(q, m)) && __all146(q, m);
         };
      return __expraDiffVitalRecordId;
   };
   private int __evalNumdVitalRecordId;
   private boolean __exprdVitalRecordId;
   private boolean getCluedVitalRecordId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdVitalRecordId != __evalNum))
         {
            __evalNumdVitalRecordId = __evalNum;
            __exprdVitalRecordId = getClueaDiffVitalRecordId(q, m);
         };
      return __exprdVitalRecordId;
   };
   private boolean __exists147(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $362 = false;
      java.lang.String $364 = null;
      boolean z$365;
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

            z$365 = false;
            if ((!$362))
               continue ;
            for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaMedicaidIds;
   private boolean __expraMedicaidIds;
   private boolean getClueaMedicaidIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMedicaidIds != __evalNum))
         {
            __evalNumaMedicaidIds = __evalNum;
            __expraMedicaidIds = (!getClueaVitalRecordId(q, m)) && __exists147(q, m);
         };
      return __expraMedicaidIds;
   };
   private int __evalNummMedicaidIds;
   private boolean __exprmMedicaidIds;
   private boolean getCluemMedicaidIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummMedicaidIds != __evalNum))
         {
            __evalNummMedicaidIds = __evalNum;
            __exprmMedicaidIds = getClueaMedicaidIds(q, m);
         };
      return __exprmMedicaidIds;
   };
   private int __evalNumaMedicaidIdsFirstName;
   private boolean __expraMedicaidIdsFirstName;
   private boolean getClueaMedicaidIdsFirstName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMedicaidIdsFirstName != __evalNum))
         {
            __evalNumaMedicaidIdsFirstName = __evalNum;
            __expraMedicaidIdsFirstName = getClueaMedicaidIds(q, m) && getClueaPatientNamesFirst(q, m);
         };
      return __expraMedicaidIdsFirstName;
   };
   private int __evalNummMedicaidIdsFirstName;
   private boolean __exprmMedicaidIdsFirstName;
   private boolean getCluemMedicaidIdsFirstName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummMedicaidIdsFirstName != __evalNum))
         {
            __evalNummMedicaidIdsFirstName = __evalNum;
            __exprmMedicaidIdsFirstName = getClueaMedicaidIdsFirstName(q, m);
         };
      return __exprmMedicaidIdsFirstName;
   };
   private boolean __exists148(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists149(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all150(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $366 = false;
      java.lang.String $368 = null;
      boolean z$369;
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

            z$369 = false;
            if ((!$366))
               continue ;
            for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
               {

                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffMedicaidIds;
   private boolean __expraDiffMedicaidIds;
   private boolean getClueaDiffMedicaidIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffMedicaidIds != __evalNum))
         {
            __evalNumaDiffMedicaidIds = __evalNum;
            __expraDiffMedicaidIds = (__exists148(q, m) && __exists149(q, m)) && __all150(q, m);
         };
      return __expraDiffMedicaidIds;
   };
   private int __evalNumdMedicaidIds;
   private boolean __exprdMedicaidIds;
   private boolean getCluedMedicaidIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMedicaidIds != __evalNum))
         {
            __evalNumdMedicaidIds = __evalNum;
            __exprdMedicaidIds = getClueaDiffMedicaidIds(q, m);
         };
      return __exprdMedicaidIds;
   };
   private boolean __exists151(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $370 = false;
      java.lang.String $372 = null;
      boolean z$373;
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

            z$373 = false;
            if ((!$370))
               continue ;
            for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaMedicalRecordIds;
   private boolean __expraMedicalRecordIds;
   private boolean getClueaMedicalRecordIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMedicalRecordIds != __evalNum))
         {
            __evalNumaMedicalRecordIds = __evalNum;
            __expraMedicalRecordIds = (!getClueaFacilityRecordId(q, m)) && __exists151(q, m);
         };
      return __expraMedicalRecordIds;
   };
   private int __evalNummMedicalRecordIds;
   private boolean __exprmMedicalRecordIds;
   private boolean getCluemMedicalRecordIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummMedicalRecordIds != __evalNum))
         {
            __evalNummMedicalRecordIds = __evalNum;
            __exprmMedicalRecordIds = getClueaMedicalRecordIds(q, m);
         };
      return __exprmMedicalRecordIds;
   };
   private boolean __exists152(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $374 = false;
      boolean $376 = false;
      boolean z$377;
      boolean $378 = false;
      boolean z$379;
      java.lang.String $380 = null;
      boolean z$381;
      java.lang.String $382 = null;
      boolean z$383;
      java.lang.String $384 = null;
      boolean z$385;
      boolean $386 = false;
      boolean z$387;
      for (int i = 0; i < q.ids.length; i = i + 1)
         {
            $374 = q.ids[i].__v_patient_id_norm;
            z$377 = false;
            z$379 = false;
            z$381 = false;
            z$383 = false;
            z$385 = false;
            z$387 = false;

               continue ;
            for (int j = 0; j < m.ids.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffMedicalRecordIdsSameFacility;
   private boolean __expraDiffMedicalRecordIdsSameFacility;
   private boolean getClueaDiffMedicalRecordIdsSameFacility(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffMedicalRecordIdsSameFacility != __evalNum))
         {
            __evalNumaDiffMedicalRecordIdsSameFacility = __evalNum;
            __expraDiffMedicalRecordIdsSameFacility = (!getClueaFacilityRecordId(q, m)) && __exists152(q, m);
         };
      return __expraDiffMedicalRecordIdsSameFacility;
   };
   private int __evalNumdMedicalRecordIdsSameFacility;
   private boolean __exprdMedicalRecordIdsSameFacility;
   private boolean getCluedMedicalRecordIdsSameFacility(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMedicalRecordIdsSameFacility != __evalNum))
         {
            __evalNumdMedicalRecordIdsSameFacility = __evalNum;
            __exprdMedicalRecordIdsSameFacility = getClueaDiffMedicalRecordIdsSameFacility(q, m);
         };
      return __exprdMedicalRecordIdsSameFacility;
   };
   private boolean __exists153(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists154(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all155(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $388 = false;
      java.lang.String $390 = null;
      boolean z$391;
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

            z$391 = false;
            if ((!$388))
               continue ;
            for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
               {

                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffMedicalRecordIds;
   private boolean __expraDiffMedicalRecordIds;
   private boolean getClueaDiffMedicalRecordIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffMedicalRecordIds != __evalNum))
         {
            __evalNumaDiffMedicalRecordIds = __evalNum;
            __expraDiffMedicalRecordIds = ((!getClueaFacilityRecordId(q, m)) && (!getClueaDiffMedicalRecordIdsSameFacility(q, m))) && ((__exists153(q, m) && __exists154(q, m)) && __all155(q, m));
         };
      return __expraDiffMedicalRecordIds;
   };
   private int __evalNumdMedicalRecordIds;
   private boolean __exprdMedicalRecordIds;
   private boolean getCluedMedicalRecordIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMedicalRecordIds != __evalNum))
         {
            __evalNumdMedicalRecordIds = __evalNum;
            __exprdMedicalRecordIds = getClueaDiffMedicalRecordIds(q, m);
         };
      return __exprdMedicalRecordIds;
   };
   private boolean __exists156(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $392 = false;
      java.lang.String $394 = null;
      boolean z$395;
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

            z$395 = false;
            if ((!$392))
               continue ;
            for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaMedicalRecordDigits;
   private boolean __expraMedicalRecordDigits;
   private boolean getClueaMedicalRecordDigits(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMedicalRecordDigits != __evalNum))
         {
            __evalNumaMedicalRecordDigits = __evalNum;
            __expraMedicalRecordDigits = getClueaDiffMedicalRecordIds(q, m) && __exists156(q, m);
         };
      return __expraMedicalRecordDigits;
   };
   private int __evalNummMedicalRecordDigits;
   private boolean __exprmMedicalRecordDigits;
   private boolean getCluemMedicalRecordDigits(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummMedicalRecordDigits != __evalNum))
         {
            __evalNummMedicalRecordDigits = __evalNum;
            __exprmMedicalRecordDigits = getClueaMedicalRecordDigits(q, m);
         };
      return __exprmMedicalRecordDigits;
   };
   private boolean __exists157(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $396 = false;
      java.lang.String $398 = null;
      boolean z$399;
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

            z$399 = false;
            if ((!$396))
               continue ;
            for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrMedicalRecordDigitsOld;
   private boolean __exprrMedicalRecordDigitsOld;
   private boolean getCluerMedicalRecordDigitsOld(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrMedicalRecordDigitsOld != __evalNum))
         {
            __evalNumrMedicalRecordDigitsOld = __evalNum;
            __exprrMedicalRecordDigitsOld = getClueaDiffMedicalRecordIds(q, m) && __exists157(q, m);
         };
      return __exprrMedicalRecordDigitsOld;
   };
   private boolean let159(PatientImpl q, PatientImpl m, int i, int j, long qid, long mid) throws java.lang.Exception {
      return (Math.abs(qid - mid) == 1) && (qid > 10);
   };
   private boolean __exists158(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $400 = false;
      long $402 = 0;
      boolean z$403;
      for (int i = 0; i < q.ids.length; i = i + 1)
         {

            z$403 = false;
            if ((!$400))
               continue ;
            for (int j = 0; j < m.ids.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffVitalRecordOffBy1;
   private boolean __expraDiffVitalRecordOffBy1;
   private boolean getClueaDiffVitalRecordOffBy1(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffVitalRecordOffBy1 != __evalNum))
         {
            __evalNumaDiffVitalRecordOffBy1 = __evalNum;
            __expraDiffVitalRecordOffBy1 = __exists158(q, m);
         };
      return __expraDiffVitalRecordOffBy1;
   };
   private int __evalNumdVitalRecordOffBy1;
   private boolean __exprdVitalRecordOffBy1;
   private boolean getCluedVitalRecordOffBy1(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdVitalRecordOffBy1 != __evalNum))
         {
            __evalNumdVitalRecordOffBy1 = __evalNum;
            __exprdVitalRecordOffBy1 = getClueaDiffVitalRecordOffBy1(q, m);
         };
      return __exprdVitalRecordOffBy1;
   };
   private boolean let161(PatientImpl q, PatientImpl m, int i, int j, long qid, long mid) throws java.lang.Exception {
      return (Math.abs(qid - mid) == 1) && (qid > 10);
   };
   private boolean __exists160(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $404 = false;
      long $406 = 0;
      boolean z$407;
      for (int i = 0; i < q.ids.length; i = i + 1)
         {

            z$407 = false;
            if ((!$404))
               continue ;
            for (int j = 0; j < m.ids.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaMedicalRecordOffBy1;
   private boolean __expraMedicalRecordOffBy1;
   private boolean getClueaMedicalRecordOffBy1(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMedicalRecordOffBy1 != __evalNum))
         {
            __evalNumaMedicalRecordOffBy1 = __evalNum;
            __expraMedicalRecordOffBy1 = (!getClueaDiffVitalRecordOffBy1(q, m)) && __exists160(q, m);
         };
      return __expraMedicalRecordOffBy1;
   };
   private int __evalNumdMedicalRecordOffBy1;
   private boolean __exprdMedicalRecordOffBy1;
   private boolean getCluedMedicalRecordOffBy1(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMedicalRecordOffBy1 != __evalNum))
         {
            __evalNumdMedicalRecordOffBy1 = __evalNum;
            __exprdMedicalRecordOffBy1 = getClueaMedicalRecordOffBy1(q, m);
         };
      return __exprdMedicalRecordOffBy1;
   };
   private boolean let163(PatientImpl q, PatientImpl m, int i, int j, long qid, long mid) throws java.lang.Exception {
      return ((qid != mid) && (Math.abs(qid - mid) <= 9)) && (qid > 10);
   };
   private boolean __exists162(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $408 = false;
      long $410 = 0;
      boolean z$411;
      for (int i = 0; i < q.ids.length; i = i + 1)
         {

            z$411 = false;
            if ((!$408))
               continue ;
            for (int j = 0; j < m.ids.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaMedicalRecordOffBySmallDifference;
   private boolean __expraMedicalRecordOffBySmallDifference;
   private boolean getClueaMedicalRecordOffBySmallDifference(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMedicalRecordOffBySmallDifference != __evalNum))
         {
            __evalNumaMedicalRecordOffBySmallDifference = __evalNum;
            __expraMedicalRecordOffBySmallDifference = (((!getClueaDiffVitalRecordOffBy1(q, m)) && (!getClueaMedicalRecordIds(q, m))) && (!getClueaMedicalRecordOffBy1(q, m))) && __exists162(q, m);
         };
      return __expraMedicalRecordOffBySmallDifference;
   };
   private boolean let165(PatientImpl q, PatientImpl m, int i, int j, long qid, long mid) throws java.lang.Exception {
      return (((qid != mid) && (Math.abs(qid - mid) > 9)) && (qid > 10)) && (EditDistance2.editDistance2(q.ids[i].patient_id_norm, m.ids[j].patient_id_norm) == 1);
   };
   private boolean __exists164(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $412 = false;
      long $414 = 0;
      boolean z$415;
      for (int i = 0; i < q.ids.length; i = i + 1)
         {

            z$415 = false;
            if ((!$412))
               continue ;
            for (int j = 0; j < m.ids.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaMedicalRecordSmallEditDistance;
   private boolean __expraMedicalRecordSmallEditDistance;
   private boolean getClueaMedicalRecordSmallEditDistance(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMedicalRecordSmallEditDistance != __evalNum))
         {
            __evalNumaMedicalRecordSmallEditDistance = __evalNum;
            __expraMedicalRecordSmallEditDistance = ((((!getClueaDiffVitalRecordOffBy1(q, m)) && (!getClueaMedicalRecordIds(q, m))) && (!getClueaMedicalRecordOffBy1(q, m))) && (!getClueaMedicalRecordOffBySmallDifference(q, m))) && __exists164(q, m);
         };
      return __expraMedicalRecordSmallEditDistance;
   };
   private boolean __exists166(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $416 = false;
      boolean $418 = false;
      boolean z$419;
      java.lang.String $420 = null;
      boolean z$421;
      for (int i = 0; i < q.ids.length; i = i + 1)
         {
            $416 = q.ids[i].__v_identifier_type;
            z$419 = false;
            z$421 = false;

               continue ;
            for (int j = 0; j < m.providers.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists167(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $422 = false;
      boolean $424 = false;
      boolean z$425;
      java.lang.String $426 = null;
      boolean z$427;
      for (int i = 0; i < q.providers.length; i = i + 1)
         {
            $422 = q.providers[i].__v_facility_id;
            z$425 = false;
            z$427 = false;

               continue ;
            for (int j = 0; j < m.ids.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaIdentifierTypeAndFacilityId;
   private boolean __expraIdentifierTypeAndFacilityId;
   private boolean getClueaIdentifierTypeAndFacilityId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaIdentifierTypeAndFacilityId != __evalNum))
         {
            __evalNumaIdentifierTypeAndFacilityId = __evalNum;
            __expraIdentifierTypeAndFacilityId = __exists166(q, m) || __exists167(q, m);
         };
      return __expraIdentifierTypeAndFacilityId;
   };
   private int __evalNummIdentifierTypeAndFacilityId;
   private boolean __exprmIdentifierTypeAndFacilityId;
   private boolean getCluemIdentifierTypeAndFacilityId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummIdentifierTypeAndFacilityId != __evalNum))
         {
            __evalNummIdentifierTypeAndFacilityId = __evalNum;
            __exprmIdentifierTypeAndFacilityId = getClueaIdentifierTypeAndFacilityId(q, m);
         };
      return __exprmIdentifierTypeAndFacilityId;
   };
   int[] mEventsDateAndTypeCounts = new int[1];
   private static int[] __mEventsDateAndTypeCounts__idx__number = {
      3, 
      2, 
      1, 
   };
   private boolean __exists169(PatientImpl q, PatientImpl m, int number, int i, int j) throws java.lang.Exception {
      for (int k = 0; k < q.names.length; k = k + 1)
         {
            if ((q.names[k].__v_dob && (DateUtils.daysApart(q.events[i].event_date, q.names[k].dob) < 4)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists170(PatientImpl q, PatientImpl m, int number, int i, int j) throws java.lang.Exception {
      for (int l = 0; l < m.names.length; l = l + 1)
         {
            if ((m.names[l].__v_dob && (DateUtils.daysApart(m.events[j].event_date, m.names[l].dob) < 4)))
               {
                  return true;
               };
         };
      return false;
   };
   private int __quant168(PatientImpl q, PatientImpl m, int number) throws java.lang.Exception {
      int __e = 0;
      __quant168l: for (int i = 0; i < q.events.length; i = i + 1)
         for (int j = 0; j < m.events.length; j = j + 1)
            if (((((((q.events[i].__v_event_date && m.events[j].__v_event_date) && q.events[i].__v_event_type_cd) && m.events[j].__v_event_type_cd) && q.events[i].event_date.equals(m.events[j].event_date)) && q.events[i].event_type_cd.equals(m.events[j].event_type_cd)) && ((!getClueaBirthday(q, m)) || ((!__exists169(q, m, number, i, j)) && (!__exists170(q, m, number, i, j))))))
               __e = __e + 1;
      return __e;
   };
   private int __evalNummEventsDateAndTypeCounts;
   private boolean __exprmEventsDateAndTypeCounts;
   private boolean getCluemEventsDateAndTypeCounts(PatientImpl q, PatientImpl m, int number) throws java.lang.Exception {
      if (true)
         {
            __evalNummEventsDateAndTypeCounts = __evalNum;
            __exprmEventsDateAndTypeCounts = (!((q.multi_birth_ind == 'Y') || (m.multi_birth_ind == 'Y'))) && (__quant168(q, m, number) >= number);
         };
      return __exprmEventsDateAndTypeCounts;
   };
   private long __quant171(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      long __e = Long.MAX_VALUE;
      __quant171l: for (int j = 0; j < q.events.length; j = j + 1)
         if ((q.events[j].__v_event_date && (DateUtils.getYear(q.events[j].event_date) >= 1980)))
            {
               long __v = q.events[j].event_date.getTime();
               if ((__v < __e))
                  __e = __v;
            };
      return __e;
   };
   private long __quant172(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      long __e = Long.MAX_VALUE;
      __quant172l: for (int i = 0; i < m.names.length; i = i + 1)
         if ((m.names[i].__v_dob && (DateUtils.getYear(m.names[i].dob) >= 1980)))
            {
               long __v = m.names[i].dob.getTime();
               if ((__v < __e))
                  __e = __v;
            };
      return __e;
   };
   private boolean let173(PatientImpl q, PatientImpl m, long minQEvent, long minMDob) throws java.lang.Exception {
      return ((minQEvent != Long.MAX_VALUE) && (minMDob != Long.MAX_VALUE)) && (minQEvent < minMDob);
   };
   private long __quant174(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      long __e = Long.MAX_VALUE;
      __quant174l: for (int j = 0; j < m.events.length; j = j + 1)
         if ((m.events[j].__v_event_date && (DateUtils.getYear(m.events[j].event_date) >= 1980)))
            {
               long __v = m.events[j].event_date.getTime();
               if ((__v < __e))
                  __e = __v;
            };
      return __e;
   };
   private long __quant175(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      long __e = Long.MAX_VALUE;
      __quant175l: for (int i = 0; i < q.names.length; i = i + 1)
         if ((q.names[i].__v_dob && (DateUtils.getYear(q.names[i].dob) >= 1980)))
            {
               long __v = q.names[i].dob.getTime();
               if ((__v < __e))
                  __e = __v;
            };
      return __e;
   };
   private boolean let176(PatientImpl q, PatientImpl m, long minMEvent, long minQDob) throws java.lang.Exception {
      return ((minMEvent != Long.MAX_VALUE) && (minQDob != Long.MAX_VALUE)) && (minMEvent < minQDob);
   };
   private int __evalNumaDiffSomeEventOfOnePreceedsAllBirthdaysOfOther;
   private boolean __expraDiffSomeEventOfOnePreceedsAllBirthdaysOfOther;
   private boolean getClueaDiffSomeEventOfOnePreceedsAllBirthdaysOfOther(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSomeEventOfOnePreceedsAllBirthdaysOfOther != __evalNum))
         {
            __evalNumaDiffSomeEventOfOnePreceedsAllBirthdaysOfOther = __evalNum;
            __expraDiffSomeEventOfOnePreceedsAllBirthdaysOfOther = let173(q, m, __quant171(q, m), __quant172(q, m)) || let176(q, m, __quant174(q, m), __quant175(q, m));
         };
      return __expraDiffSomeEventOfOnePreceedsAllBirthdaysOfOther;
   };
   private int __evalNumdEventPreceedsBirthAndDistinctBirths;
   private boolean __exprdEventPreceedsBirthAndDistinctBirths;
   private boolean getCluedEventPreceedsBirthAndDistinctBirths(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdEventPreceedsBirthAndDistinctBirths != __evalNum))
         {
            __evalNumdEventPreceedsBirthAndDistinctBirths = __evalNum;
            __exprdEventPreceedsBirthAndDistinctBirths = ((!getClueaBirthday(q, m)) && (!approximateMatchingDobs)) && getClueaDiffSomeEventOfOnePreceedsAllBirthdaysOfOther(q, m);
         };
      return __exprdEventPreceedsBirthAndDistinctBirths;
   };
   private int __evalNumdEventPreceedsBirthAndApproxBirths;
   private boolean __exprdEventPreceedsBirthAndApproxBirths;
   private boolean getCluedEventPreceedsBirthAndApproxBirths(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdEventPreceedsBirthAndApproxBirths != __evalNum))
         {
            __evalNumdEventPreceedsBirthAndApproxBirths = __evalNum;
            __exprdEventPreceedsBirthAndApproxBirths = ((!getClueaBirthday(q, m)) && approximateMatchingDobs) && getClueaDiffSomeEventOfOnePreceedsAllBirthdaysOfOther(q, m);
         };
      return __exprdEventPreceedsBirthAndApproxBirths;
   };
   private int __evalNumdEventPreceedsBirthAndSameBirths;
   private boolean __exprdEventPreceedsBirthAndSameBirths;
   private boolean getCluedEventPreceedsBirthAndSameBirths(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdEventPreceedsBirthAndSameBirths != __evalNum))
         {
            __evalNumdEventPreceedsBirthAndSameBirths = __evalNum;
            __exprdEventPreceedsBirthAndSameBirths = getClueaBirthday(q, m) && getClueaDiffSomeEventOfOnePreceedsAllBirthdaysOfOther(q, m);
         };
      return __exprdEventPreceedsBirthAndSameBirths;
   };
   private boolean __all178(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int k = 0; k < q.names.length; k = k + 1)
         {
            if ((!((!q.names[k].__v_dob) || (!q.events[i].event_date.equals(q.names[k].dob)))))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all179(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int k = 0; k < m.names.length; k = k + 1)
         {
            if ((!((!m.names[k].__v_dob) || (!m.events[j].event_date.equals(m.names[k].dob)))))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __exists177(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $428 = false;
      boolean $430 = false;
      boolean z$431;
      java.lang.String $432 = null;
      boolean z$433;
      java.util.Date $434 = null;
      boolean z$435;
      java.util.Date $436 = null;
      boolean z$437;
      for (int i = 0; i < q.events.length; i = i + 1)
         {
            $428 = q.events[i].__v_event_date;
            z$431 = false;
            z$433 = false;
            z$435 = false;
            z$437 = false;
            if ((!($428 && (((!z$431) && (z$431 = true)) ?(($430 = q.events[i].__v_event_type_cd)) : ($430)))))
               continue ;
            for (int j = 0; j < m.events.length; j = j + 1)
               {
                  if ((((((((($428 && m.events[j].__v_event_date) && (((!z$431) && (z$431 = true)) ?(($430 = q.events[i].__v_event_type_cd)) : ($430))) && m.events[j].__v_event_type_cd) && (((!z$433) && (z$433 = true)) ?(($432 = q.events[i].event_type_cd)) : ($432)).equals(m.events[j].event_type_cd)) && (!(((!z$435) && (z$435 = true)) ?(($434 = q.events[i].event_date)) : ($434)).equals(m.events[j].event_date))) && (DateUtils.daysApart(((!z$437) && (z$437 = true)) ?(($436 = q.events[i].event_date)) : ($436), m.events[j].event_date) < 24)) && __all178(q, m, i, j)) && __all179(q, m, i, j)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffEventsOfSameTypeWithin24Days;
   private boolean __expraDiffEventsOfSameTypeWithin24Days;
   private boolean getClueaDiffEventsOfSameTypeWithin24Days(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffEventsOfSameTypeWithin24Days != __evalNum))
         {
            __evalNumaDiffEventsOfSameTypeWithin24Days = __evalNum;
            __expraDiffEventsOfSameTypeWithin24Days = __exists177(q, m);
         };
      return __expraDiffEventsOfSameTypeWithin24Days;
   };
   private int __evalNumdEventsOfSameTypeWithin24Days;
   private boolean __exprdEventsOfSameTypeWithin24Days;
   private boolean getCluedEventsOfSameTypeWithin24Days(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdEventsOfSameTypeWithin24Days != __evalNum))
         {
            __evalNumdEventsOfSameTypeWithin24Days = __evalNum;
            __exprdEventsOfSameTypeWithin24Days = getClueaDiffEventsOfSameTypeWithin24Days(q, m);
         };
      return __exprdEventsOfSameTypeWithin24Days;
   };
   private boolean __exists180(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $438 = false;
      boolean $440 = false;
      boolean z$441;
      java.lang.String $442 = null;
      boolean z$443;
      boolean $444 = false;
      boolean z$445;
      java.lang.String $446 = null;
      boolean z$447;
      for (int i = 0; i < q.events.length; i = i + 1)
         {
            $438 = q.events[i].__v_event_type_cd && q.events[i].event_type_cd.equals("LEAD");
            z$441 = false;
            z$443 = false;
            z$445 = false;
            z$447 = false;
            if ((!($438 && (((!z$441) && (z$441 = true)) ?(($440 = q.events[i].__v_event_id)) : ($440)))))
               continue ;
            for (int j = 0; j < m.events.length; j = j + 1)
               {
                  if (((((($438 && (m.events[j].__v_event_type_cd && m.events[j].event_type_cd.equals("LEAD"))) && ((((!z$441) && (z$441 = true)) ?(($440 = q.events[i].__v_event_id)) : ($440)) && m.events[j].__v_event_id)) && (!(((!z$443) && (z$443 = true)) ?(($442 = q.events[i].event_id)) : ($442)).equals(m.events[j].event_id))) && ((q.events[i].__v_event_date && m.events[j].__v_event_date) ?(boolean)(q.events[i].event_date.equals(m.events[j].event_date)) : (boolean)(((q.events[i].__v_lab_date && m.events[j].__v_lab_date) && q.events[i].lab_date.equals(m.events[j].lab_date))))) && ((!((((!z$445) && (z$445 = true)) ?(($444 = q.events[i].__v_facility_id)) : ($444)) && m.events[j].__v_facility_id)) || (((!z$447) && (z$447 = true)) ?(($446 = q.events[i].facility_id)) : ($446)).equals(m.events[j].facility_id))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffLeadReports;
   private boolean __expraDiffLeadReports;
   private boolean getClueaDiffLeadReports(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffLeadReports != __evalNum))
         {
            __evalNumaDiffLeadReports = __evalNum;
            __expraDiffLeadReports = __exists180(q, m);
         };
      return __expraDiffLeadReports;
   };
   private int __evalNumdLeadReports;
   private boolean __exprdLeadReports;
   private boolean getCluedLeadReports(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdLeadReports != __evalNum))
         {
            __evalNumdLeadReports = __evalNum;
            __exprdLeadReports = getClueaDiffLeadReports(q, m);
         };
      return __exprdLeadReports;
   };
   private boolean __exists181(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $448 = false;
      long $450 = 0;
      boolean z$451;
      for (int i = 0; i < q.events.length; i = i + 1)
         {
            $448 = q.events[i].__v_event_id && (StringUtils.countDigits(q.events[i].event_id) >= 3);
            z$451 = false;
            if ((!$448))
               continue ;
            for (int j = 0; j < m.events.length; j = j + 1)
               {
                  if ((($448 && (m.events[j].__v_event_id && (StringUtils.countDigits(m.events[j].event_id) >= 3))) && (abs(((!z$451) && (z$451 = true)) ?(($450 = Long.parseLong(StringUtils.removeNonDigitsMaxLength(q.events[i].event_id, 18)))) : ($450), Long.parseLong(StringUtils.removeNonDigitsMaxLength(m.events[j].event_id, 18))) == 1)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffSequentialEventIds;
   private boolean __expraDiffSequentialEventIds;
   private boolean getClueaDiffSequentialEventIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSequentialEventIds != __evalNum))
         {
            __evalNumaDiffSequentialEventIds = __evalNum;
            __expraDiffSequentialEventIds = __exists181(q, m);
         };
      return __expraDiffSequentialEventIds;
   };
   private int __evalNumdSequentialEventIds;
   private boolean __exprdSequentialEventIds;
   private boolean getCluedSequentialEventIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSequentialEventIds != __evalNum))
         {
            __evalNumdSequentialEventIds = __evalNum;
            __exprdSequentialEventIds = getClueaDiffSequentialEventIds(q, m);
         };
      return __exprdSequentialEventIds;
   };
   private boolean __exists182(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $452 = false;
      java.util.Date $454 = null;
      boolean z$455;
      java.lang.String $456 = null;
      boolean z$457;
      java.lang.String $458 = null;
      boolean z$459;
      for (int __i0 = 0; __i0 < q.events.length; __i0 = __i0 + 1)
         {
            $452 = (q.events[__i0].__v_event_date && q.events[__i0].__v_facility_id) && q.events[__i0].__v_event_id;
            z$455 = false;
            z$457 = false;
            z$459 = false;
            if ((!$452))
               continue ;
            for (int __j0 = 0; __j0 < m.events.length; __j0 = __j0 + 1)
               {
                  if ((($452 && ((m.events[__j0].__v_event_date && m.events[__j0].__v_facility_id) && m.events[__j0].__v_event_id)) && ((m.events[__j0].event_date.equals(((!z$455) && (z$455 = true)) ?(($454 = q.events[__i0].event_date)) : ($454)) && m.events[__j0].facility_id.equals(((!z$457) && (z$457 = true)) ?(($456 = q.events[__i0].facility_id)) : ($456))) && m.events[__j0].event_id.equals(((!z$459) && (z$459 = true)) ?(($458 = q.events[__i0].event_id)) : ($458)))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaEventDateFacilityAndId;
   private boolean __expraEventDateFacilityAndId;
   private boolean getClueaEventDateFacilityAndId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaEventDateFacilityAndId != __evalNum))
         {
            __evalNumaEventDateFacilityAndId = __evalNum;
            __expraEventDateFacilityAndId = __exists182(q, m);
         };
      return __expraEventDateFacilityAndId;
   };
   private int __evalNummEventDateFacilityAndId;
   private boolean __exprmEventDateFacilityAndId;
   private boolean getCluemEventDateFacilityAndId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummEventDateFacilityAndId != __evalNum))
         {
            __evalNummEventDateFacilityAndId = __evalNum;
            __exprmEventDateFacilityAndId = getClueaEventDateFacilityAndId(q, m);
         };
      return __exprmEventDateFacilityAndId;
   };
   private boolean __exists183(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $460 = false;
      java.lang.String $462 = null;
      boolean z$463;
      for (int __i0 = 0; __i0 < q.events.length; __i0 = __i0 + 1)
         {
            $460 = q.events[__i0].__v_event_id;
            z$463 = false;
            if ((!$460))
               continue ;
            for (int __j0 = 0; __j0 < m.events.length; __j0 = __j0 + 1)
               {
                  if ((($460 && m.events[__j0].__v_event_id) && m.events[__j0].event_id.equals(((!z$463) && (z$463 = true)) ?(($462 = q.events[__i0].event_id)) : ($462))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaEventIds;
   private boolean __expraEventIds;
   private boolean getClueaEventIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaEventIds != __evalNum))
         {
            __evalNumaEventIds = __evalNum;
            __expraEventIds = (!getClueaEventDateFacilityAndId(q, m)) && __exists183(q, m);
         };
      return __expraEventIds;
   };
   private int __evalNummEventIds;
   private boolean __exprmEventIds;
   private boolean getCluemEventIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummEventIds != __evalNum))
         {
            __evalNummEventIds = __evalNum;
            __exprmEventIds = getClueaEventIds(q, m);
         };
      return __exprmEventIds;
   };
   private boolean __exists184(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $464 = false;
      java.util.Date $466 = null;
      boolean z$467;
      for (int __i0 = 0; __i0 < q.events.length; __i0 = __i0 + 1)
         {
            $464 = q.events[__i0].__v_event_date;
            z$467 = false;
            if ((!$464))
               continue ;
            for (int __j0 = 0; __j0 < m.events.length; __j0 = __j0 + 1)
               {
                  if ((($464 && m.events[__j0].__v_event_date) && m.events[__j0].event_date.equals(((!z$467) && (z$467 = true)) ?(($466 = q.events[__i0].event_date)) : ($466))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaObsoleteEventDate;
   private boolean __expraObsoleteEventDate;
   private boolean getClueaObsoleteEventDate(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaObsoleteEventDate != __evalNum))
         {
            __evalNumaObsoleteEventDate = __evalNum;
            __expraObsoleteEventDate = ((!(((((0 <= mEventsDateAndTypeCounts[0]) && (2 >= mEventsDateAndTypeCounts[0])) || getClueaDiffEventsOfSameTypeWithin24Days(q, m)) || getClueaDiffLeadReports(q, m)) || getClueaDiffSequentialEventIds(q, m))) && (!((q.multi_birth_ind == 'Y') || (m.multi_birth_ind == 'Y')))) && __exists184(q, m);
         };
      return __expraObsoleteEventDate;
   };
   private boolean __exists185(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $468 = false;
      java.util.Date $470 = null;
      boolean z$471;
      java.util.Date $472 = null;
      boolean z$473;
      java.util.Date $474 = null;
      boolean $476 = false;
      boolean z$477;
      java.util.Date $478 = null;
      boolean z$479;
      java.util.Date $480 = null;
      for (int i = 0; i < q.events.length; i = i + 1)
         {
            $468 = q.events[i].__v_event_date;
            z$471 = false;
            z$473 = false;
            if ((!$468))
               continue ;
            for (int j = 0; j < m.events.length; j = j + 1)
               {
                  $474 = m.events[j].event_date;
                  z$477 = false;
                  z$479 = false;
                  if ((!(((!z$477) && (z$477 = true)) ?(($476 = $468 && m.events[j].__v_event_date)) : ($476))))
                     continue ;
                  for (int k = 0; k < q.names.length; k = k + 1)
                     {
                        $480 = q.names[k].dob;
                        for (int l = 0; l < m.names.length; l = l + 1)
                           {
                              if ((((((!z$477) && (z$477 = true)) ?(($476 = $468 && m.events[j].__v_event_date)) : ($476)) && (((!z$471) && (z$471 = true)) ?(($470 = q.events[i].event_date)) : ($470)).equals($474)) && (!((((!z$473) && (z$473 = true)) ?(($472 = q.events[i].event_date)) : ($472)).equals($480) || (((!z$479) && (z$479 = true)) ?(($478 = m.events[j].event_date)) : ($478)).equals(m.names[l].dob)))))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private int __evalNummEventDate;
   private boolean __exprmEventDate;
   private boolean getCluemEventDate(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummEventDate != __evalNum))
         {
            __evalNummEventDate = __evalNum;
            __exprmEventDate = ((!(((((0 <= mEventsDateAndTypeCounts[0]) && (2 >= mEventsDateAndTypeCounts[0])) || getClueaDiffEventsOfSameTypeWithin24Days(q, m)) || getClueaDiffLeadReports(q, m)) || getClueaDiffSequentialEventIds(q, m))) && (!((q.multi_birth_ind == 'Y') || (m.multi_birth_ind == 'Y')))) && __exists185(q, m);
         };
      return __exprmEventDate;
   };
   private boolean __exists187(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int k = 0; k < m.names.length; k = k + 1)
         {
            if (((m.names[k].__v_dob && m.names[k].dob.before(q.names[i].dob)) && (DateUtils.daysApart(q.names[i].dob, m.names[k].dob) < (15 * 365))))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists186(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $482 = false;
      java.util.Date $484 = null;
      boolean z$485;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $482 = q.names[i].__v_dob;
            z$485 = false;
            if ((!$482))
               continue ;
            for (int j = 0; j < q.events.length; j = j + 1)
               {
                  if ((((($482 && q.events[j].__v_event_date) && (((!z$485) && (z$485 = true)) ?(($484 = q.names[i].dob)) : ($484)).equals(q.events[j].event_date)) && "LEAD".equals(q.events[j].event_type_cd)) && __exists187(q, m, i, j)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists189(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int k = 0; k < q.names.length; k = k + 1)
         {
            if (((q.names[k].__v_dob && q.names[k].dob.before(m.names[i].dob)) && (DateUtils.daysApart(m.names[i].dob, q.names[k].dob) < (15 * 365))))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists188(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $486 = false;
      java.util.Date $488 = null;
      boolean z$489;
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            $486 = m.names[i].__v_dob;
            z$489 = false;
            if ((!$486))
               continue ;
            for (int j = 0; j < m.events.length; j = j + 1)
               {
                  if ((((($486 && m.events[j].__v_event_date) && (((!z$489) && (z$489 = true)) ?(($488 = m.names[i].dob)) : ($488)).equals(m.events[j].event_date)) && "LEAD".equals(m.events[j].event_type_cd)) && __exists189(q, m, i, j)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaLeadDateReportedAsDob;
   private boolean __expraLeadDateReportedAsDob;
   private boolean getClueaLeadDateReportedAsDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaLeadDateReportedAsDob != __evalNum))
         {
            __evalNumaLeadDateReportedAsDob = __evalNum;
            __expraLeadDateReportedAsDob = (!getClueaBirthday(q, m)) && (__exists186(q, m) || __exists188(q, m));
         };
      return __expraLeadDateReportedAsDob;
   };
   private int __evalNummLeadDateReportedAsDob;
   private boolean __exprmLeadDateReportedAsDob;
   private boolean getCluemLeadDateReportedAsDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummLeadDateReportedAsDob != __evalNum))
         {
            __evalNummLeadDateReportedAsDob = __evalNum;
            __exprmLeadDateReportedAsDob = getClueaLeadDateReportedAsDob(q, m);
         };
      return __exprmLeadDateReportedAsDob;
   };
   private int __evalNumaNotSiblings;
   private boolean __expraNotSiblings;
   private boolean getClueaNotSiblings(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaNotSiblings != __evalNum))
         {
            __evalNumaNotSiblings = __evalNum;
            __expraNotSiblings = ((!getClueaDiffVitalRecordId(q, m)) && (!(getClueaDiffSex(q, m) || getClueaDiffSexPossiblyTypo(q, m)))) && (getClueaPatientNamesFirst(q, m) || (((q.multi_birth_ind != 'Y') && (m.multi_birth_ind != 'Y')) && approximateFirstNameMatch));
         };
      return __expraNotSiblings;
   };
   private boolean __exists190(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $490 = false;
      java.lang.String $492 = null;
      boolean z$493;
      for (int __i0 = 0; __i0 < q.providers.length; __i0 = __i0 + 1)
         {
            $490 = q.providers[__i0].__v_provider_id;
            z$493 = false;
            if ((!$490))
               continue ;
            for (int __j0 = 0; __j0 < m.providers.length; __j0 = __j0 + 1)
               {
                  if ((($490 && m.providers[__j0].__v_provider_id) && m.providers[__j0].provider_id.equals(((!z$493) && (z$493 = true)) ?(($492 = q.providers[__i0].provider_id)) : ($492))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaProviderId;
   private boolean __expraProviderId;
   private boolean getClueaProviderId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaProviderId != __evalNum))
         {
            __evalNumaProviderId = __evalNum;
            __expraProviderId = getClueaNotSiblings(q, m) && __exists190(q, m);
         };
      return __expraProviderId;
   };
   private int __evalNummProviderId;
   private boolean __exprmProviderId;
   private boolean getCluemProviderId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummProviderId != __evalNum))
         {
            __evalNummProviderId = __evalNum;
            __exprmProviderId = getClueaProviderId(q, m);
         };
      return __exprmProviderId;
   };
   private int __evalNummBin;
   private boolean __exprmBin;
   private boolean getCluemBin(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummBin != __evalNum))
         {
            __evalNummBin = __evalNum;
            __exprmBin = getClueaBin(q, m);
         };
      return __exprmBin;
   };
   private boolean __exists191(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            if (q.address[i].__v_street_name)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists192(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $494 = null;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $494 = q.address[i].rel;
            for (int j = 0; j < q.address[i].rel.length; j = j + 1)
               {
                  if ($494[j].__v_parsedStreetName)
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists193(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            if (m.address[i].__v_street_name)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists194(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $496 = null;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $496 = m.address[i].rel;
            for (int j = 0; j < m.address[i].rel.length; j = j + 1)
               {
                  if ($496[j].__v_parsedStreetName)
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean areValidStreetNames;
   private int __evalNummPoBox;
   private boolean __exprmPoBox;
   private boolean getCluemPoBox(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummPoBox != __evalNum))
         {
            __evalNummPoBox = __evalNum;
            __exprmPoBox = getClueaPoBox(q, m);
         };
      return __exprmPoBox;
   };
   private int __evalNummStreetName;
   private boolean __exprmStreetName;
   private boolean getCluemStreetName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummStreetName != __evalNum))
         {
            __evalNummStreetName = __evalNum;
            __exprmStreetName = getClueaStreetName(q, m);
         };
      return __exprmStreetName;
   };
   private int __evalNummStreetNameDigits;
   private boolean __exprmStreetNameDigits;
   private boolean getCluemStreetNameDigits(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummStreetNameDigits != __evalNum))
         {
            __evalNummStreetNameDigits = __evalNum;
            __exprmStreetNameDigits = getClueaStreetNameDigits(q, m);
         };
      return __exprmStreetNameDigits;
   };
   private boolean __exists195(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $498 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $500 = null;
      boolean z$501;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $502 = null;
      boolean z$503;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $504 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $506 = null;
      boolean z$507;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $508 = null;
      boolean z$509;
      boolean $510 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $498 = q.address[i].rel;
            z$501 = false;
            z$503 = false;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  $504 = m.address[j].rel;
                  z$507 = false;
                  z$509 = false;
                  for (int k = 0; k < q.address[i].rel.length; k = k + 1)
                     {
                        $510 = $498[k].__v_parsedStreetName;
                        if ((!$510))
                           continue ;
                        for (int l = 0; l < m.address[j].rel.length; l = l + 1)
                           {
                              if (((($510 && $504[l].__v_parsedStreetName) && (((((!z$501) && (z$501 = true)) ?(($500 = q.address[i].rel)) : ($500))[k].parsedStreetName.length() >= 4) && ((((!z$507) && (z$507 = true)) ?(($506 = m.address[j].rel)) : ($506))[l].parsedStreetName.length() >= 4))) && StringUtils.overlap((((!z$503) && (z$503 = true)) ?(($502 = q.address[i].rel)) : ($502))[k].parsedStreetName, (((!z$509) && (z$509 = true)) ?(($508 = m.address[j].rel)) : ($508))[l].parsedStreetName)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private int __evalNumaStreetNameOverlap;
   private boolean __expraStreetNameOverlap;
   private boolean getClueaStreetNameOverlap(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaStreetNameOverlap != __evalNum))
         {
            __evalNumaStreetNameOverlap = __evalNum;
            __expraStreetNameOverlap = (!(((getClueaBin(q, m) || getClueaPoBox(q, m)) || getClueaStreetName(q, m)) || getClueaStreetNameDigits(q, m))) && __exists195(q, m);
         };
      return __expraStreetNameOverlap;
   };
   private int __evalNummStreetNameOverlap;
   private boolean __exprmStreetNameOverlap;
   private boolean getCluemStreetNameOverlap(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummStreetNameOverlap != __evalNum))
         {
            __evalNummStreetNameOverlap = __evalNum;
            __exprmStreetNameOverlap = getClueaStreetNameOverlap(q, m);
         };
      return __exprmStreetNameOverlap;
   };
   private boolean __exists196(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $512 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $514 = null;
      boolean z$515;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $516 = null;
      boolean z$517;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $518 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $520 = null;
      boolean z$521;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $522 = null;
      boolean z$523;
      boolean $524 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $512 = q.address[i].rel;
            z$515 = false;
            z$517 = false;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  $518 = m.address[j].rel;
                  z$521 = false;
                  z$523 = false;
                  for (int k = 0; k < q.address[i].rel.length; k = k + 1)
                     {
                        $524 = $512[k].__v_parsedStreetName;
                        if ((!$524))
                           continue ;
                        for (int l = 0; l < m.address[j].rel.length; l = l + 1)
                           {
                              if (((($524 && $518[l].__v_parsedStreetName) && (((((!z$515) && (z$515 = true)) ?(($514 = q.address[i].rel)) : ($514))[k].parsedStreetName.length() >= 6) && ((((!z$521) && (z$521 = true)) ?(($520 = m.address[j].rel)) : ($520))[l].parsedStreetName.length() >= 6))) && (EditDistance2.editDistance2((((!z$517) && (z$517 = true)) ?(($516 = q.address[i].rel)) : ($516))[k].parsedStreetName, (((!z$523) && (z$523 = true)) ?(($522 = m.address[j].rel)) : ($522))[l].parsedStreetName, 1) < 2)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private boolean __exists197(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $526 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $528 = null;
      boolean z$529;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $530 = null;
      boolean z$531;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $532 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $534 = null;
      boolean z$535;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $536 = null;
      boolean z$537;
      boolean $538 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $526 = q.address[i].rel;
            z$529 = false;
            z$531 = false;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  $532 = m.address[j].rel;
                  z$535 = false;
                  z$537 = false;
                  for (int k = 0; k < q.address[i].rel.length; k = k + 1)
                     {
                        $538 = $526[k].__v_parsedStreetName;
                        if ((!$538))
                           continue ;
                        for (int l = 0; l < m.address[j].rel.length; l = l + 1)
                           {
                              if (((($538 && $532[l].__v_parsedStreetName) && (((((!z$529) && (z$529 = true)) ?(($528 = q.address[i].rel)) : ($528))[k].parsedStreetName.length() >= 6) && ((((!z$535) && (z$535 = true)) ?(($534 = m.address[j].rel)) : ($534))[l].parsedStreetName.length() >= 6))) && (Jaro.jaro((((!z$531) && (z$531 = true)) ?(($530 = q.address[i].rel)) : ($530))[k].parsedStreetName, (((!z$537) && (z$537 = true)) ?(($536 = m.address[j].rel)) : ($536))[l].parsedStreetName) >= 0.9F)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private int __evalNumaStreetNameApprox;
   private boolean __expraStreetNameApprox;
   private boolean getClueaStreetNameApprox(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaStreetNameApprox != __evalNum))
         {
            __evalNumaStreetNameApprox = __evalNum;
            __expraStreetNameApprox = (!((((getClueaBin(q, m) || getClueaPoBox(q, m)) || getClueaStreetName(q, m)) || getClueaStreetNameDigits(q, m)) || getClueaStreetNameOverlap(q, m))) && (__exists196(q, m) || __exists197(q, m));
         };
      return __expraStreetNameApprox;
   };
   private int __evalNummStreetNameApprox;
   private boolean __exprmStreetNameApprox;
   private boolean getCluemStreetNameApprox(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummStreetNameApprox != __evalNum))
         {
            __evalNummStreetNameApprox = __evalNum;
            __exprmStreetNameApprox = getClueaStreetNameApprox(q, m);
         };
      return __exprmStreetNameApprox;
   };
   private boolean approxMatchingStreetNames;
   private boolean __swap198(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         if (q.address[__i0].__v_house_no)
            __lacc.add(StringUtils.removeNonDigitsLetters(q.address[__i0].house_no));
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_parsedHouseNumber)
               __lacc.add(q.address[__i0].rel[__i1].parsedHouseNumber);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         if (m.address[__j0].__v_house_no)
            __lacc.add(StringUtils.removeNonDigitsLetters(m.address[__j0].house_no));
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_parsedHouseNumber)
               __lacc.add(m.address[__j0].rel[__j1].parsedHouseNumber);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 0);
   };
   private int __evalNumaHouseNumber;
   private boolean __expraHouseNumber;
   private boolean getClueaHouseNumber(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaHouseNumber != __evalNum))
         {
            __evalNumaHouseNumber = __evalNum;
            __expraHouseNumber = (!getClueaBin(q, m)) && __swap198(q, m);
         };
      return __expraHouseNumber;
   };
   private int __evalNummHouseNumber;
   private boolean __exprmHouseNumber;
   private boolean getCluemHouseNumber(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummHouseNumber != __evalNum))
         {
            __evalNummHouseNumber = __evalNum;
            __exprmHouseNumber = getClueaHouseNumber(q, m);
         };
      return __exprmHouseNumber;
   };
   private boolean __exists199(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $540 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $542 = null;
      boolean z$543;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $544 = null;
      boolean z$545;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $546 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $548 = null;
      boolean z$549;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $550 = null;
      boolean z$551;
      boolean $552 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $540 = q.address[i].rel;
            z$543 = false;
            z$545 = false;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  $546 = m.address[j].rel;
                  z$549 = false;
                  z$551 = false;
                  for (int k = 0; k < q.address[i].rel.length; k = k + 1)
                     {
                        $552 = $540[k].__v_parsedHouseNumber;
                        if ((!$552))
                           continue ;
                        for (int l = 0; l < m.address[j].rel.length; l = l + 1)
                           {
                              if (((($552 && $546[l].__v_parsedHouseNumber) && (((((!z$543) && (z$543 = true)) ?(($542 = q.address[i].rel)) : ($542))[k].parsedHouseNumber.length() >= 2) && ((((!z$549) && (z$549 = true)) ?(($548 = m.address[j].rel)) : ($548))[l].parsedHouseNumber.length() >= 2))) && StringUtils.overlap((((!z$545) && (z$545 = true)) ?(($544 = q.address[i].rel)) : ($544))[k].parsedHouseNumber, (((!z$551) && (z$551 = true)) ?(($550 = m.address[j].rel)) : ($550))[l].parsedHouseNumber)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private int __evalNumaHouseNumberOverlap;
   private boolean __expraHouseNumberOverlap;
   private boolean getClueaHouseNumberOverlap(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaHouseNumberOverlap != __evalNum))
         {
            __evalNumaHouseNumberOverlap = __evalNum;
            __expraHouseNumberOverlap = ((!(getClueaBin(q, m) || getClueaHouseNumber(q, m))) && (getClueaStreetName(q, m) || approxMatchingStreetNames)) && __exists199(q, m);
         };
      return __expraHouseNumberOverlap;
   };
   private int __evalNummHouseNumberOverlap;
   private boolean __exprmHouseNumberOverlap;
   private boolean getCluemHouseNumberOverlap(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummHouseNumberOverlap != __evalNum))
         {
            __evalNummHouseNumberOverlap = __evalNum;
            __exprmHouseNumberOverlap = getClueaHouseNumberOverlap(q, m);
         };
      return __exprmHouseNumberOverlap;
   };
   private boolean __exists200(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $554 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $556 = null;
      boolean z$557;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $558 = null;
      boolean z$559;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $560 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $562 = null;
      boolean z$563;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $564 = null;
      boolean z$565;
      boolean $566 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $554 = q.address[i].rel;
            z$557 = false;
            z$559 = false;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  $560 = m.address[j].rel;
                  z$563 = false;
                  z$565 = false;
                  for (int k = 0; k < q.address[i].rel.length; k = k + 1)
                     {
                        $566 = $554[k].__v_parsedHouseNumber;
                        if ((!$566))
                           continue ;
                        for (int l = 0; l < m.address[j].rel.length; l = l + 1)
                           {
                              if (((($566 && $560[l].__v_parsedHouseNumber) && (((((!z$557) && (z$557 = true)) ?(($556 = q.address[i].rel)) : ($556))[k].parsedHouseNumber.length() >= 2) && ((((!z$563) && (z$563 = true)) ?(($562 = m.address[j].rel)) : ($562))[l].parsedHouseNumber.length() >= 2))) && (EditDistance2.editDistance2((((!z$559) && (z$559 = true)) ?(($558 = q.address[i].rel)) : ($558))[k].parsedHouseNumber, (((!z$565) && (z$565 = true)) ?(($564 = m.address[j].rel)) : ($564))[l].parsedHouseNumber) < 2)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private int __evalNumrHouseNumberEditDistance;
   private boolean __exprrHouseNumberEditDistance;
   private boolean getCluerHouseNumberEditDistance(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrHouseNumberEditDistance != __evalNum))
         {
            __evalNumrHouseNumberEditDistance = __evalNum;
            __exprrHouseNumberEditDistance = ((!((getClueaBin(q, m) || getClueaHouseNumber(q, m)) || getClueaHouseNumberOverlap(q, m))) && (getClueaStreetName(q, m) || approxMatchingStreetNames)) && __exists200(q, m);
         };
      return __exprrHouseNumberEditDistance;
   };
   private boolean __swap201(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_parsedApartment)
               __lacc.add(q.address[__i0].rel[__i1].parsedApartment);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_cleanAptNo)
               __lacc.add(q.address[__i0].rel[__i1].cleanAptNo);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_parsedApartment)
               __lacc.add(m.address[__j0].rel[__j1].parsedApartment);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_cleanAptNo)
               __lacc.add(m.address[__j0].rel[__j1].cleanAptNo);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 0);
   };
   private int __evalNumaApartment;
   private boolean __expraApartment;
   private boolean getClueaApartment(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaApartment != __evalNum))
         {
            __evalNumaApartment = __evalNum;
            __expraApartment = (((((getClueaBin(q, m) || getClueaStreetName(q, m)) || getClueaStreetNameOverlap(q, m)) || getClueaStreetNameApprox(q, m)) || getClueaHouseNumber(q, m)) || getClueaHouseNumberOverlap(q, m)) && __swap201(q, m);
         };
      return __expraApartment;
   };
   private int __evalNummApartment;
   private boolean __exprmApartment;
   private boolean getCluemApartment(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummApartment != __evalNum))
         {
            __evalNummApartment = __evalNum;
            __exprmApartment = getClueaApartment(q, m);
         };
      return __exprmApartment;
   };
   private boolean __swap202(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_parsedHouseNumber)
               __lacc.add(q.address[__i0].rel[__i1].parsedHouseNumber);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_cleanAptNo)
               __lacc.add(q.address[__i0].rel[__i1].cleanAptNo);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_parsedHouseNumber)
               __lacc.add(m.address[__j0].rel[__j1].parsedHouseNumber);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_cleanAptNo)
               __lacc.add(m.address[__j0].rel[__j1].cleanAptNo);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaHouseNumberApartmentSwap;
   private boolean __expraHouseNumberApartmentSwap;
   private boolean getClueaHouseNumberApartmentSwap(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaHouseNumberApartmentSwap != __evalNum))
         {
            __evalNumaHouseNumberApartmentSwap = __evalNum;
            __expraHouseNumberApartmentSwap = (!((getClueaBin(q, m) || getClueaHouseNumber(q, m)) || getClueaApartment(q, m))) && __swap202(q, m);
         };
      return __expraHouseNumberApartmentSwap;
   };
   private int __evalNummHouseNumberApartmentSwap;
   private boolean __exprmHouseNumberApartmentSwap;
   private boolean getCluemHouseNumberApartmentSwap(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummHouseNumberApartmentSwap != __evalNum))
         {
            __evalNummHouseNumberApartmentSwap = __evalNum;
            __exprmHouseNumberApartmentSwap = getClueaHouseNumberApartmentSwap(q, m);
         };
      return __exprmHouseNumberApartmentSwap;
   };
   private boolean __exists203(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $568 = false;
      java.lang.String $570 = null;
      boolean z$571;
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         {
            $568 = q.address[__i0].__v_zipcode;
            z$571 = false;
            if ((!$568))
               continue ;
            for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
               {
                  if ((($568 && m.address[__j0].__v_zipcode) && m.address[__j0].zipcode.equals(((!z$571) && (z$571 = true)) ?(($570 = q.address[__i0].zipcode)) : ($570))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaZip;
   private boolean __expraZip;
   private boolean getClueaZip(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaZip != __evalNum))
         {
            __evalNumaZip = __evalNum;
            __expraZip = (!getClueaBin(q, m)) && __exists203(q, m);
         };
      return __expraZip;
   };
   private int __evalNummZip;
   private boolean __exprmZip;
   private boolean getCluemZip(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummZip != __evalNum))
         {
            __evalNummZip = __evalNum;
            __exprmZip = getClueaZip(q, m);
         };
      return __exprmZip;
   };
   private boolean __exists204(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $572 = false;
      java.lang.String $574 = null;
      boolean z$575;
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         {
            $572 = q.address[__i0].__v_zipcode && (q.address[__i0].zipcode.length() >= 3);
            z$575 = false;
            if ((!$572))
               continue ;
            for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
               {
                  if ((($572 && (m.address[__j0].__v_zipcode && (m.address[__j0].zipcode.length() >= 3))) && m.address[__j0].zipcode.substring(0, 3).equals(((!z$575) && (z$575 = true)) ?(($574 = q.address[__i0].zipcode.substring(0, 3))) : ($574))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaZip3Digits;
   private boolean __expraZip3Digits;
   private boolean getClueaZip3Digits(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaZip3Digits != __evalNum))
         {
            __evalNumaZip3Digits = __evalNum;
            __expraZip3Digits = ((!getClueaBin(q, m)) && (!getClueaZip(q, m))) && __exists204(q, m);
         };
      return __expraZip3Digits;
   };
   private int __evalNummZip3Digits;
   private boolean __exprmZip3Digits;
   private boolean getCluemZip3Digits(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummZip3Digits != __evalNum))
         {
            __evalNummZip3Digits = __evalNum;
            __exprmZip3Digits = getClueaZip3Digits(q, m);
         };
      return __exprmZip3Digits;
   };
   private boolean __exists205(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $576 = false;
      char $578 = ' ';
      boolean z$579;
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         {
            $576 = q.address[__i0].__v_boro_cd;
            z$579 = false;
            if ((!$576))
               continue ;
            for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
               {
                  if ((($576 && m.address[__j0].__v_boro_cd) && ((((!z$579) && (z$579 = true)) ?(($578 = q.address[__i0].boro_cd)) : ($578)) == m.address[__j0].boro_cd)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean matchingBoro;
   private boolean let207(PatientImpl q, PatientImpl m, int i, int j, int bq, int bm) throws java.lang.Exception {
      return (bq == bm) && (bq <= 5);
   };
   private boolean __exists206(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $580 = false;
      int $582 = 0;
      boolean z$583;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $580 = q.address[i].__v_zipcode && (q.address[i].zipcode.length() >= 5);
            z$583 = false;
            if ((!$580))
               continue ;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  if ((($580 && (m.address[j].__v_zipcode && (m.address[j].zipcode.length() >= 5))) && let207(q, m, i, j, ((!z$583) && (z$583 = true)) ?(($582 = MciZipUtils.getBoroCdFromZip(q.address[i].zipcode))) : ($582), MciZipUtils.getBoroCdFromZip(m.address[j].zipcode))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean matchingImpliedBoro;
   private boolean __exists208(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $584 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $584 = (q.address[i].__v_zipcode && (q.address[i].zipcode.length() >= 5)) && (MciZipUtils.getBoroCdFromZip(q.address[i].zipcode) <= 5);
            if ((!$584))
               continue ;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  if (($584 && ((m.address[j].__v_zipcode && (m.address[j].zipcode.length() >= 5)) && (MciZipUtils.getBoroCdFromZip(m.address[j].zipcode) <= 5))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean validBoroOrImpliedBoro;
   private int __evalNumaDiffBoroCd;
   private boolean __expraDiffBoroCd;
   private boolean getClueaDiffBoroCd(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffBoroCd != __evalNum))
         {
            __evalNumaDiffBoroCd = __evalNum;
            __expraDiffBoroCd = (!((matchingBoro || matchingImpliedBoro) || getClueaZip(q, m))) && validBoroOrImpliedBoro;
         };
      return __expraDiffBoroCd;
   };
   private int __evalNumdBoroCd;
   private boolean __exprdBoroCd;
   private boolean getCluedBoroCd(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdBoroCd != __evalNum))
         {
            __evalNumdBoroCd = __evalNum;
            __exprdBoroCd = getClueaDiffBoroCd(q, m);
         };
      return __exprdBoroCd;
   };
   private boolean __exists209(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         {
            if (q.address[__i0].__v_zipcode)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists210(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         {
            if (m.address[__j0].__v_zipcode)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all211(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $586 = false;
      java.lang.String $588 = null;
      boolean z$589;
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         {
            $586 = q.address[__i0].__v_zipcode;
            z$589 = false;
            if ((!$586))
               continue ;
            for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($586 && m.address[__j0].__v_zipcode) && m.address[__j0].zipcode.equals(((!z$589) && (z$589 = true)) ?(($588 = q.address[__i0].zipcode)) : ($588))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffZip;
   private boolean __expraDiffZip;
   private boolean getClueaDiffZip(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffZip != __evalNum))
         {
            __evalNumaDiffZip = __evalNum;
            __expraDiffZip = (!getClueaDiffBoroCd(q, m)) && ((__exists209(q, m) && __exists210(q, m)) && __all211(q, m));
         };
      return __expraDiffZip;
   };
   private int __evalNumdZip;
   private boolean __exprdZip;
   private boolean getCluedZip(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdZip != __evalNum))
         {
            __evalNumdZip = __evalNum;
            __exprdZip = getClueaDiffZip(q, m);
         };
      return __exprdZip;
   };
   private int __evalNumaDiffStreetName;
   private boolean __expraDiffStreetName;
   private boolean getClueaDiffStreetName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffStreetName != __evalNum))
         {
            __evalNumaDiffStreetName = __evalNum;
            __expraDiffStreetName = ((!(getClueaDiffBoroCd(q, m) || getClueaDiffZip(q, m))) && (!((getClueaBin(q, m) || getClueaPoBox(q, m)) || getClueaStreetName(q, m)))) && areValidStreetNames;
         };
      return __expraDiffStreetName;
   };
   private int __evalNumdStreetName;
   private boolean __exprdStreetName;
   private boolean getCluedStreetName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdStreetName != __evalNum))
         {
            __evalNumdStreetName = __evalNum;
            __exprdStreetName = getClueaDiffStreetName(q, m);
         };
      return __exprdStreetName;
   };
   private boolean __exists212(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            if (q.address[i].__v_house_no)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists213(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $590 = null;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $590 = q.address[i].rel;
            for (int j = 0; j < q.address[i].rel.length; j = j + 1)
               {
                  if ($590[j].__v_parsedHouseNumber)
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists214(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            if (m.address[i].__v_house_no)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists215(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $592 = null;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $592 = m.address[i].rel;
            for (int j = 0; j < m.address[i].rel.length; j = j + 1)
               {
                  if ($592[j].__v_parsedHouseNumber)
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __swap216(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         if (q.address[__i0].__v_house_no)
            __lacc.add(StringUtils.removeNonDigits(q.address[__i0].house_no));
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_parsedHouseNumber)
               __lacc.add(q.address[__i0].rel[__i1].parsedHouseNumber);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         if (m.address[__j0].__v_house_no)
            __lacc.add(StringUtils.removeNonDigits(m.address[__j0].house_no));
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_parsedHouseNumber)
               __lacc.add(m.address[__j0].rel[__j1].parsedHouseNumber);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 0);
   };
   private int __evalNumaDiffHouseNumber;
   private boolean __expraDiffHouseNumber;
   private boolean getClueaDiffHouseNumber(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffHouseNumber != __evalNum))
         {
            __evalNumaDiffHouseNumber = __evalNum;
            __expraDiffHouseNumber = ((!(((getClueaDiffBoroCd(q, m) || getClueaDiffZip(q, m)) || getClueaDiffStreetName(q, m)) || getClueaHouseNumber(q, m))) && ((__exists212(q, m) || __exists213(q, m)) && (__exists214(q, m) || __exists215(q, m)))) && (!__swap216(q, m));
         };
      return __expraDiffHouseNumber;
   };
   private int __evalNumdHouseNumber;
   private boolean __exprdHouseNumber;
   private boolean getCluedHouseNumber(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdHouseNumber != __evalNum))
         {
            __evalNumdHouseNumber = __evalNum;
            __exprdHouseNumber = getClueaDiffHouseNumber(q, m);
         };
      return __exprdHouseNumber;
   };
   private boolean __exists217(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $594 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $596 = null;
      boolean z$597;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $598 = null;
      boolean z$599;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $600 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $602 = null;
      boolean z$603;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $604 = null;
      boolean z$605;
      boolean $606 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $594 = q.address[i].rel;
            z$597 = false;
            z$599 = false;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  $600 = m.address[j].rel;
                  z$603 = false;
                  z$605 = false;
                  for (int k = 0; k < q.address[i].rel.length; k = k + 1)
                     {
                        $606 = $594[k].__v_last_date_rptd;
                        if ((!$606))
                           continue ;
                        for (int l = 0; l < m.address[j].rel.length; l = l + 1)
                           {
                              if (((($606 && (((!z$597) && (z$597 = true)) ?(($596 = q.address[i].rel)) : ($596))[k].__v_raw_street_name) && ($600[l].__v_last_date_rptd && (((!z$603) && (z$603 = true)) ?(($602 = m.address[j].rel)) : ($602))[l].__v_raw_street_name)) && (DateUtils.daysApart((((!z$599) && (z$599 = true)) ?(($598 = q.address[i].rel)) : ($598))[k].last_date_rptd, (((!z$605) && (z$605 = true)) ?(($604 = m.address[j].rel)) : ($604))[l].last_date_rptd) < 90)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffDifferentAddressesWithin90Days;
   private boolean __expraDiffDifferentAddressesWithin90Days;
   private boolean getClueaDiffDifferentAddressesWithin90Days(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffDifferentAddressesWithin90Days != __evalNum))
         {
            __evalNumaDiffDifferentAddressesWithin90Days = __evalNum;
            __expraDiffDifferentAddressesWithin90Days = (!((((getClueaBin(q, m) || getClueaApartment(q, m)) || getClueaHouseNumber(q, m)) || getClueaStreetName(q, m)) || approxMatchingStreetNames)) && __exists217(q, m);
         };
      return __expraDiffDifferentAddressesWithin90Days;
   };
   private int __evalNumdDifferentAddressesWithin90Days;
   private boolean __exprdDifferentAddressesWithin90Days;
   private boolean getCluedDifferentAddressesWithin90Days(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdDifferentAddressesWithin90Days != __evalNum))
         {
            __evalNumdDifferentAddressesWithin90Days = __evalNum;
            __exprdDifferentAddressesWithin90Days = getClueaDiffDifferentAddressesWithin90Days(q, m);
         };
      return __exprdDifferentAddressesWithin90Days;
   };
   private int __quant218(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      int __e = 0;
      __quant218l: for (int i = 0; i < q.address.length; i = i + 1)
         if ((q.address[i].__v_addr_id || (!q.address[i].__v_addr_id)))
            __e = __e + 1;
      return __e;
   };
   private int __quant219(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      int __e = 0;
      __quant219l: for (int j = 0; j < m.address.length; j = j + 1)
         if ((m.address[j].__v_addr_id || (!m.address[j].__v_addr_id)))
            __e = __e + 1;
      return __e;
   };
   private int __evalNumaZeroCountValidAddrId;
   private boolean __expraZeroCountValidAddrId;
   private boolean getClueaZeroCountValidAddrId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaZeroCountValidAddrId != __evalNum))
         {
            __evalNumaZeroCountValidAddrId = __evalNum;
            __expraZeroCountValidAddrId = (__quant218(q, m) == 0) || (__quant219(q, m) == 0);
         };
      return __expraZeroCountValidAddrId;
   };
   private int __quant220(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      int __e = 0;
      __quant220l: for (int i = 0; i < q.address.length; i = i + 1)
         for (int j = 0; j < q.address[i].rel.length; j = j + 1)
            if ((((((((((q.address[i].rel[j].__v_last_date_rptd || (!q.address[i].rel[j].__v_last_date_rptd)) || q.address[i].rel[j].__v_addr_type_cd) || (!q.address[i].rel[j].__v_addr_type_cd)) || q.address[i].rel[j].__v_raw_street_name) || (!q.address[i].rel[j].__v_raw_street_name)) || q.address[i].rel[j].__v_apt_no) || (!q.address[i].rel[j].__v_apt_no)) || q.address[i].rel[j].__v_phone_no) || (!q.address[i].rel[j].__v_phone_no)))
               __e = __e + 1;
      return __e;
   };
   private int __quant221(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      int __e = 0;
      __quant221l: for (int i = 0; i < m.address.length; i = i + 1)
         for (int j = 0; j < m.address[i].rel.length; j = j + 1)
            if ((((((((((m.address[i].rel[j].__v_last_date_rptd || (!m.address[i].rel[j].__v_last_date_rptd)) || m.address[i].rel[j].__v_addr_type_cd) || (!m.address[i].rel[j].__v_addr_type_cd)) || m.address[i].rel[j].__v_raw_street_name) || (!m.address[i].rel[j].__v_raw_street_name)) || m.address[i].rel[j].__v_apt_no) || (!m.address[i].rel[j].__v_apt_no)) || m.address[i].rel[j].__v_phone_no) || (!m.address[i].rel[j].__v_phone_no)))
               __e = __e + 1;
      return __e;
   };
   private int __evalNumaMissingRelFields;
   private boolean __expraMissingRelFields;
   private boolean getClueaMissingRelFields(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMissingRelFields != __evalNum))
         {
            __evalNumaMissingRelFields = __evalNum;
            __expraMissingRelFields = (__quant220(q, m) == 0) || (__quant221(q, m) == 0);
         };
      return __expraMissingRelFields;
   };
   boolean isEmptyArray(Object[] array) {
		return array.length == 0;
	};
   private int __evalNumaMissingAddrRelContactMothers;
   private boolean __expraMissingAddrRelContactMothers;
   private boolean getClueaMissingAddrRelContactMothers(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMissingAddrRelContactMothers != __evalNum))
         {
            __evalNumaMissingAddrRelContactMothers = __evalNum;
            __expraMissingAddrRelContactMothers = ((isEmptyArray(q.address) && isEmptyArray(q.contacts)) && isEmptyArray(q.mothers)) || ((isEmptyArray(m.address) && isEmptyArray(m.contacts)) && isEmptyArray(m.mothers));
         };
      return __expraMissingAddrRelContactMothers;
   };
   private int __evalNumaMissingAddrRelContact;
   private boolean __expraMissingAddrRelContact;
   private boolean getClueaMissingAddrRelContact(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMissingAddrRelContact != __evalNum))
         {
            __evalNumaMissingAddrRelContact = __evalNum;
            __expraMissingAddrRelContact = (!getClueaMissingAddrRelContactMothers(q, m)) && ((isEmptyArray(q.address) && isEmptyArray(q.contacts)) || (isEmptyArray(m.address) && isEmptyArray(m.contacts)));
         };
      return __expraMissingAddrRelContact;
   };
   private int __evalNumaMissingAddressRel;
   private boolean __expraMissingAddressRel;
   private boolean getClueaMissingAddressRel(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMissingAddressRel != __evalNum))
         {
            __evalNumaMissingAddressRel = __evalNum;
            __expraMissingAddressRel = (!(getClueaMissingAddrRelContactMothers(q, m) || getClueaMissingAddrRelContact(q, m))) && (isEmptyArray(q.address) || isEmptyArray(m.address));
         };
      return __expraMissingAddressRel;
   };
   private int __evalNumaMissingIds;
   private boolean __expraMissingIds;
   private boolean getClueaMissingIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMissingIds != __evalNum))
         {
            __evalNumaMissingIds = __evalNum;
            __expraMissingIds = isEmptyArray(q.ids) || isEmptyArray(m.ids);
         };
      return __expraMissingIds;
   };
   private int __evalNumaMissingAddrRelContactMothersIds;
   private boolean __expraMissingAddrRelContactMothersIds;
   private boolean getClueaMissingAddrRelContactMothersIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMissingAddrRelContactMothersIds != __evalNum))
         {
            __evalNumaMissingAddrRelContactMothersIds = __evalNum;
            __expraMissingAddrRelContactMothersIds = getClueaMissingAddrRelContactMothers(q, m) && getClueaMissingIds(q, m);
         };
      return __expraMissingAddrRelContactMothersIds;
   };
   private int __evalNumdMissingAddrRelContactMothersIds;
   private boolean __exprdMissingAddrRelContactMothersIds;
   private boolean getCluedMissingAddrRelContactMothersIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMissingAddrRelContactMothersIds != __evalNum))
         {
            __evalNumdMissingAddrRelContactMothersIds = __evalNum;
            __exprdMissingAddrRelContactMothersIds = getClueaMissingAddrRelContactMothersIds(q, m);
         };
      return __exprdMissingAddrRelContactMothersIds;
   };
   private int __evalNumdMissingAddrRelContactMothers;
   private boolean __exprdMissingAddrRelContactMothers;
   private boolean getCluedMissingAddrRelContactMothers(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMissingAddrRelContactMothers != __evalNum))
         {
            __evalNumdMissingAddrRelContactMothers = __evalNum;
            __exprdMissingAddrRelContactMothers = (!getClueaMissingAddrRelContactMothersIds(q, m)) && getClueaMissingAddrRelContactMothers(q, m);
         };
      return __exprdMissingAddrRelContactMothers;
   };
   private int __evalNumdMissingAddrRelContact;
   private boolean __exprdMissingAddrRelContact;
   private boolean getCluedMissingAddrRelContact(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMissingAddrRelContact != __evalNum))
         {
            __evalNumdMissingAddrRelContact = __evalNum;
            __exprdMissingAddrRelContact = ((!getClueaMissingAddrRelContactMothersIds(q, m)) && (!getClueaMissingAddrRelContactMothers(q, m))) && getClueaMissingAddrRelContact(q, m);
         };
      return __exprdMissingAddrRelContact;
   };
   private int __evalNumdMissingAddressRel;
   private boolean __exprdMissingAddressRel;
   private boolean getCluedMissingAddressRel(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMissingAddressRel != __evalNum))
         {
            __evalNumdMissingAddressRel = __evalNum;
            __exprdMissingAddressRel = (((!getClueaMissingAddrRelContactMothersIds(q, m)) && (!getClueaMissingAddrRelContactMothers(q, m))) && (!getClueaMissingAddrRelContact(q, m))) && getClueaMissingAddressRel(q, m);
         };
      return __exprdMissingAddressRel;
   };
   private int __evalNumdMissingIds;
   private boolean __exprdMissingIds;
   private boolean getCluedMissingIds(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMissingIds != __evalNum))
         {
            __evalNumdMissingIds = __evalNum;
            __exprdMissingIds = (!getClueaMissingAddrRelContactMothersIds(q, m)) && getClueaMissingIds(q, m);
         };
      return __exprdMissingIds;
   };
   private boolean __all222(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            if ((!(!q.address[i].__v_street_name)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all223(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $608 = null;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $608 = q.address[i].rel;
            for (int j = 0; j < q.address[i].rel.length; j = j + 1)
               {
                  if ((!(!$608[j].__v_raw_street_name)))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private boolean __all224(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            if ((!(!m.address[i].__v_street_name)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all225(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $610 = null;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $610 = m.address[i].rel;
            for (int j = 0; j < m.address[i].rel.length; j = j + 1)
               {
                  if ((!(!$610[j].__v_raw_street_name)))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffSparsePatientAndContactAddress;
   private boolean __expraDiffSparsePatientAndContactAddress;
   private boolean getClueaDiffSparsePatientAndContactAddress(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSparsePatientAndContactAddress != __evalNum))
         {
            __evalNumaDiffSparsePatientAndContactAddress = __evalNum;
            __expraDiffSparsePatientAndContactAddress = (!(((getClueaBin(q, m) || getClueaPoBox(q, m)) || getClueaStreetName(q, m)) || getClueisHH(q, m))) && ((__all222(q, m) && __all223(q, m)) || (__all224(q, m) && __all225(q, m)));
         };
      return __expraDiffSparsePatientAndContactAddress;
   };
   private int __evalNumdSparsePatientAndContactAddress;
   private boolean __exprdSparsePatientAndContactAddress;
   private boolean getCluedSparsePatientAndContactAddress(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSparsePatientAndContactAddress != __evalNum))
         {
            __evalNumdSparsePatientAndContactAddress = __evalNum;
            __exprdSparsePatientAndContactAddress = getClueaDiffSparsePatientAndContactAddress(q, m);
         };
      return __exprdSparsePatientAndContactAddress;
   };
   private boolean __all226(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            if ((!(!q.address[i].__v_street_name)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all227(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            if ((!(!m.address[i].__v_street_name)))
               {
                  return false;
               };
         };
      return true;
   };
   private int __evalNumaDiffSparsePatientAddress;
   private boolean __expraDiffSparsePatientAddress;
   private boolean getClueaDiffSparsePatientAddress(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSparsePatientAddress != __evalNum))
         {
            __evalNumaDiffSparsePatientAddress = __evalNum;
            __expraDiffSparsePatientAddress = (!((((getClueaBin(q, m) || getClueaPoBox(q, m)) || getClueaStreetName(q, m)) || getClueisHH(q, m)) || getClueaDiffSparsePatientAndContactAddress(q, m))) && (__all226(q, m) || __all227(q, m));
         };
      return __expraDiffSparsePatientAddress;
   };
   private int __evalNumdSparsePatientAddress;
   private boolean __exprdSparsePatientAddress;
   private boolean getCluedSparsePatientAddress(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSparsePatientAddress != __evalNum))
         {
            __evalNumdSparsePatientAddress = __evalNum;
            __exprdSparsePatientAddress = getClueaDiffSparsePatientAddress(q, m);
         };
      return __exprdSparsePatientAddress;
   };
   private boolean __exists228(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            if ((q.contacts[i].__v_clean_phone_no_h || q.contacts[i].__v_clean_phone_no_w))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists229(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $612 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $614 = null;
      boolean z$615;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $612 = q.address[i].rel;
            z$615 = false;
            for (int j = 0; j < q.address[i].rel.length; j = j + 1)
               {
                  if (($612[j].__v_clean_phone_no || (((!z$615) && (z$615 = true)) ?(($614 = q.address[i].rel)) : ($614))[j].__v_phoneAsStreet))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists230(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.contacts.length; i = i + 1)
         {
            if ((m.contacts[i].__v_clean_phone_no_h || m.contacts[i].__v_clean_phone_no_w))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists231(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $616 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $618 = null;
      boolean z$619;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $616 = m.address[i].rel;
            z$619 = false;
            for (int j = 0; j < m.address[i].rel.length; j = j + 1)
               {
                  if (($616[j].__v_clean_phone_no || (((!z$619) && (z$619 = true)) ?(($618 = m.address[i].rel)) : ($618))[j].__v_phoneAsStreet))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean areValidPhoneNumbers;
   private boolean __swap232(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_clean_phone_no_h)
            __lacc.add(q.contacts[__i0].clean_phone_no_h);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_clean_phone_no_w)
            __lacc.add(q.contacts[__i0].clean_phone_no_w);
      qr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_clean_phone_no)
               __lacc.add(q.address[__i0].rel[__i1].clean_phone_no);
      qr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_phoneAsStreet)
               __lacc.add(q.address[__i0].rel[__i1].phoneAsStreet);
      qr[3] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_clean_phone_no_h)
            __lacc.add(m.contacts[__j0].clean_phone_no_h);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_clean_phone_no_w)
            __lacc.add(m.contacts[__j0].clean_phone_no_w);
      mr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_clean_phone_no)
               __lacc.add(m.address[__j0].rel[__j1].clean_phone_no);
      mr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_phoneAsStreet)
               __lacc.add(m.address[__j0].rel[__j1].phoneAsStreet);
      mr[3] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 0);
   };
   private int __evalNumaPhone;
   private boolean __expraPhone;
   private boolean getClueaPhone(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaPhone != __evalNum))
         {
            __evalNumaPhone = __evalNum;
            __expraPhone = getClueaNotSiblings(q, m) && __swap232(q, m);
         };
      return __expraPhone;
   };
   private int __evalNummPhone;
   private boolean __exprmPhone;
   private boolean getCluemPhone(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummPhone != __evalNum))
         {
            __evalNummPhone = __evalNum;
            __exprmPhone = getClueaPhone(q, m);
         };
      return __exprmPhone;
   };
   private boolean __swap233(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_clean_phone_no_h)
            __lacc.add(LocalPhone.localPhone(q.contacts[__i0].clean_phone_no_h));
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_clean_phone_no_w)
            __lacc.add(LocalPhone.localPhone(q.contacts[__i0].clean_phone_no_w));
      qr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_clean_phone_no)
               __lacc.add(LocalPhone.localPhone(q.address[__i0].rel[__i1].clean_phone_no));
      qr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.address.length; __i0 = __i0 + 1)
         for (int __i1 = 0; __i1 < q.address[__i0].rel.length; __i1 = __i1 + 1)
            if (q.address[__i0].rel[__i1].__v_phoneAsStreet)
               __lacc.add(LocalPhone.localPhone(q.address[__i0].rel[__i1].phoneAsStreet));
      qr[3] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[4][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_clean_phone_no_h)
            __lacc.add(LocalPhone.localPhone(m.contacts[__j0].clean_phone_no_h));
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_clean_phone_no_w)
            __lacc.add(LocalPhone.localPhone(m.contacts[__j0].clean_phone_no_w));
      mr[1] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_clean_phone_no)
               __lacc.add(LocalPhone.localPhone(m.address[__j0].rel[__j1].clean_phone_no));
      mr[2] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.address.length; __j0 = __j0 + 1)
         for (int __j1 = 0; __j1 < m.address[__j0].rel.length; __j1 = __j1 + 1)
            if (m.address[__j0].rel[__j1].__v_phoneAsStreet)
               __lacc.add(LocalPhone.localPhone(m.address[__j0].rel[__j1].phoneAsStreet));
      mr[3] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 0);
   };
   private int __evalNumaLocalPhone;
   private boolean __expraLocalPhone;
   private boolean getClueaLocalPhone(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaLocalPhone != __evalNum))
         {
            __evalNumaLocalPhone = __evalNum;
            __expraLocalPhone = (getClueaNotSiblings(q, m) && (!getClueaPhone(q, m))) && __swap233(q, m);
         };
      return __expraLocalPhone;
   };
   private int __evalNummLocalPhone;
   private boolean __exprmLocalPhone;
   private boolean getCluemLocalPhone(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummLocalPhone != __evalNum))
         {
            __evalNummLocalPhone = __evalNum;
            __exprmLocalPhone = getClueaLocalPhone(q, m);
         };
      return __exprmLocalPhone;
   };
   private int PHONE_EDIT_DISTANCE_LIMIT;
   private boolean __exists234(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $620 = false;
      java.lang.String $622 = null;
      boolean z$623;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $620 = q.contacts[i].__v_clean_phone_no_h;
            z$623 = false;
            if ((!$620))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if ((($620 && m.contacts[j].__v_clean_phone_no_h) && (EditDistance2.editDistance2(((!z$623) && (z$623 = true)) ?(($622 = q.contacts[i].clean_phone_no_h)) : ($622), m.contacts[j].clean_phone_no_h) < PHONE_EDIT_DISTANCE_LIMIT)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists235(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $624 = false;
      java.lang.String $626 = null;
      boolean z$627;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $624 = q.contacts[i].__v_clean_phone_no_w;
            z$627 = false;
            if ((!$624))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if ((($624 && m.contacts[j].__v_clean_phone_no_w) && (EditDistance2.editDistance2(((!z$627) && (z$627 = true)) ?(($626 = q.contacts[i].clean_phone_no_w)) : ($626), m.contacts[j].clean_phone_no_w) < PHONE_EDIT_DISTANCE_LIMIT)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists236(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $628 = false;
      java.lang.String $630 = null;
      boolean z$631;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $628 = q.contacts[i].__v_clean_phone_no_h;
            z$631 = false;
            if ((!$628))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if ((($628 && m.contacts[j].__v_clean_phone_no_w) && (EditDistance2.editDistance2(((!z$631) && (z$631 = true)) ?(($630 = q.contacts[i].clean_phone_no_h)) : ($630), m.contacts[j].clean_phone_no_w) < PHONE_EDIT_DISTANCE_LIMIT)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists237(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $632 = false;
      java.lang.String $634 = null;
      boolean z$635;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $632 = q.contacts[i].__v_clean_phone_no_w;
            z$635 = false;
            if ((!$632))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if ((($632 && m.contacts[j].__v_clean_phone_no_h) && (EditDistance2.editDistance2(((!z$635) && (z$635 = true)) ?(($634 = q.contacts[i].clean_phone_no_w)) : ($634), m.contacts[j].clean_phone_no_h) < PHONE_EDIT_DISTANCE_LIMIT)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean editDistanceContactsPhone;
   private boolean __exists238(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $636 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $638 = null;
      boolean z$639;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $640 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $642 = null;
      boolean z$643;
      boolean $644 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $636 = q.address[i].rel;
            z$639 = false;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  $640 = m.address[j].rel;
                  z$643 = false;
                  for (int k = 0; k < q.address[i].rel.length; k = k + 1)
                     {
                        $644 = $636[k].__v_clean_phone_no;
                        if ((!$644))
                           continue ;
                        for (int l = 0; l < m.address[j].rel.length; l = l + 1)
                           {
                              if ((($644 && $640[l].__v_clean_phone_no) && (EditDistance2.editDistance2((((!z$639) && (z$639 = true)) ?(($638 = q.address[i].rel)) : ($638))[k].clean_phone_no, (((!z$643) && (z$643 = true)) ?(($642 = m.address[j].rel)) : ($642))[l].clean_phone_no) < PHONE_EDIT_DISTANCE_LIMIT)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private boolean __exists239(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $646 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $648 = null;
      boolean z$649;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $650 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $652 = null;
      boolean z$653;
      boolean $654 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $646 = q.address[i].rel;
            z$649 = false;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  $650 = m.address[j].rel;
                  z$653 = false;
                  for (int k = 0; k < q.address[i].rel.length; k = k + 1)
                     {
                        $654 = $646[k].__v_phoneAsStreet;
                        if ((!$654))
                           continue ;
                        for (int l = 0; l < m.address[j].rel.length; l = l + 1)
                           {
                              if ((($654 && $650[l].__v_phoneAsStreet) && (EditDistance2.editDistance2((((!z$649) && (z$649 = true)) ?(($648 = q.address[i].rel)) : ($648))[k].phoneAsStreet, (((!z$653) && (z$653 = true)) ?(($652 = m.address[j].rel)) : ($652))[l].phoneAsStreet) < PHONE_EDIT_DISTANCE_LIMIT)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private boolean __exists240(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $656 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $658 = null;
      boolean z$659;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $660 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $662 = null;
      boolean z$663;
      boolean $664 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $656 = q.address[i].rel;
            z$659 = false;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  $660 = m.address[j].rel;
                  z$663 = false;
                  for (int k = 0; k < q.address[i].rel.length; k = k + 1)
                     {
                        $664 = $656[k].__v_clean_phone_no;
                        if ((!$664))
                           continue ;
                        for (int l = 0; l < m.address[j].rel.length; l = l + 1)
                           {
                              if ((($664 && $660[l].__v_phoneAsStreet) && (EditDistance2.editDistance2((((!z$659) && (z$659 = true)) ?(($658 = q.address[i].rel)) : ($658))[k].clean_phone_no, (((!z$663) && (z$663 = true)) ?(($662 = m.address[j].rel)) : ($662))[l].phoneAsStreet) < PHONE_EDIT_DISTANCE_LIMIT)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private boolean __exists241(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $666 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $668 = null;
      boolean z$669;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $670 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $672 = null;
      boolean z$673;
      boolean $674 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $666 = q.address[i].rel;
            z$669 = false;
            for (int j = 0; j < m.address.length; j = j + 1)
               {
                  $670 = m.address[j].rel;
                  z$673 = false;
                  for (int k = 0; k < q.address[i].rel.length; k = k + 1)
                     {
                        $674 = $666[k].__v_phoneAsStreet;
                        if ((!$674))
                           continue ;
                        for (int l = 0; l < m.address[j].rel.length; l = l + 1)
                           {
                              if ((($674 && $670[l].__v_clean_phone_no) && (EditDistance2.editDistance2((((!z$669) && (z$669 = true)) ?(($668 = q.address[i].rel)) : ($668))[k].phoneAsStreet, (((!z$673) && (z$673 = true)) ?(($672 = m.address[j].rel)) : ($672))[l].clean_phone_no) < PHONE_EDIT_DISTANCE_LIMIT)))
                                 {
                                    return true;
                                 };
                           };
                     };
               };
         };
      return false;
   };
   private boolean editDistanceRelPhone;
   private boolean __exists242(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $676 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $678 = null;
      boolean z$679;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $680 = null;
      boolean z$681;
      boolean $682 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $676 = q.address[i].rel;
            z$679 = false;
            z$681 = false;
            for (int j = 0; j < q.address[i].rel.length; j = j + 1)
               {
                  $682 = $676[j].__v_clean_phone_no;
                  if ((!$682))
                     continue ;
                  for (int k = 0; k < m.contacts.length; k = k + 1)
                     {
                        if (($682 && ((m.contacts[k].__v_clean_phone_no_h && (EditDistance2.editDistance2((((!z$679) && (z$679 = true)) ?(($678 = q.address[i].rel)) : ($678))[j].clean_phone_no, m.contacts[k].clean_phone_no_h) < PHONE_EDIT_DISTANCE_LIMIT)) || (m.contacts[k].__v_clean_phone_no_w && (EditDistance2.editDistance2((((!z$681) && (z$681 = true)) ?(($680 = q.address[i].rel)) : ($680))[j].clean_phone_no, m.contacts[k].clean_phone_no_w) < PHONE_EDIT_DISTANCE_LIMIT)))))
                           {
                              return true;
                           };
                     };
               };
         };
      return false;
   };
   private boolean __exists243(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $684 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $686 = null;
      boolean z$687;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $688 = null;
      boolean z$689;
      boolean $690 = false;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $684 = q.address[i].rel;
            z$687 = false;
            z$689 = false;
            for (int j = 0; j < q.address[i].rel.length; j = j + 1)
               {
                  $690 = $684[j].__v_phoneAsStreet;
                  if ((!$690))
                     continue ;
                  for (int k = 0; k < m.contacts.length; k = k + 1)
                     {
                        if (($690 && ((m.contacts[k].__v_clean_phone_no_h && (EditDistance2.editDistance2((((!z$687) && (z$687 = true)) ?(($686 = q.address[i].rel)) : ($686))[j].phoneAsStreet, m.contacts[k].clean_phone_no_h) < PHONE_EDIT_DISTANCE_LIMIT)) || (m.contacts[k].__v_clean_phone_no_w && (EditDistance2.editDistance2((((!z$689) && (z$689 = true)) ?(($688 = q.address[i].rel)) : ($688))[j].phoneAsStreet, m.contacts[k].clean_phone_no_w) < PHONE_EDIT_DISTANCE_LIMIT)))))
                           {
                              return true;
                           };
                     };
               };
         };
      return false;
   };
   private boolean __exists244(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $692 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $694 = null;
      boolean z$695;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $696 = null;
      boolean z$697;
      boolean $698 = false;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $692 = m.address[i].rel;
            z$695 = false;
            z$697 = false;
            for (int j = 0; j < m.address[i].rel.length; j = j + 1)
               {
                  $698 = $692[j].__v_clean_phone_no;
                  if ((!$698))
                     continue ;
                  for (int k = 0; k < q.contacts.length; k = k + 1)
                     {
                        if (($698 && ((q.contacts[k].__v_clean_phone_no_h && (EditDistance2.editDistance2((((!z$695) && (z$695 = true)) ?(($694 = m.address[i].rel)) : ($694))[j].clean_phone_no, q.contacts[k].clean_phone_no_h) < PHONE_EDIT_DISTANCE_LIMIT)) || (q.contacts[k].__v_clean_phone_no_w && (EditDistance2.editDistance2((((!z$697) && (z$697 = true)) ?(($696 = m.address[i].rel)) : ($696))[j].clean_phone_no, q.contacts[k].clean_phone_no_w) < PHONE_EDIT_DISTANCE_LIMIT)))))
                           {
                              return true;
                           };
                     };
               };
         };
      return false;
   };
   private boolean __exists245(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $700 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $702 = null;
      boolean z$703;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $704 = null;
      boolean z$705;
      boolean $706 = false;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $700 = m.address[i].rel;
            z$703 = false;
            z$705 = false;
            for (int j = 0; j < m.address[i].rel.length; j = j + 1)
               {
                  $706 = $700[j].__v_phoneAsStreet;
                  if ((!$706))
                     continue ;
                  for (int k = 0; k < q.contacts.length; k = k + 1)
                     {
                        if (($706 && ((q.contacts[k].__v_clean_phone_no_h && (EditDistance2.editDistance2((((!z$703) && (z$703 = true)) ?(($702 = m.address[i].rel)) : ($702))[j].phoneAsStreet, q.contacts[k].clean_phone_no_h) < PHONE_EDIT_DISTANCE_LIMIT)) || (q.contacts[k].__v_clean_phone_no_w && (EditDistance2.editDistance2((((!z$705) && (z$705 = true)) ?(($704 = m.address[i].rel)) : ($704))[j].phoneAsStreet, q.contacts[k].clean_phone_no_w) < PHONE_EDIT_DISTANCE_LIMIT)))))
                           {
                              return true;
                           };
                     };
               };
         };
      return false;
   };
   private boolean editDistanceSwapRelContacts;
   private boolean __exists246(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $708 = null;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $708 = q.address[i].rel;
            for (int j = 0; j < q.address[i].rel.length; j = j + 1)
               {
                  if ($708[j].__v_phoneAsStreet)
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists247(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $710 = null;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $710 = m.address[i].rel;
            for (int j = 0; j < m.address[i].rel.length; j = j + 1)
               {
                  if ($710[j].__v_phoneAsStreet)
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrStreetPhone;
   private boolean __exprrStreetPhone;
   private boolean getCluerStreetPhone(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrStreetPhone != __evalNum))
         {
            __evalNumrStreetPhone = __evalNum;
            __exprrStreetPhone = __exists246(q, m) || __exists247(q, m);
         };
      return __exprrStreetPhone;
   };
   private int __evalNumaEditDistancePhone;
   private boolean __expraEditDistancePhone;
   private boolean getClueaEditDistancePhone(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaEditDistancePhone != __evalNum))
         {
            __evalNumaEditDistancePhone = __evalNum;
            __expraEditDistancePhone = (getClueaNotSiblings(q, m) && (!(getClueaPhone(q, m) || getClueaLocalPhone(q, m)))) && ((editDistanceContactsPhone || editDistanceRelPhone) || editDistanceSwapRelContacts);
         };
      return __expraEditDistancePhone;
   };
   private int __evalNummEditDistancePhone;
   private boolean __exprmEditDistancePhone;
   private boolean getCluemEditDistancePhone(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummEditDistancePhone != __evalNum))
         {
            __evalNummEditDistancePhone = __evalNum;
            __exprmEditDistancePhone = getClueaEditDistancePhone(q, m);
         };
      return __exprmEditDistancePhone;
   };
   private int __evalNumaDiffPhone;
   private boolean __expraDiffPhone;
   private boolean getClueaDiffPhone(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffPhone != __evalNum))
         {
            __evalNumaDiffPhone = __evalNum;
            __expraDiffPhone = (getClueaNotSiblings(q, m) && areValidPhoneNumbers) && (!((getClueaPhone(q, m) || getClueaLocalPhone(q, m)) || getClueaEditDistancePhone(q, m)));
         };
      return __expraDiffPhone;
   };
   private int __evalNumdPhone;
   private boolean __exprdPhone;
   private boolean getCluedPhone(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdPhone != __evalNum))
         {
            __evalNumdPhone = __evalNum;
            __exprdPhone = getClueaDiffPhone(q, m);
         };
      return __exprdPhone;
   };
   private boolean __exists248(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $712 = false;
      java.lang.String $714 = null;
      boolean z$715;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $712 = q.contacts[__i0].__v_nameL;
            z$715 = false;
            if ((!$712))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((($712 && m.contacts[__j0].__v_nameL) && m.contacts[__j0].nameL.equals(((!z$715) && (z$715 = true)) ?(($714 = q.contacts[__i0].nameL)) : ($714))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __swap249(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameF)
            __lacc.add(q.contacts[__i0].nameF);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_mothersFirstName)
            __lacc.add(q.names[__i0].mothersFirstName);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameF)
            __lacc.add(m.contacts[__j0].nameF);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_mothersFirstName)
            __lacc.add(m.names[__j0].mothersFirstName);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 0);
   };
   private int __evalNumaContactsNamesFirstAndLast;
   private boolean __expraContactsNamesFirstAndLast;
   private boolean getClueaContactsNamesFirstAndLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesFirstAndLast != __evalNum))
         {
            __evalNumaContactsNamesFirstAndLast = __evalNum;
            __expraContactsNamesFirstAndLast = (getClueaNotSiblings(q, m) && __exists248(q, m)) && __swap249(q, m);
         };
      return __expraContactsNamesFirstAndLast;
   };
   private int __evalNummContactsNamesFirstAndLast;
   private boolean __exprmContactsNamesFirstAndLast;
   private boolean getCluemContactsNamesFirstAndLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummContactsNamesFirstAndLast != __evalNum))
         {
            __evalNummContactsNamesFirstAndLast = __evalNum;
            __exprmContactsNamesFirstAndLast = getClueaContactsNamesFirstAndLast(q, m);
         };
      return __exprmContactsNamesFirstAndLast;
   };
   private boolean __exists250(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $716 = false;
      java.lang.String $718 = null;
      boolean z$719;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $716 = q.contacts[i].__v_nameF;
            z$719 = false;
            if ((!$716))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if ((($716 && m.contacts[j].__v_nameF) && approximateMatch(((!z$719) && (z$719 = true)) ?(($718 = q.contacts[i].nameF)) : ($718), m.contacts[j].nameF)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists251(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $720 = false;
      java.lang.String $722 = null;
      boolean z$723;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $720 = q.contacts[i].__v_nameL;
            z$723 = false;
            if ((!$720))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if ((($720 && m.contacts[j].__v_nameL) && approximateMatch(((!z$723) && (z$723 = true)) ?(($722 = q.contacts[i].nameL)) : ($722), m.contacts[j].nameL)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaApproxContactsNamesFirstAndLast;
   private boolean __expraApproxContactsNamesFirstAndLast;
   private boolean getClueaApproxContactsNamesFirstAndLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaApproxContactsNamesFirstAndLast != __evalNum))
         {
            __evalNumaApproxContactsNamesFirstAndLast = __evalNum;
            __expraApproxContactsNamesFirstAndLast = ((getClueaNotSiblings(q, m) && (!getClueaContactsNamesFirstAndLast(q, m))) && __exists250(q, m)) && __exists251(q, m);
         };
      return __expraApproxContactsNamesFirstAndLast;
   };
   private int __evalNummApproxContactsNamesFirstAndLast;
   private boolean __exprmApproxContactsNamesFirstAndLast;
   private boolean getCluemApproxContactsNamesFirstAndLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummApproxContactsNamesFirstAndLast != __evalNum))
         {
            __evalNummApproxContactsNamesFirstAndLast = __evalNum;
            __exprmApproxContactsNamesFirstAndLast = getClueaApproxContactsNamesFirstAndLast(q, m);
         };
      return __exprmApproxContactsNamesFirstAndLast;
   };
   private boolean __exists252(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $724 = false;
      java.lang.String $726 = null;
      boolean z$727;
      boolean $728 = false;
      boolean z$729;
      java.lang.String $730 = null;
      boolean z$731;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $724 = q.contacts[i].__v_nameF;
            z$727 = false;
            z$729 = false;
            z$731 = false;
            if ((!$724))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if (((($724 && m.contacts[j].__v_nameF) && (((!z$727) && (z$727 = true)) ?(($726 = q.contacts[i].nameF)) : ($726)).equals(m.contacts[j].nameF)) && ((!((((!z$729) && (z$729 = true)) ?(($728 = q.contacts[i].__v_nameL)) : ($728)) && m.contacts[j].__v_nameL)) || (((!z$731) && (z$731 = true)) ?(($730 = q.contacts[i].nameL)) : ($730)).equals(m.contacts[j].nameL))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaContactsNamesFirst;
   private boolean __expraContactsNamesFirst;
   private boolean getClueaContactsNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesFirst != __evalNum))
         {
            __evalNumaContactsNamesFirst = __evalNum;
            __expraContactsNamesFirst = (getClueaNotSiblings(q, m) && (!getClueaContactsNamesFirstAndLast(q, m))) && __exists252(q, m);
         };
      return __expraContactsNamesFirst;
   };
   private int __evalNummContactsNamesFirst;
   private boolean __exprmContactsNamesFirst;
   private boolean getCluemContactsNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummContactsNamesFirst != __evalNum))
         {
            __evalNummContactsNamesFirst = __evalNum;
            __exprmContactsNamesFirst = getClueaContactsNamesFirst(q, m);
         };
      return __exprmContactsNamesFirst;
   };
   private boolean __exists253(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $732 = false;
      java.lang.String $734 = null;
      boolean z$735;
      java.lang.String $736 = null;
      boolean z$737;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $732 = q.contacts[i].__v_nameF && q.contacts[i].__v_nameL;
            z$735 = false;
            z$737 = false;
            if ((!$732))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if (((($732 && (m.contacts[j].__v_nameF && m.contacts[j].__v_nameL)) && (((!z$735) && (z$735 = true)) ?(($734 = q.contacts[i].nameF)) : ($734)).equals(m.contacts[j].nameF)) && approximateMatch(((!z$737) && (z$737 = true)) ?(($736 = q.contacts[i].nameL)) : ($736), m.contacts[j].nameL)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaContactsNamesFirstCloseLast;
   private boolean __expraContactsNamesFirstCloseLast;
   private boolean getClueaContactsNamesFirstCloseLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesFirstCloseLast != __evalNum))
         {
            __evalNumaContactsNamesFirstCloseLast = __evalNum;
            __expraContactsNamesFirstCloseLast = (getClueaNotSiblings(q, m) && (!(getClueaContactsNamesFirstAndLast(q, m) || getClueaContactsNamesFirst(q, m)))) && __exists253(q, m);
         };
      return __expraContactsNamesFirstCloseLast;
   };
   private int __evalNummContactsNamesFirstCloseLast;
   private boolean __exprmContactsNamesFirstCloseLast;
   private boolean getCluemContactsNamesFirstCloseLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummContactsNamesFirstCloseLast != __evalNum))
         {
            __evalNummContactsNamesFirstCloseLast = __evalNum;
            __exprmContactsNamesFirstCloseLast = getClueaContactsNamesFirstCloseLast(q, m);
         };
      return __exprmContactsNamesFirstCloseLast;
   };
   private boolean __exists254(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $738 = false;
      java.lang.String $740 = null;
      boolean z$741;
      boolean $742 = false;
      boolean z$743;
      java.lang.String $744 = null;
      boolean z$745;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $738 = q.contacts[i].__v_nameF;
            z$741 = false;
            z$743 = false;
            z$745 = false;
            if ((!$738))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if (((($738 && m.contacts[j].__v_nameF) && approximateMatch(((!z$741) && (z$741 = true)) ?(($740 = q.contacts[i].nameF)) : ($740), m.contacts[j].nameF)) && ((!((((!z$743) && (z$743 = true)) ?(($742 = q.contacts[i].__v_nameL)) : ($742)) && m.contacts[j].__v_nameL)) || approximateMatch(((!z$745) && (z$745 = true)) ?(($744 = q.contacts[i].nameL)) : ($744), m.contacts[j].nameL))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaApproxContactsNamesFirst;
   private boolean __expraApproxContactsNamesFirst;
   private boolean getClueaApproxContactsNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaApproxContactsNamesFirst != __evalNum))
         {
            __evalNumaApproxContactsNamesFirst = __evalNum;
            __expraApproxContactsNamesFirst = (getClueaNotSiblings(q, m) && (!((getClueaContactsNamesFirstAndLast(q, m) || getClueaContactsNamesFirst(q, m)) || getClueaContactsNamesFirstCloseLast(q, m)))) && __exists254(q, m);
         };
      return __expraApproxContactsNamesFirst;
   };
   private int __evalNummApproxContactsNamesFirst;
   private boolean __exprmApproxContactsNamesFirst;
   private boolean getCluemApproxContactsNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummApproxContactsNamesFirst != __evalNum))
         {
            __evalNummApproxContactsNamesFirst = __evalNum;
            __exprmApproxContactsNamesFirst = getClueaApproxContactsNamesFirst(q, m);
         };
      return __exprmApproxContactsNamesFirst;
   };
   private boolean __exists256(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      boolean $746 = false;
      boolean $748 = false;
      boolean z$749;
      java.lang.String $750 = null;
      boolean z$751;
      for (int k = 0; k < q.names.length; k = k + 1)
         {
            $746 = q.names[k].__v_nameL;
            z$749 = false;
            z$751 = false;
            if ((!($746 && (((!z$749) && (z$749 = true)) ?(($748 = q.contacts[i].nameL.equals(q.names[k].nameL))) : ($748)))))
               continue ;
            for (int l = 0; l < m.names.length; l = l + 1)
               {
                  if (((($746 && m.names[l].__v_nameL) && (((!z$749) && (z$749 = true)) ?(($748 = q.contacts[i].nameL.equals(q.names[k].nameL))) : ($748))) && (((!z$751) && (z$751 = true)) ?(($750 = m.contacts[j].nameL)) : ($750)).equals(m.names[l].nameL)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists255(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $752 = false;
      java.lang.String $754 = null;
      boolean z$755;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $752 = q.contacts[i].__v_nameL;
            z$755 = false;
            if ((!$752))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if (((($752 && m.contacts[j].__v_nameL) && (((!z$755) && (z$755 = true)) ?(($754 = q.contacts[i].nameL)) : ($754)).equals(m.contacts[j].nameL)) && (!__exists256(q, m, i, j))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaContactsNamesLast;
   private boolean __expraContactsNamesLast;
   private boolean getClueaContactsNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesLast != __evalNum))
         {
            __evalNumaContactsNamesLast = __evalNum;
            __expraContactsNamesLast = (getClueaNotSiblings(q, m) && (!getClueaContactsNamesFirstAndLast(q, m))) && __exists255(q, m);
         };
      return __expraContactsNamesLast;
   };
   private int __evalNummContactsNamesLast;
   private boolean __exprmContactsNamesLast;
   private boolean getCluemContactsNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummContactsNamesLast != __evalNum))
         {
            __evalNummContactsNamesLast = __evalNum;
            __exprmContactsNamesLast = getClueaContactsNamesLast(q, m);
         };
      return __exprmContactsNamesLast;
   };
   private boolean __exists258(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      boolean $756 = false;
      boolean $758 = false;
      boolean z$759;
      java.lang.String $760 = null;
      boolean z$761;
      for (int k = 0; k < q.names.length; k = k + 1)
         {
            $756 = q.names[k].__v_nameL;
            z$759 = false;
            z$761 = false;
            if ((!($756 && (((!z$759) && (z$759 = true)) ?(($758 = Soundex.soundex(q.contacts[i].nameL).equals(Soundex.soundex(q.names[k].nameL)))) : ($758)))))
               continue ;
            for (int l = 0; l < m.names.length; l = l + 1)
               {
                  if (((($756 && m.names[l].__v_nameL) && (((!z$759) && (z$759 = true)) ?(($758 = Soundex.soundex(q.contacts[i].nameL).equals(Soundex.soundex(q.names[k].nameL)))) : ($758))) && (((!z$761) && (z$761 = true)) ?(($760 = Soundex.soundex(m.contacts[j].nameL))) : ($760)).equals(Soundex.soundex(m.names[l].nameL))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists257(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $762 = false;
      java.lang.String $764 = null;
      boolean z$765;
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            $762 = q.contacts[i].__v_nameL;
            z$765 = false;
            if ((!$762))
               continue ;
            for (int j = 0; j < m.contacts.length; j = j + 1)
               {
                  if (((($762 && m.contacts[j].__v_nameL) && (((!z$765) && (z$765 = true)) ?(($764 = Soundex.soundex(q.contacts[i].nameL))) : ($764)).equals(Soundex.soundex(m.contacts[j].nameL))) && (!__exists258(q, m, i, j))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaSoundexContactsNamesLast;
   private boolean __expraSoundexContactsNamesLast;
   private boolean getClueaSoundexContactsNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSoundexContactsNamesLast != __evalNum))
         {
            __evalNumaSoundexContactsNamesLast = __evalNum;
            __expraSoundexContactsNamesLast = (getClueaNotSiblings(q, m) && (!(getClueaContactsNamesFirstAndLast(q, m) || getClueaContactsNamesLast(q, m)))) && __exists257(q, m);
         };
      return __expraSoundexContactsNamesLast;
   };
   private int __evalNummSoundexContactsNamesLast;
   private boolean __exprmSoundexContactsNamesLast;
   private boolean getCluemSoundexContactsNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSoundexContactsNamesLast != __evalNum))
         {
            __evalNummSoundexContactsNamesLast = __evalNum;
            __exprmSoundexContactsNamesLast = getClueaSoundexContactsNamesLast(q, m);
         };
      return __exprmSoundexContactsNamesLast;
   };
   private boolean __exists259(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $766 = false;
      java.lang.String $768 = null;
      boolean z$769;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $766 = q.contacts[__i0].__v_nameMaidn;
            z$769 = false;
            if ((!$766))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((($766 && m.contacts[__j0].__v_nameMaidn) && m.contacts[__j0].nameMaidn.equals(((!z$769) && (z$769 = true)) ?(($768 = q.contacts[__i0].nameMaidn)) : ($768))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaContactsNamesMaiden;
   private boolean __expraContactsNamesMaiden;
   private boolean getClueaContactsNamesMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesMaiden != __evalNum))
         {
            __evalNumaContactsNamesMaiden = __evalNum;
            __expraContactsNamesMaiden = getClueaNotSiblings(q, m) && __exists259(q, m);
         };
      return __expraContactsNamesMaiden;
   };
   private int __evalNummContactsNamesMaiden;
   private boolean __exprmContactsNamesMaiden;
   private boolean getCluemContactsNamesMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummContactsNamesMaiden != __evalNum))
         {
            __evalNummContactsNamesMaiden = __evalNum;
            __exprmContactsNamesMaiden = getClueaContactsNamesMaiden(q, m);
         };
      return __exprmContactsNamesMaiden;
   };
   private boolean __exists261(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int k = 0; k < q.names.length; k = k + 1)
         {
            if (((q.names[k].__v_nameL && q.mothers[i].mothers_maiden_name.equals(q.names[k].nameL)) || (q.names[k].__v_nameMaidn && q.mothers[i].mothers_maiden_name.equals(q.names[k].nameMaidn))))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists262(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int l = 0; l < m.names.length; l = l + 1)
         {
            if (((m.names[l].__v_nameL && m.mothers[j].mothers_maiden_name.equals(m.names[l].nameL)) || (m.names[l].__v_nameMaidn && m.mothers[j].mothers_maiden_name.equals(m.names[l].nameMaidn))))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists260(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $770 = false;
      java.lang.String $772 = null;
      boolean z$773;
      for (int i = 0; i < q.mothers.length; i = i + 1)
         {
            $770 = q.mothers[i].__v_mothers_maiden_name;
            z$773 = false;
            if ((!$770))
               continue ;
            for (int j = 0; j < m.mothers.length; j = j + 1)
               {
                  if (((($770 && m.mothers[j].__v_mothers_maiden_name) && (((!z$773) && (z$773 = true)) ?(($772 = q.mothers[i].mothers_maiden_name)) : ($772)).equals(m.mothers[j].mothers_maiden_name)) && (!(__exists261(q, m, i, j) && __exists262(q, m, i, j)))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaMothersMaiden;
   private boolean __expraMothersMaiden;
   private boolean getClueaMothersMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMothersMaiden != __evalNum))
         {
            __evalNumaMothersMaiden = __evalNum;
            __expraMothersMaiden = getClueaNotSiblings(q, m) && __exists260(q, m);
         };
      return __expraMothersMaiden;
   };
   private int __evalNummMothersMaiden;
   private boolean __exprmMothersMaiden;
   private boolean getCluemMothersMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummMothersMaiden != __evalNum))
         {
            __evalNummMothersMaiden = __evalNum;
            __exprmMothersMaiden = getClueaMothersMaiden(q, m);
         };
      return __exprmMothersMaiden;
   };
   private boolean __exists264(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int k = 0; k < q.names.length; k = k + 1)
         {
            if (((q.names[k].__v_nameL && Soundex.soundex(q.mothers[i].mothers_maiden_name).equals(Soundex.soundex(q.names[k].nameL))) || (q.names[k].__v_nameMaidn && Soundex.soundex(q.mothers[i].mothers_maiden_name).equals(Soundex.soundex(q.names[k].nameMaidn)))))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists265(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int l = 0; l < m.names.length; l = l + 1)
         {
            if (((m.names[l].__v_nameL && Soundex.soundex(m.mothers[j].mothers_maiden_name).equals(Soundex.soundex(m.names[l].nameL))) || (m.names[l].__v_nameMaidn && Soundex.soundex(m.mothers[j].mothers_maiden_name).equals(Soundex.soundex(m.names[l].nameMaidn)))))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists263(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $774 = false;
      java.lang.String $776 = null;
      boolean z$777;
      for (int i = 0; i < q.mothers.length; i = i + 1)
         {
            $774 = q.mothers[i].__v_mothers_maiden_name;
            z$777 = false;
            if ((!$774))
               continue ;
            for (int j = 0; j < m.mothers.length; j = j + 1)
               {
                  if (((($774 && m.mothers[j].__v_mothers_maiden_name) && (((!z$777) && (z$777 = true)) ?(($776 = Soundex.soundex(q.mothers[i].mothers_maiden_name))) : ($776)).equals(Soundex.soundex(m.mothers[j].mothers_maiden_name))) && (!(__exists264(q, m, i, j) && __exists265(q, m, i, j)))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaSoundexMothersMaiden;
   private boolean __expraSoundexMothersMaiden;
   private boolean getClueaSoundexMothersMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSoundexMothersMaiden != __evalNum))
         {
            __evalNumaSoundexMothersMaiden = __evalNum;
            __expraSoundexMothersMaiden = __exists263(q, m);
         };
      return __expraSoundexMothersMaiden;
   };
   private int __evalNumaSoundexMothersMaiden2;
   private boolean __expraSoundexMothersMaiden2;
   private boolean getClueaSoundexMothersMaiden2(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSoundexMothersMaiden2 != __evalNum))
         {
            __evalNumaSoundexMothersMaiden2 = __evalNum;
            __expraSoundexMothersMaiden2 = (getClueaNotSiblings(q, m) && (!getClueaMothersMaiden(q, m))) && getClueaSoundexMothersMaiden(q, m);
         };
      return __expraSoundexMothersMaiden2;
   };
   private int __evalNumdSoundexMothersMaiden2;
   private boolean __exprdSoundexMothersMaiden2;
   private boolean getCluedSoundexMothersMaiden2(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSoundexMothersMaiden2 != __evalNum))
         {
            __evalNumdSoundexMothersMaiden2 = __evalNum;
            __exprdSoundexMothersMaiden2 = getClueaSoundexMothersMaiden2(q, m);
         };
      return __exprdSoundexMothersMaiden2;
   };
   private boolean __exists266(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $778 = false;
      java.util.Date $780 = null;
      boolean z$781;
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         {
            $778 = q.mothers[__i0].__v_mothers_dob;
            z$781 = false;
            if ((!$778))
               continue ;
            for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
               {
                  if ((($778 && m.mothers[__j0].__v_mothers_dob) && m.mothers[__j0].mothers_dob.equals(((!z$781) && (z$781 = true)) ?(($780 = q.mothers[__i0].mothers_dob)) : ($780))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaMothersDob;
   private boolean __expraMothersDob;
   private boolean getClueaMothersDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMothersDob != __evalNum))
         {
            __evalNumaMothersDob = __evalNum;
            __expraMothersDob = __exists266(q, m);
         };
      return __expraMothersDob;
   };
   private int __evalNummMothersDob;
   private boolean __exprmMothersDob;
   private boolean getCluemMothersDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummMothersDob != __evalNum))
         {
            __evalNummMothersDob = __evalNum;
            __exprmMothersDob = getClueaMothersDob(q, m);
         };
      return __exprmMothersDob;
   };
   private boolean __exists267(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $782 = false;
      java.util.Date $784 = null;
      boolean z$785;
      java.util.Date $786 = null;
      boolean z$787;
      java.util.Date $788 = null;
      boolean z$789;
      for (int i = 0; i < q.mothers.length; i = i + 1)
         {
            $782 = q.mothers[i].__v_mothers_dob;
            z$785 = false;
            z$787 = false;
            z$789 = false;
            if ((!$782))
               continue ;
            for (int j = 0; j < m.mothers.length; j = j + 1)
               {
                  if ((($782 && m.mothers[j].__v_mothers_dob) && ((DateUtils.sameDayAndMonth(((!z$785) && (z$785 = true)) ?(($784 = q.mothers[i].mothers_dob)) : ($784), m.mothers[j].mothers_dob) || DateUtils.missingNumber(((!z$787) && (z$787 = true)) ?(($786 = q.mothers[i].mothers_dob)) : ($786), m.mothers[j].mothers_dob)) || DateUtils.swappedDayMonth(((!z$789) && (z$789 = true)) ?(($788 = q.mothers[i].mothers_dob)) : ($788), m.mothers[j].mothers_dob))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaMothersDobApprox;
   private boolean __expraMothersDobApprox;
   private boolean getClueaMothersDobApprox(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMothersDobApprox != __evalNum))
         {
            __evalNumaMothersDobApprox = __evalNum;
            __expraMothersDobApprox = (getClueaNotSiblings(q, m) && (!getClueaMothersDob(q, m))) && __exists267(q, m);
         };
      return __expraMothersDobApprox;
   };
   private int __evalNummMothersDobApprox;
   private boolean __exprmMothersDobApprox;
   private boolean getCluemMothersDobApprox(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummMothersDobApprox != __evalNum))
         {
            __evalNummMothersDobApprox = __evalNum;
            __exprmMothersDobApprox = getClueaMothersDobApprox(q, m);
         };
      return __exprmMothersDobApprox;
   };
   private boolean __exists268(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         {
            if (q.mothers[__i0].__v_mothers_dob)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists269(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         {
            if (m.mothers[__j0].__v_mothers_dob)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all270(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $790 = false;
      java.util.Date $792 = null;
      boolean z$793;
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         {
            $790 = q.mothers[__i0].__v_mothers_dob;
            z$793 = false;
            if ((!$790))
               continue ;
            for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($790 && m.mothers[__j0].__v_mothers_dob) && m.mothers[__j0].mothers_dob.equals(((!z$793) && (z$793 = true)) ?(($792 = q.mothers[__i0].mothers_dob)) : ($792))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffMothersDob;
   private boolean __expraDiffMothersDob;
   private boolean getClueaDiffMothersDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffMothersDob != __evalNum))
         {
            __evalNumaDiffMothersDob = __evalNum;
            __expraDiffMothersDob = (__exists268(q, m) && __exists269(q, m)) && __all270(q, m);
         };
      return __expraDiffMothersDob;
   };
   private int __evalNumdMothersDob;
   private boolean __exprdMothersDob;
   private boolean getCluedMothersDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMothersDob != __evalNum))
         {
            __evalNumdMothersDob = __evalNum;
            __exprdMothersDob = getClueaDiffMothersDob(q, m);
         };
      return __exprdMothersDob;
   };
   private boolean __swap271(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_dob)
            __lacc.add(q.names[__i0].dob);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         if (q.mothers[__i0].__v_mothers_dob)
            __lacc.add(q.mothers[__i0].mothers_dob);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_dob)
            __lacc.add(m.names[__j0].dob);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         if (m.mothers[__j0].__v_mothers_dob)
            __lacc.add(m.mothers[__j0].mothers_dob);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private float __quant272(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      float __e = Float.MAX_VALUE;
      __quant272l: for (int i = 0; i < q.names.length; i = i + 1)
         for (int j = 0; j < m.names.length; j = j + 1)
            if ((q.names[i].__v_dob && m.names[j].__v_dob))
               {
                  float __v = DateUtils.daysApart(q.names[i].dob, m.names[j].dob);
                  if ((__v < __e))
                     __e = __v;
               };
      return __e;
   };
   private int __evalNumaDiffDobIsMothersDob;
   private boolean __expraDiffDobIsMothersDob;
   private boolean getClueaDiffDobIsMothersDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffDobIsMothersDob != __evalNum))
         {
            __evalNumaDiffDobIsMothersDob = __evalNum;
            __expraDiffDobIsMothersDob = __swap271(q, m) && (__quant272(q, m) > (16 * 365));
         };
      return __expraDiffDobIsMothersDob;
   };
   private int __evalNumdDobIsMothersDob;
   private boolean __exprdDobIsMothersDob;
   private boolean getCluedDobIsMothersDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdDobIsMothersDob != __evalNum))
         {
            __evalNumdDobIsMothersDob = __evalNum;
            __exprdDobIsMothersDob = getClueaDiffDobIsMothersDob(q, m);
         };
      return __exprdDobIsMothersDob;
   };
   private boolean __swap273(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameF)
            __lacc.add(q.names[__i0].nameF);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameL)
            __lacc.add(q.contacts[__i0].nameL);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameF)
            __lacc.add(m.names[__j0].nameF);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameL)
            __lacc.add(m.contacts[__j0].nameL);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaContactsNamesLastPatientNamesFirst;
   private boolean __expraContactsNamesLastPatientNamesFirst;
   private boolean getClueaContactsNamesLastPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesLastPatientNamesFirst != __evalNum))
         {
            __evalNumaContactsNamesLastPatientNamesFirst = __evalNum;
            __expraContactsNamesLastPatientNamesFirst = __swap273(q, m);
         };
      return __expraContactsNamesLastPatientNamesFirst;
   };
   private int __evalNummContactsNamesLastPatientNamesFirst;
   private boolean __exprmContactsNamesLastPatientNamesFirst;
   private boolean getCluemContactsNamesLastPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummContactsNamesLastPatientNamesFirst != __evalNum))
         {
            __evalNummContactsNamesLastPatientNamesFirst = __evalNum;
            __exprmContactsNamesLastPatientNamesFirst = getClueaContactsNamesLastPatientNamesFirst(q, m);
         };
      return __exprmContactsNamesLastPatientNamesFirst;
   };
   private boolean __swap274(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(q.names[__i0].nameL);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameL)
            __lacc.add(q.contacts[__i0].nameL);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(m.names[__j0].nameL);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameL)
            __lacc.add(m.contacts[__j0].nameL);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaContactsNamesLastPatientNamesLast;
   private boolean __expraContactsNamesLastPatientNamesLast;
   private boolean getClueaContactsNamesLastPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesLastPatientNamesLast != __evalNum))
         {
            __evalNumaContactsNamesLastPatientNamesLast = __evalNum;
            __expraContactsNamesLastPatientNamesLast = (!(getClueaPatientNamesLast(q, m) || approximateLastNameMatch)) && __swap274(q, m);
         };
      return __expraContactsNamesLastPatientNamesLast;
   };
   private int __evalNummContactsNamesLastPatientNamesLast;
   private boolean __exprmContactsNamesLastPatientNamesLast;
   private boolean getCluemContactsNamesLastPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummContactsNamesLastPatientNamesLast != __evalNum))
         {
            __evalNummContactsNamesLastPatientNamesLast = __evalNum;
            __exprmContactsNamesLastPatientNamesLast = getClueaContactsNamesLastPatientNamesLast(q, m);
         };
      return __exprmContactsNamesLastPatientNamesLast;
   };
   private boolean __swap275(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(q.names[__i0].nameL);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         if (q.mothers[__i0].__v_mothers_maiden_name)
            __lacc.add(q.mothers[__i0].mothers_maiden_name);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(m.names[__j0].nameL);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         if (m.mothers[__j0].__v_mothers_maiden_name)
            __lacc.add(m.mothers[__j0].mothers_maiden_name);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private boolean __swap276(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(q.names[__i0].nameL);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameMaidn)
            __lacc.add(q.contacts[__i0].nameMaidn);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(m.names[__j0].nameL);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameMaidn)
            __lacc.add(m.contacts[__j0].nameMaidn);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaContactsNamesMaidenPatientNamesLast;
   private boolean __expraContactsNamesMaidenPatientNamesLast;
   private boolean getClueaContactsNamesMaidenPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesMaidenPatientNamesLast != __evalNum))
         {
            __evalNumaContactsNamesMaidenPatientNamesLast = __evalNum;
            __expraContactsNamesMaidenPatientNamesLast = (!((getClueaPatientNamesLast(q, m) || approximateLastNameMatch) || getClueaContactsNamesLastPatientNamesLast(q, m))) && (__swap275(q, m) || __swap276(q, m));
         };
      return __expraContactsNamesMaidenPatientNamesLast;
   };
   private int __evalNummContactsNamesMaidenPatientNamesLast;
   private boolean __exprmContactsNamesMaidenPatientNamesLast;
   private boolean getCluemContactsNamesMaidenPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummContactsNamesMaidenPatientNamesLast != __evalNum))
         {
            __evalNummContactsNamesMaidenPatientNamesLast = __evalNum;
            __exprmContactsNamesMaidenPatientNamesLast = getClueaContactsNamesMaidenPatientNamesLast(q, m);
         };
      return __exprmContactsNamesMaidenPatientNamesLast;
   };
   private boolean __swap277(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(Soundex.soundex(q.names[__i0].nameL));
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         if (q.mothers[__i0].__v_mothers_maiden_name)
            __lacc.add(Soundex.soundex(q.mothers[__i0].mothers_maiden_name));
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(Soundex.soundex(m.names[__j0].nameL));
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         if (m.mothers[__j0].__v_mothers_maiden_name)
            __lacc.add(Soundex.soundex(m.mothers[__j0].mothers_maiden_name));
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private boolean __swap278(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(Soundex.soundex(q.names[__i0].nameL));
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameMaidn)
            __lacc.add(Soundex.soundex(q.contacts[__i0].nameMaidn));
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(Soundex.soundex(m.names[__j0].nameL));
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameMaidn)
            __lacc.add(Soundex.soundex(m.contacts[__j0].nameMaidn));
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaSoundexContactsNamesMaidenPatientNamesLast;
   private boolean __expraSoundexContactsNamesMaidenPatientNamesLast;
   private boolean getClueaSoundexContactsNamesMaidenPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSoundexContactsNamesMaidenPatientNamesLast != __evalNum))
         {
            __evalNumaSoundexContactsNamesMaidenPatientNamesLast = __evalNum;
            __expraSoundexContactsNamesMaidenPatientNamesLast = (!(((getClueaPatientNamesLast(q, m) || approximateLastNameMatch) || getClueaContactsNamesLastPatientNamesLast(q, m)) || getClueaContactsNamesMaidenPatientNamesLast(q, m))) && (__swap277(q, m) || __swap278(q, m));
         };
      return __expraSoundexContactsNamesMaidenPatientNamesLast;
   };
   private int __evalNummSoundexContactsNamesMaidenPatientNamesLast;
   private boolean __exprmSoundexContactsNamesMaidenPatientNamesLast;
   private boolean getCluemSoundexContactsNamesMaidenPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSoundexContactsNamesMaidenPatientNamesLast != __evalNum))
         {
            __evalNummSoundexContactsNamesMaidenPatientNamesLast = __evalNum;
            __exprmSoundexContactsNamesMaidenPatientNamesLast = getClueaSoundexContactsNamesMaidenPatientNamesLast(q, m);
         };
      return __exprmSoundexContactsNamesMaidenPatientNamesLast;
   };
   private boolean __swap279(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameF)
            __lacc.add(q.contacts[__i0].nameF);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameL)
            __lacc.add(q.contacts[__i0].nameL);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameF)
            __lacc.add(m.contacts[__j0].nameF);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameL)
            __lacc.add(m.contacts[__j0].nameL);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 2, 2);
   };
   private int __evalNumaSwapContactsNamesFirstLastExact;
   private boolean __expraSwapContactsNamesFirstLastExact;
   private boolean getClueaSwapContactsNamesFirstLastExact(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapContactsNamesFirstLastExact != __evalNum))
         {
            __evalNumaSwapContactsNamesFirstLastExact = __evalNum;
            __expraSwapContactsNamesFirstLastExact = (!getClueaContactsNamesFirstAndLast(q, m)) && __swap279(q, m);
         };
      return __expraSwapContactsNamesFirstLastExact;
   };
   private int __evalNummSwapContactsNamesFirstLastExact;
   private boolean __exprmSwapContactsNamesFirstLastExact;
   private boolean getCluemSwapContactsNamesFirstLastExact(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapContactsNamesFirstLastExact != __evalNum))
         {
            __evalNummSwapContactsNamesFirstLastExact = __evalNum;
            __exprmSwapContactsNamesFirstLastExact = getClueaSwapContactsNamesFirstLastExact(q, m);
         };
      return __exprmSwapContactsNamesFirstLastExact;
   };
   private boolean __swap280(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameF)
            __lacc.add(q.contacts[__i0].nameF);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameL)
            __lacc.add(q.contacts[__i0].nameL);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameF)
            __lacc.add(m.contacts[__j0].nameF);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameL)
            __lacc.add(m.contacts[__j0].nameL);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaSwapContactsNamesFirstLastAny;
   private boolean __expraSwapContactsNamesFirstLastAny;
   private boolean getClueaSwapContactsNamesFirstLastAny(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapContactsNamesFirstLastAny != __evalNum))
         {
            __evalNumaSwapContactsNamesFirstLastAny = __evalNum;
            __expraSwapContactsNamesFirstLastAny = (!(getClueaContactsNamesFirstAndLast(q, m) || getClueaSwapContactsNamesFirstLastExact(q, m))) && __swap280(q, m);
         };
      return __expraSwapContactsNamesFirstLastAny;
   };
   private int __evalNummSwapContactsNamesFirstLastAny;
   private boolean __exprmSwapContactsNamesFirstLastAny;
   private boolean getCluemSwapContactsNamesFirstLastAny(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapContactsNamesFirstLastAny != __evalNum))
         {
            __evalNummSwapContactsNamesFirstLastAny = __evalNum;
            __exprmSwapContactsNamesFirstLastAny = getClueaSwapContactsNamesFirstLastAny(q, m);
         };
      return __exprmSwapContactsNamesFirstLastAny;
   };
   private boolean __swap281(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameF)
            __lacc.add(Soundex.soundex(q.contacts[__i0].nameF));
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameL)
            __lacc.add(Soundex.soundex(q.contacts[__i0].nameL));
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameF)
            __lacc.add(Soundex.soundex(m.contacts[__j0].nameF));
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameL)
            __lacc.add(Soundex.soundex(m.contacts[__j0].nameL));
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 2, 2);
   };
   private int __evalNumaSwapContactsNamesFirstLastExactSoundex;
   private boolean __expraSwapContactsNamesFirstLastExactSoundex;
   private boolean getClueaSwapContactsNamesFirstLastExactSoundex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaSwapContactsNamesFirstLastExactSoundex != __evalNum))
         {
            __evalNumaSwapContactsNamesFirstLastExactSoundex = __evalNum;
            __expraSwapContactsNamesFirstLastExactSoundex = (!(getClueaContactsNamesFirstAndLast(q, m) || getClueaSwapContactsNamesFirstLastExact(q, m))) && __swap281(q, m);
         };
      return __expraSwapContactsNamesFirstLastExactSoundex;
   };
   private int __evalNummSwapContactsNamesFirstLastExactSoundex;
   private boolean __exprmSwapContactsNamesFirstLastExactSoundex;
   private boolean getCluemSwapContactsNamesFirstLastExactSoundex(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummSwapContactsNamesFirstLastExactSoundex != __evalNum))
         {
            __evalNummSwapContactsNamesFirstLastExactSoundex = __evalNum;
            __exprmSwapContactsNamesFirstLastExactSoundex = getClueaSwapContactsNamesFirstLastExactSoundex(q, m);
         };
      return __exprmSwapContactsNamesFirstLastExactSoundex;
   };
   private boolean __exists282(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $794 = false;
      java.lang.String $796 = null;
      boolean z$797;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $794 = q.contacts[__i0].__v_nameL;
            z$797 = false;
            if ((!$794))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((($794 && m.contacts[__j0].__v_nameL) && m.contacts[__j0].nameL.equals(((!z$797) && (z$797 = true)) ?(($796 = q.contacts[__i0].nameL)) : ($796))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists283(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $798 = false;
      java.lang.String $800 = null;
      boolean z$801;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $798 = q.names[__i0].__v_nameMaidn;
            z$801 = false;
            if ((!$798))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($798 && m.names[__j0].__v_nameMaidn) && m.names[__j0].nameMaidn.equals(((!z$801) && (z$801 = true)) ?(($800 = q.names[__i0].nameMaidn)) : ($800))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __swap284(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameMaidn)
            __lacc.add(q.names[__i0].nameMaidn);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameL)
            __lacc.add(q.contacts[__i0].nameL);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameMaidn)
            __lacc.add(m.names[__j0].nameMaidn);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameL)
            __lacc.add(m.contacts[__j0].nameL);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaContactsNamesLastPatientNamesMaiden;
   private boolean __expraContactsNamesLastPatientNamesMaiden;
   private boolean getClueaContactsNamesLastPatientNamesMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesLastPatientNamesMaiden != __evalNum))
         {
            __evalNumaContactsNamesLastPatientNamesMaiden = __evalNum;
            __expraContactsNamesLastPatientNamesMaiden = (!(__exists282(q, m) || __exists283(q, m))) && __swap284(q, m);
         };
      return __expraContactsNamesLastPatientNamesMaiden;
   };
   private int __evalNummContactsNamesLastPatientNamesMaiden;
   private boolean __exprmContactsNamesLastPatientNamesMaiden;
   private boolean getCluemContactsNamesLastPatientNamesMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummContactsNamesLastPatientNamesMaiden != __evalNum))
         {
            __evalNummContactsNamesLastPatientNamesMaiden = __evalNum;
            __exprmContactsNamesLastPatientNamesMaiden = getClueaContactsNamesLastPatientNamesMaiden(q, m);
         };
      return __exprmContactsNamesLastPatientNamesMaiden;
   };
   private boolean __exists285(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $802 = false;
      java.lang.String $804 = null;
      boolean z$805;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $802 = q.names[__i0].__v_nameMaidn;
            z$805 = false;
            if ((!$802))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((($802 && m.names[__j0].__v_nameMaidn) && m.names[__j0].nameMaidn.equals(((!z$805) && (z$805 = true)) ?(($804 = q.names[__i0].nameMaidn)) : ($804))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists286(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $806 = false;
      java.lang.String $808 = null;
      boolean z$809;
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         {
            $806 = q.mothers[__i0].__v_mothers_maiden_name;
            z$809 = false;
            if ((!$806))
               continue ;
            for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
               {
                  if ((($806 && m.mothers[__j0].__v_mothers_maiden_name) && m.mothers[__j0].mothers_maiden_name.equals(((!z$809) && (z$809 = true)) ?(($808 = q.mothers[__i0].mothers_maiden_name)) : ($808))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __swap287(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameMaidn)
            __lacc.add(q.names[__i0].nameMaidn);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         if (q.mothers[__i0].__v_mothers_maiden_name)
            __lacc.add(q.mothers[__i0].mothers_maiden_name);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameMaidn)
            __lacc.add(m.names[__j0].nameMaidn);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         if (m.mothers[__j0].__v_mothers_maiden_name)
            __lacc.add(m.mothers[__j0].mothers_maiden_name);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private boolean __exists288(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $810 = false;
      java.lang.String $812 = null;
      boolean z$813;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $810 = q.contacts[__i0].__v_nameMaidn;
            z$813 = false;
            if ((!$810))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((($810 && m.contacts[__j0].__v_nameMaidn) && m.contacts[__j0].nameMaidn.equals(((!z$813) && (z$813 = true)) ?(($812 = q.contacts[__i0].nameMaidn)) : ($812))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __swap289(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameMaidn)
            __lacc.add(q.names[__i0].nameMaidn);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameMaidn)
            __lacc.add(q.contacts[__i0].nameMaidn);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameMaidn)
            __lacc.add(m.names[__j0].nameMaidn);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameMaidn)
            __lacc.add(m.contacts[__j0].nameMaidn);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaContactsNamesMaidenPatientNamesMaiden;
   private boolean __expraContactsNamesMaidenPatientNamesMaiden;
   private boolean getClueaContactsNamesMaidenPatientNamesMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesMaidenPatientNamesMaiden != __evalNum))
         {
            __evalNumaContactsNamesMaidenPatientNamesMaiden = __evalNum;
            __expraContactsNamesMaidenPatientNamesMaiden = (!__exists285(q, m)) && (((!__exists286(q, m)) && __swap287(q, m)) || ((!__exists288(q, m)) && __swap289(q, m)));
         };
      return __expraContactsNamesMaidenPatientNamesMaiden;
   };
   private int __evalNummContactsNamesMaidenPatientNamesMaiden;
   private boolean __exprmContactsNamesMaidenPatientNamesMaiden;
   private boolean getCluemContactsNamesMaidenPatientNamesMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummContactsNamesMaidenPatientNamesMaiden != __evalNum))
         {
            __evalNummContactsNamesMaidenPatientNamesMaiden = __evalNum;
            __exprmContactsNamesMaidenPatientNamesMaiden = getClueaContactsNamesMaidenPatientNamesMaiden(q, m);
         };
      return __exprmContactsNamesMaidenPatientNamesMaiden;
   };
   private boolean __exists290(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $814 = false;
      java.lang.String $816 = null;
      boolean z$817;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $814 = q.contacts[__i0].__v_nameL;
            z$817 = false;
            if ((!$814))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((($814 && m.contacts[__j0].__v_nameL) && m.contacts[__j0].nameL.equals(((!z$817) && (z$817 = true)) ?(($816 = q.contacts[__i0].nameL)) : ($816))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __swap291(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         if (q.mothers[__i0].__v_mothers_maiden_name)
            __lacc.add(safeTrim(q.mothers[__i0].mothers_maiden_name));
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameL)
            __lacc.add(q.contacts[__i0].nameL);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         if (m.mothers[__j0].__v_mothers_maiden_name)
            __lacc.add(safeTrim(m.mothers[__j0].mothers_maiden_name));
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameL)
            __lacc.add(m.contacts[__j0].nameL);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private boolean __exists292(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $818 = false;
      java.lang.String $820 = null;
      boolean z$821;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $818 = q.contacts[__i0].__v_nameMaidn;
            z$821 = false;
            if ((!$818))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((($818 && m.contacts[__j0].__v_nameMaidn) && m.contacts[__j0].nameMaidn.equals(((!z$821) && (z$821 = true)) ?(($820 = q.contacts[__i0].nameMaidn)) : ($820))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __swap293(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         if (q.mothers[__i0].__v_mothers_maiden_name)
            __lacc.add(safeTrim(q.mothers[__i0].mothers_maiden_name));
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         if (q.contacts[__i0].__v_nameMaidn)
            __lacc.add(q.contacts[__i0].nameMaidn);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         if (m.mothers[__j0].__v_mothers_maiden_name)
            __lacc.add(safeTrim(m.mothers[__j0].mothers_maiden_name));
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         if (m.contacts[__j0].__v_nameMaidn)
            __lacc.add(m.contacts[__j0].nameMaidn);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private int __evalNumaContactsNamesLastMothersMaiden;
   private boolean __expraContactsNamesLastMothersMaiden;
   private boolean getClueaContactsNamesLastMothersMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactsNamesLastMothersMaiden != __evalNum))
         {
            __evalNumaContactsNamesLastMothersMaiden = __evalNum;
            __expraContactsNamesLastMothersMaiden = (!getClueaMothersMaiden(q, m)) && (((!__exists290(q, m)) && __swap291(q, m)) || ((!__exists292(q, m)) && __swap293(q, m)));
         };
      return __expraContactsNamesLastMothersMaiden;
   };
   private int __evalNummContactsNamesLastMothersMaiden;
   private boolean __exprmContactsNamesLastMothersMaiden;
   private boolean getCluemContactsNamesLastMothersMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummContactsNamesLastMothersMaiden != __evalNum))
         {
            __evalNummContactsNamesLastMothersMaiden = __evalNum;
            __exprmContactsNamesLastMothersMaiden = getClueaContactsNamesLastMothersMaiden(q, m);
         };
      return __exprmContactsNamesLastMothersMaiden;
   };
   private boolean __exists294(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            if (q.contacts[__i0].__v_nameL)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists295(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         {
            if (m.contacts[__j0].__v_nameL)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all296(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $822 = false;
      java.lang.String $824 = null;
      boolean z$825;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $822 = q.contacts[__i0].__v_nameL;
            z$825 = false;
            if ((!$822))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($822 && m.contacts[__j0].__v_nameL) && m.contacts[__j0].nameL.equals(((!z$825) && (z$825 = true)) ?(($824 = q.contacts[__i0].nameL)) : ($824))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffContactsNamesLast;
   private boolean __expraDiffContactsNamesLast;
   private boolean getClueaDiffContactsNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffContactsNamesLast != __evalNum))
         {
            __evalNumaDiffContactsNamesLast = __evalNum;
            __expraDiffContactsNamesLast = (!((getClueaSwapContactsNamesFirstLastExact(q, m) || getClueaSwapContactsNamesFirstLastExactSoundex(q, m)) || getClueaContactsNamesLastMothersMaiden(q, m))) && ((__exists294(q, m) && __exists295(q, m)) && __all296(q, m));
         };
      return __expraDiffContactsNamesLast;
   };
   private int __evalNumdContactsNamesLast;
   private boolean __exprdContactsNamesLast;
   private boolean getCluedContactsNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdContactsNamesLast != __evalNum))
         {
            __evalNumdContactsNamesLast = __evalNum;
            __exprdContactsNamesLast = getClueaDiffContactsNamesLast(q, m);
         };
      return __exprdContactsNamesLast;
   };
   private boolean __exists297(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            if (q.contacts[__i0].__v_nameL)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists298(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         {
            if (m.contacts[__j0].__v_nameL)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all299(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $826 = false;
      java.lang.String $828 = null;
      boolean z$829;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $826 = q.contacts[__i0].__v_nameL;
            z$829 = false;
            if ((!$826))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($826 && m.contacts[__j0].__v_nameL) && Soundex.soundex(m.contacts[__j0].nameL).equals(((!z$829) && (z$829 = true)) ?(($828 = Soundex.soundex(q.contacts[__i0].nameL))) : ($828))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private boolean __exists300(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            if (q.contacts[__i0].__v_nameF)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists301(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         {
            if (m.contacts[__j0].__v_nameF)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all302(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $830 = false;
      java.lang.String $832 = null;
      boolean z$833;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $830 = q.contacts[__i0].__v_nameF;
            z$833 = false;
            if ((!$830))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($830 && m.contacts[__j0].__v_nameF) && Soundex.soundex(m.contacts[__j0].nameF).equals(((!z$833) && (z$833 = true)) ?(($832 = Soundex.soundex(q.contacts[__i0].nameF))) : ($832))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffSoundexContactsNamesFirstAndLast;
   private boolean __expraDiffSoundexContactsNamesFirstAndLast;
   private boolean getClueaDiffSoundexContactsNamesFirstAndLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSoundexContactsNamesFirstAndLast != __evalNum))
         {
            __evalNumaDiffSoundexContactsNamesFirstAndLast = __evalNum;
            __expraDiffSoundexContactsNamesFirstAndLast = ((!((getClueaSwapContactsNamesFirstLastExact(q, m) || getClueaSwapContactsNamesFirstLastExactSoundex(q, m)) || getClueaContactsNamesLastMothersMaiden(q, m))) && ((__exists297(q, m) && __exists298(q, m)) && __all299(q, m))) && ((__exists300(q, m) && __exists301(q, m)) && __all302(q, m));
         };
      return __expraDiffSoundexContactsNamesFirstAndLast;
   };
   private int __evalNumdSoundexContactsNamesFirstAndLast;
   private boolean __exprdSoundexContactsNamesFirstAndLast;
   private boolean getCluedSoundexContactsNamesFirstAndLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSoundexContactsNamesFirstAndLast != __evalNum))
         {
            __evalNumdSoundexContactsNamesFirstAndLast = __evalNum;
            __exprdSoundexContactsNamesFirstAndLast = getClueaDiffSoundexContactsNamesFirstAndLast(q, m);
         };
      return __exprdSoundexContactsNamesFirstAndLast;
   };
   private boolean __exists303(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            if (q.contacts[__i0].__v_nameL)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists304(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
         {
            if (m.contacts[__j0].__v_nameL)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all305(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $834 = false;
      java.lang.String $836 = null;
      boolean z$837;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $834 = q.contacts[__i0].__v_nameL;
            z$837 = false;
            if ((!$834))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($834 && m.contacts[__j0].__v_nameL) && Soundex.soundex(m.contacts[__j0].nameL).equals(((!z$837) && (z$837 = true)) ?(($836 = Soundex.soundex(q.contacts[__i0].nameL))) : ($836))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffSoundexContactsNamesLast;
   private boolean __expraDiffSoundexContactsNamesLast;
   private boolean getClueaDiffSoundexContactsNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSoundexContactsNamesLast != __evalNum))
         {
            __evalNumaDiffSoundexContactsNamesLast = __evalNum;
            __expraDiffSoundexContactsNamesLast = (getClueaDiffContactsNamesLast(q, m) && (!getClueaDiffSoundexContactsNamesFirstAndLast(q, m))) && ((__exists303(q, m) && __exists304(q, m)) && __all305(q, m));
         };
      return __expraDiffSoundexContactsNamesLast;
   };
   private int __evalNumdSoundexContactsNamesLast;
   private boolean __exprdSoundexContactsNamesLast;
   private boolean getCluedSoundexContactsNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSoundexContactsNamesLast != __evalNum))
         {
            __evalNumdSoundexContactsNamesLast = __evalNum;
            __exprdSoundexContactsNamesLast = getClueaDiffSoundexContactsNamesLast(q, m);
         };
      return __exprdSoundexContactsNamesLast;
   };
   private boolean __swap306(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameL)
            __lacc.add(q.names[__i0].nameL);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         if (q.mothers[__i0].__v_mothers_maiden_name)
            __lacc.add(q.mothers[__i0].mothers_maiden_name);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameL)
            __lacc.add(m.names[__j0].nameL);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         if (m.mothers[__j0].__v_mothers_maiden_name)
            __lacc.add(m.mothers[__j0].mothers_maiden_name);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private boolean __swap307(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      java.lang.Object[][] qr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         if (q.names[__i0].__v_nameMaidn)
            __lacc.add(q.names[__i0].nameMaidn);
      qr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         if (q.mothers[__i0].__v_mothers_maiden_name)
            __lacc.add(q.mothers[__i0].mothers_maiden_name);
      qr[1] = __lacc.toArray();
      java.lang.Object[][] mr = new java.lang.Object[2][];
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         if (m.names[__j0].__v_nameMaidn)
            __lacc.add(m.names[__j0].nameMaidn);
      mr[0] = __lacc.toArray();
      __lacc.clear();
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         if (m.mothers[__j0].__v_mothers_maiden_name)
            __lacc.add(m.mothers[__j0].mothers_maiden_name);
      mr[1] = __lacc.toArray();
      return com.choicemaker.cm.core.util.Swap.swapsame(qr, mr, 1, 1);
   };
   private boolean __exists308(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         {
            if (q.mothers[__i0].__v_mothers_maiden_name)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists309(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         {
            if (m.mothers[__j0].__v_mothers_maiden_name)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all310(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $838 = false;
      java.lang.String $840 = null;
      boolean z$841;
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         {
            $838 = q.mothers[__i0].__v_mothers_maiden_name;
            z$841 = false;
            if ((!$838))
               continue ;
            for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($838 && m.mothers[__j0].__v_mothers_maiden_name) && m.mothers[__j0].mothers_maiden_name.equals(((!z$841) && (z$841 = true)) ?(($840 = q.mothers[__i0].mothers_maiden_name)) : ($840))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private boolean __exists311(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $842 = false;
      java.lang.String $844 = null;
      boolean z$845;
      for (int i = 0; i < q.mothers.length; i = i + 1)
         {
            $842 = q.mothers[i].__v_mothers_maiden_name;
            z$845 = false;
            if ((!$842))
               continue ;
            for (int j = 0; j < m.mothers.length; j = j + 1)
               {
                  if ((($842 && m.mothers[j].__v_mothers_maiden_name) && approximateMatch(((!z$845) && (z$845 = true)) ?(($844 = q.mothers[i].mothers_maiden_name)) : ($844), m.mothers[j].mothers_maiden_name)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffMothersMaiden;
   private boolean __expraDiffMothersMaiden;
   private boolean getClueaDiffMothersMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffMothersMaiden != __evalNum))
         {
            __evalNumaDiffMothersMaiden = __evalNum;
            __expraDiffMothersMaiden = (((!__swap306(q, m)) && (!__swap307(q, m))) && ((__exists308(q, m) && __exists309(q, m)) && __all310(q, m))) && (!__exists311(q, m));
         };
      return __expraDiffMothersMaiden;
   };
   private int __evalNumdMothersMaiden;
   private boolean __exprdMothersMaiden;
   private boolean getCluedMothersMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMothersMaiden != __evalNum))
         {
            __evalNumdMothersMaiden = __evalNum;
            __exprdMothersMaiden = getClueaDiffMothersMaiden(q, m);
         };
      return __exprdMothersMaiden;
   };
   private boolean __exists312(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         {
            if (q.mothers[__i0].__v_mothers_maiden_name)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists313(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
         {
            if (m.mothers[__j0].__v_mothers_maiden_name)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all314(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $846 = false;
      java.lang.String $848 = null;
      boolean z$849;
      for (int __i0 = 0; __i0 < q.mothers.length; __i0 = __i0 + 1)
         {
            $846 = q.mothers[__i0].__v_mothers_maiden_name;
            z$849 = false;
            if ((!$846))
               continue ;
            for (int __j0 = 0; __j0 < m.mothers.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($846 && m.mothers[__j0].__v_mothers_maiden_name) && Soundex.soundex(m.mothers[__j0].mothers_maiden_name).equals(((!z$849) && (z$849 = true)) ?(($848 = Soundex.soundex(q.mothers[__i0].mothers_maiden_name))) : ($848))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDiffSoundexMothersMaiden;
   private boolean __expraDiffSoundexMothersMaiden;
   private boolean getClueaDiffSoundexMothersMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSoundexMothersMaiden != __evalNum))
         {
            __evalNumaDiffSoundexMothersMaiden = __evalNum;
            __expraDiffSoundexMothersMaiden = getClueaDiffMothersMaiden(q, m) && ((__exists312(q, m) && __exists313(q, m)) && __all314(q, m));
         };
      return __expraDiffSoundexMothersMaiden;
   };
   private int __evalNumdSoundexMothersMaiden;
   private boolean __exprdSoundexMothersMaiden;
   private boolean getCluedSoundexMothersMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSoundexMothersMaiden != __evalNum))
         {
            __evalNumdSoundexMothersMaiden = __evalNum;
            __exprdSoundexMothersMaiden = getClueaDiffSoundexMothersMaiden(q, m);
         };
      return __exprdSoundexMothersMaiden;
   };
   private boolean addressPieceMatch;
   private boolean __exists315(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $850 = false;
      java.lang.String $852 = null;
      boolean z$853;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $850 = q.contacts[__i0].__v_nameL;
            z$853 = false;
            if ((!$850))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((($850 && m.contacts[__j0].__v_nameL) && m.contacts[__j0].nameL.equals(((!z$853) && (z$853 = true)) ?(($852 = q.contacts[__i0].nameL)) : ($852))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists316(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $854 = false;
      java.util.Date $856 = null;
      boolean z$857;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $854 = q.names[i].__v_dob;
            z$857 = false;
            if ((!$854))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($854 && m.names[j].__v_dob) && (DateUtils.daysApart(((!z$857) && (z$857 = true)) ?(($856 = q.names[i].dob)) : ($856), m.names[j].dob) > 270)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffSiblings;
   private boolean __expraDiffSiblings;
   private boolean getClueaDiffSiblings(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffSiblings != __evalNum))
         {
            __evalNumaDiffSiblings = __evalNum;
            __expraDiffSiblings = ((((!getClueaPatientNamesFirst(q, m)) && ((addressPieceMatch || __exists315(q, m)) || getClueaSoundexMothersMaiden(q, m))) && (getClueaPatientNamesLast(q, m) || approximateLastNameMatch)) && (!(getClueaBirthday(q, m) || approximateMatchingDobs))) && __exists316(q, m);
         };
      return __expraDiffSiblings;
   };
   private int __evalNumdSiblings;
   private boolean __exprdSiblings;
   private boolean getCluedSiblings(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdSiblings != __evalNum))
         {
            __evalNumdSiblings = __evalNum;
            __exprdSiblings = getClueaDiffSiblings(q, m);
         };
      return __exprdSiblings;
   };
   private boolean __exists317(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $858 = false;
      java.lang.String $860 = null;
      boolean z$861;
      for (int __i0 = 0; __i0 < q.contacts.length; __i0 = __i0 + 1)
         {
            $858 = q.contacts[__i0].__v_nameL;
            z$861 = false;
            if ((!$858))
               continue ;
            for (int __j0 = 0; __j0 < m.contacts.length; __j0 = __j0 + 1)
               {
                  if ((($858 && m.contacts[__j0].__v_nameL) && m.contacts[__j0].nameL.equals(((!z$861) && (z$861 = true)) ?(($860 = q.contacts[__i0].nameL)) : ($860))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists318(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $862 = false;
      java.util.Date $864 = null;
      boolean z$865;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $862 = q.names[i].__v_dob;
            z$865 = false;
            if ((!$862))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($862 && m.names[j].__v_dob) && (DateUtils.daysApart(((!z$865) && (z$865 = true)) ?(($864 = q.names[i].dob)) : ($864), m.names[j].dob) < 2)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffTwinsDEPRECATED;
   private boolean __expraDiffTwinsDEPRECATED;
   private boolean getClueaDiffTwinsDEPRECATED(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffTwinsDEPRECATED != __evalNum))
         {
            __evalNumaDiffTwinsDEPRECATED = __evalNum;
            __expraDiffTwinsDEPRECATED = (((((((q.multi_birth_ind != 'Y') && (m.multi_birth_ind != 'Y')) && getClueaDiffPatientNamesFirst(q, m)) && (!approximateFirstNameMatch)) && (!(((getClueaSwapPatientNamesFirstMiddleExact(q, m) || getClueaSwapPatientNamesFirstMiddleAny(q, m)) || getClueaSwapPatientNamesFirstLastExact(q, m)) || getClueaSwapPatientNamesFirstLastAny(q, m)))) && ((addressPieceMatch || __exists317(q, m)) || getClueaSoundexMothersMaiden(q, m))) && (getClueaPatientNamesLast(q, m) || approximateLastNameMatch)) && __exists318(q, m);
         };
      return __expraDiffTwinsDEPRECATED;
   };
   private int __evalNumaDiffTwins;
   private boolean __expraDiffTwins;
   private boolean getClueaDiffTwins(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffTwins != __evalNum))
         {
            __evalNumaDiffTwins = __evalNum;
            __expraDiffTwins = (!getClueisVR(q, m)) && getClueaDiffTwinsDEPRECATED(q, m);
         };
      return __expraDiffTwins;
   };
   private int __evalNumdTwins;
   private boolean __exprdTwins;
   private boolean getCluedTwins(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdTwins != __evalNum))
         {
            __evalNumdTwins = __evalNum;
            __exprdTwins = getClueaDiffTwins(q, m);
         };
      return __exprdTwins;
   };
   private boolean __exists319(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $866 = false;
      java.util.Date $868 = null;
      boolean z$869;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $866 = q.names[i].__v_dob;
            z$869 = false;
            if ((!$866))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((($866 && m.names[j].__v_dob) && (DateUtils.daysApart(((!z$869) && (z$869 = true)) ?(($868 = q.names[i].dob)) : ($868), m.names[j].dob) < 2)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffTwinsScantyDEPRECATED;
   private boolean __expraDiffTwinsScantyDEPRECATED;
   private boolean getClueaDiffTwinsScantyDEPRECATED(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffTwinsScantyDEPRECATED != __evalNum))
         {
            __evalNumaDiffTwinsScantyDEPRECATED = __evalNum;
            __expraDiffTwinsScantyDEPRECATED = ((((((!getClueaDiffTwins(q, m)) && ((q.multi_birth_ind != 'Y') && (m.multi_birth_ind != 'Y'))) && getClueaDiffPatientNamesFirst(q, m)) && (!approximateFirstNameMatch)) && (!(((getClueaSwapPatientNamesFirstMiddleExact(q, m) || getClueaSwapPatientNamesFirstMiddleAny(q, m)) || getClueaSwapPatientNamesFirstLastExact(q, m)) || getClueaSwapPatientNamesFirstLastAny(q, m)))) && (getClueaPatientNamesLast(q, m) || approximateLastNameMatch)) && __exists319(q, m);
         };
      return __expraDiffTwinsScantyDEPRECATED;
   };
   private int __evalNumaDiffTwinsScanty;
   private boolean __expraDiffTwinsScanty;
   private boolean getClueaDiffTwinsScanty(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffTwinsScanty != __evalNum))
         {
            __evalNumaDiffTwinsScanty = __evalNum;
            __expraDiffTwinsScanty = (!getClueisVR(q, m)) && getClueaDiffTwinsScantyDEPRECATED(q, m);
         };
      return __expraDiffTwinsScanty;
   };
   private int __evalNumdTwinsScanty;
   private boolean __exprdTwinsScanty;
   private boolean getCluedTwinsScanty(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdTwinsScanty != __evalNum))
         {
            __evalNumdTwinsScanty = __evalNum;
            __exprdTwinsScanty = getClueaDiffTwinsScanty(q, m);
         };
      return __exprdTwinsScanty;
   };
   private int __evalNumaMbiAndDifferentFirstOrMiddleName;
   private boolean __expraMbiAndDifferentFirstOrMiddleName;
   private boolean getClueaMbiAndDifferentFirstOrMiddleName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMbiAndDifferentFirstOrMiddleName != __evalNum))
         {
            __evalNumaMbiAndDifferentFirstOrMiddleName = __evalNum;
            __expraMbiAndDifferentFirstOrMiddleName = ((q.multi_birth_ind == 'Y') || (m.multi_birth_ind == 'Y')) && ((!getClueaPatientNamesFirst(q, m)) || getClueaDiffPatientNamesMiddle(q, m));
         };
      return __expraMbiAndDifferentFirstOrMiddleName;
   };
   private int __evalNumdMbiAndDifferentFirstOrMiddleName;
   private boolean __exprdMbiAndDifferentFirstOrMiddleName;
   private boolean getCluedMbiAndDifferentFirstOrMiddleName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMbiAndDifferentFirstOrMiddleName != __evalNum))
         {
            __evalNumdMbiAndDifferentFirstOrMiddleName = __evalNum;
            __exprdMbiAndDifferentFirstOrMiddleName = getClueaMbiAndDifferentFirstOrMiddleName(q, m);
         };
      return __exprdMbiAndDifferentFirstOrMiddleName;
   };
   private int __evalNumaMbiAndApproximateFirstName;
   private boolean __expraMbiAndApproximateFirstName;
   private boolean getClueaMbiAndApproximateFirstName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMbiAndApproximateFirstName != __evalNum))
         {
            __evalNumaMbiAndApproximateFirstName = __evalNum;
            __expraMbiAndApproximateFirstName = (getClueaMbiAndDifferentFirstOrMiddleName(q, m) && (!getClueaPatientNamesFirst(q, m))) && approximateFirstNameMatch;
         };
      return __expraMbiAndApproximateFirstName;
   };
   private int __evalNummMbiAndApproximateFirstName;
   private boolean __exprmMbiAndApproximateFirstName;
   private boolean getCluemMbiAndApproximateFirstName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummMbiAndApproximateFirstName != __evalNum))
         {
            __evalNummMbiAndApproximateFirstName = __evalNum;
            __exprmMbiAndApproximateFirstName = getClueaMbiAndApproximateFirstName(q, m);
         };
      return __exprmMbiAndApproximateFirstName;
   };
   private boolean __exists320(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.ids.length; i = i + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists321(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.ids.length; i = i + 1)
         {

               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumaVitalAndNoMBI;
   private boolean __expraVitalAndNoMBI;
   private boolean getClueaVitalAndNoMBI(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaVitalAndNoMBI != __evalNum))
         {
            __evalNumaVitalAndNoMBI = __evalNum;
            __expraVitalAndNoMBI = (getClueaDiffTwins(q, m) && (!getClueaMbiAndDifferentFirstOrMiddleName(q, m))) && ((((q.multi_birth_ind == 'N') && (!"LEAD".equals(q.src_system_id))) && __exists320(q, m)) || (((((m.multi_birth_ind == 'N') && q.__v_src_system_id) && m.__v_src_system_id) && (!q.src_system_id.equals(m.src_system_id))) && __exists321(q, m)));
         };
      return __expraVitalAndNoMBI;
   };
   private int __evalNummVitalAndNoMBI;
   private boolean __exprmVitalAndNoMBI;
   private boolean getCluemVitalAndNoMBI(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummVitalAndNoMBI != __evalNum))
         {
            __evalNummVitalAndNoMBI = __evalNum;
            __exprmVitalAndNoMBI = getClueaVitalAndNoMBI(q, m);
         };
      return __exprmVitalAndNoMBI;
   };
   private boolean __all322(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.ids.length; i = i + 1)
         {

               {
                  return false;
               };
         };
      return true;
   };
   private boolean __exists323(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $870 = false;
      java.lang.String $872 = null;
      boolean z$873;
      java.lang.String $874 = null;
      boolean z$875;
      java.lang.String $876 = null;
      boolean z$877;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $870 = q.names[i].__v_nameF;
            z$873 = false;
            z$875 = false;
            z$877 = false;
            if ((!$870))
               continue ;
            for (int j = 0; j < q.names.length; j = j + 1)
               {
                  if (((((((i < j) && $870) && q.names[j].__v_nameF) && Relations.emptyIntersection("nicknames", ((!z$873) && (z$873 = true)) ?(($872 = q.names[i].nameF)) : ($872), q.names[j].nameF)) && (!(((!z$875) && (z$875 = true)) ?(($874 = Soundex.soundex(q.names[i].nameF))) : ($874)).equals(Soundex.soundex(q.names[j].nameF)))) && (JumbleDistance.jumbleDistance(((!z$877) && (z$877 = true)) ?(($876 = q.names[i].nameF)) : ($876), q.names[j].nameF, 4) >= 4)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaInconsistentFirstNamesQNotVR;
   private boolean __expraInconsistentFirstNamesQNotVR;
   private boolean getClueaInconsistentFirstNamesQNotVR(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaInconsistentFirstNamesQNotVR != __evalNum))
         {
            __evalNumaInconsistentFirstNamesQNotVR = __evalNum;
            __expraInconsistentFirstNamesQNotVR = (((!getClueaSwapPatientNamesFirstMiddleExact(q, m)) && (!getClueaSwapPatientNamesFirstLastExact(q, m))) && __all322(q, m)) && __exists323(q, m);
         };
      return __expraInconsistentFirstNamesQNotVR;
   };
   private boolean __all324(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.ids.length; i = i + 1)
         {

               {
                  return false;
               };
         };
      return true;
   };
   private boolean __exists325(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $878 = false;
      java.lang.String $880 = null;
      boolean z$881;
      java.lang.String $882 = null;
      boolean z$883;
      java.lang.String $884 = null;
      boolean z$885;
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            $878 = m.names[i].__v_nameF;
            z$881 = false;
            z$883 = false;
            z$885 = false;
            if ((!$878))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((((((i < j) && $878) && m.names[j].__v_nameF) && Relations.emptyIntersection("nicknames", ((!z$881) && (z$881 = true)) ?(($880 = m.names[i].nameF)) : ($880), m.names[j].nameF)) && (!(((!z$883) && (z$883 = true)) ?(($882 = Soundex.soundex(m.names[i].nameF))) : ($882)).equals(Soundex.soundex(m.names[j].nameF)))) && (JumbleDistance.jumbleDistance(((!z$885) && (z$885 = true)) ?(($884 = m.names[i].nameF)) : ($884), m.names[j].nameF, 4) >= 4)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaInconsistentFirstNamesMNotVR;
   private boolean __expraInconsistentFirstNamesMNotVR;
   private boolean getClueaInconsistentFirstNamesMNotVR(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaInconsistentFirstNamesMNotVR != __evalNum))
         {
            __evalNumaInconsistentFirstNamesMNotVR = __evalNum;
            __expraInconsistentFirstNamesMNotVR = (((!getClueaSwapPatientNamesFirstMiddleExact(q, m)) && (!getClueaSwapPatientNamesFirstLastExact(q, m))) && __all324(q, m)) && __exists325(q, m);
         };
      return __expraInconsistentFirstNamesMNotVR;
   };
   private int __evalNumaInconsistentFirstNames;
   private boolean __expraInconsistentFirstNames;
   private boolean getClueaInconsistentFirstNames(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaInconsistentFirstNames != __evalNum))
         {
            __evalNumaInconsistentFirstNames = __evalNum;
            __expraInconsistentFirstNames = getClueaInconsistentFirstNamesQNotVR(q, m) || getClueaInconsistentFirstNamesMNotVR(q, m);
         };
      return __expraInconsistentFirstNames;
   };
   private int __evalNumdInconsistentFirstNamesMB;
   private boolean __exprdInconsistentFirstNamesMB;
   private boolean getCluedInconsistentFirstNamesMB(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdInconsistentFirstNamesMB != __evalNum))
         {
            __evalNumdInconsistentFirstNamesMB = __evalNum;
            __exprdInconsistentFirstNamesMB = getClueisMB(q, m) && getClueaInconsistentFirstNames(q, m);
         };
      return __exprdInconsistentFirstNamesMB;
   };
   private int __evalNumdInconsistentFirstNamesNotMB;
   private boolean __exprdInconsistentFirstNamesNotMB;
   private boolean getCluedInconsistentFirstNamesNotMB(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdInconsistentFirstNamesNotMB != __evalNum))
         {
            __evalNumdInconsistentFirstNamesNotMB = __evalNum;
            __exprdInconsistentFirstNamesNotMB = (!getClueisMB(q, m)) && getClueaInconsistentFirstNames(q, m);
         };
      return __exprdInconsistentFirstNamesNotMB;
   };
   private boolean __all326(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $886 = false;
      java.lang.String $888 = null;
      boolean z$889;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $886 = q.names[i].__v_nameF;
            z$889 = false;
            if ((!$886))
               return false;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if ((!(($886 && m.names[j].__v_nameF) && (JumbleDistance.jumbleDistance(((!z$889) && (z$889 = true)) ?(($888 = q.names[i].nameF)) : ($888), m.names[j].nameF, 4) >= 4))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumaDistinctFirstNames;
   private boolean __expraDistinctFirstNames;
   private boolean getClueaDistinctFirstNames(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDistinctFirstNames != __evalNum))
         {
            __evalNumaDistinctFirstNames = __evalNum;
            __expraDistinctFirstNames = (((!getClueaNicknameRaw(q, m)) && (!getClueaSwapPatientNamesFirstMiddleExact(q, m))) && (!getClueaSwapPatientNamesFirstLastExact(q, m))) && __all326(q, m);
         };
      return __expraDistinctFirstNames;
   };
   private int __evalNumaDistinctFirstNamesSameLastNameSameDOB;
   private boolean __expraDistinctFirstNamesSameLastNameSameDOB;
   private boolean getClueaDistinctFirstNamesSameLastNameSameDOB(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDistinctFirstNamesSameLastNameSameDOB != __evalNum))
         {
            __evalNumaDistinctFirstNamesSameLastNameSameDOB = __evalNum;
            __expraDistinctFirstNamesSameLastNameSameDOB = (getClueaDistinctFirstNames(q, m) && getClueaPatientNamesLast(q, m)) && getClueaBirthday(q, m);
         };
      return __expraDistinctFirstNamesSameLastNameSameDOB;
   };
   private int __evalNumaUncorrelatedMRN;
   private boolean __expraUncorrelatedMRN;
   private boolean getClueaUncorrelatedMRN(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaUncorrelatedMRN != __evalNum))
         {
            __evalNumaUncorrelatedMRN = __evalNum;
            __expraUncorrelatedMRN = (((!getClueaMedicalRecordIds(q, m)) && (!getClueaMedicalRecordOffBy1(q, m))) && (!getClueaMedicalRecordOffBySmallDifference(q, m))) && (!getClueaMedicalRecordSmallEditDistance(q, m));
         };
      return __expraUncorrelatedMRN;
   };
   private int __evalNumnmMBTwinCorrelationWithMrn;
   private boolean __exprnmMBTwinCorrelationWithMrn;
   private boolean getCluenmMBTwinCorrelationWithMrn(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumnmMBTwinCorrelationWithMrn != __evalNum))
         {
            __evalNumnmMBTwinCorrelationWithMrn = __evalNum;
            __exprnmMBTwinCorrelationWithMrn = (getClueisMB(q, m) && getClueaDistinctFirstNamesSameLastNameSameDOB(q, m)) && getClueaMedicalRecordOffBySmallDifference(q, m);
         };
      return __exprnmMBTwinCorrelationWithMrn;
   };
   private int __evalNumdMBTwinCorrelationWithMrn;
   private boolean __exprdMBTwinCorrelationWithMrn;
   private boolean getCluedMBTwinCorrelationWithMrn(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMBTwinCorrelationWithMrn != __evalNum))
         {
            __evalNumdMBTwinCorrelationWithMrn = __evalNum;
            __exprdMBTwinCorrelationWithMrn = getCluenmMBTwinCorrelationWithMrn(q, m);
         };
      return __exprdMBTwinCorrelationWithMrn;
   };
   private int __evalNumnmMBTwinCorrelationWithoutMrn;
   private boolean __exprnmMBTwinCorrelationWithoutMrn;
   private boolean getCluenmMBTwinCorrelationWithoutMrn(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumnmMBTwinCorrelationWithoutMrn != __evalNum))
         {
            __evalNumnmMBTwinCorrelationWithoutMrn = __evalNum;
            __exprnmMBTwinCorrelationWithoutMrn = (getClueisMB(q, m) && getClueaDistinctFirstNamesSameLastNameSameDOB(q, m)) && getClueaUncorrelatedMRN(q, m);
         };
      return __exprnmMBTwinCorrelationWithoutMrn;
   };
   private int __evalNumdMBTwinCorrelationWithoutMrn;
   private boolean __exprdMBTwinCorrelationWithoutMrn;
   private boolean getCluedMBTwinCorrelationWithoutMrn(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdMBTwinCorrelationWithoutMrn != __evalNum))
         {
            __evalNumdMBTwinCorrelationWithoutMrn = __evalNum;
            __exprdMBTwinCorrelationWithoutMrn = getCluenmMBTwinCorrelationWithoutMrn(q, m);
         };
      return __exprdMBTwinCorrelationWithoutMrn;
   };
   private int __evalNumnmTwinCorrelationNoMbWithMrn;
   private boolean __exprnmTwinCorrelationNoMbWithMrn;
   private boolean getCluenmTwinCorrelationNoMbWithMrn(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumnmTwinCorrelationNoMbWithMrn != __evalNum))
         {
            __evalNumnmTwinCorrelationNoMbWithMrn = __evalNum;
            __exprnmTwinCorrelationNoMbWithMrn = ((!getClueisMB(q, m)) && getClueaDistinctFirstNamesSameLastNameSameDOB(q, m)) && getClueaMedicalRecordOffBySmallDifference(q, m);
         };
      return __exprnmTwinCorrelationNoMbWithMrn;
   };
   private int __evalNumdTwinCorrelationNoMbWithMrn;
   private boolean __exprdTwinCorrelationNoMbWithMrn;
   private boolean getCluedTwinCorrelationNoMbWithMrn(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdTwinCorrelationNoMbWithMrn != __evalNum))
         {
            __evalNumdTwinCorrelationNoMbWithMrn = __evalNum;
            __exprdTwinCorrelationNoMbWithMrn = getCluenmTwinCorrelationNoMbWithMrn(q, m);
         };
      return __exprdTwinCorrelationNoMbWithMrn;
   };
   private int __evalNumnmTwinCorrelationNoMbWithoutMrnButSameFacility;
   private boolean __exprnmTwinCorrelationNoMbWithoutMrnButSameFacility;
   private boolean getCluenmTwinCorrelationNoMbWithoutMrnButSameFacility(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumnmTwinCorrelationNoMbWithoutMrnButSameFacility != __evalNum))
         {
            __evalNumnmTwinCorrelationNoMbWithoutMrnButSameFacility = __evalNum;
            __exprnmTwinCorrelationNoMbWithoutMrnButSameFacility = (((!getClueisMB(q, m)) && getClueaDistinctFirstNamesSameLastNameSameDOB(q, m)) && getClueaUncorrelatedMRN(q, m)) && getClueaFacilityId(q, m);
         };
      return __exprnmTwinCorrelationNoMbWithoutMrnButSameFacility;
   };
   private int __evalNumdTwinCorrelationNoMbWithoutMrnButSameFacility;
   private boolean __exprdTwinCorrelationNoMbWithoutMrnButSameFacility;
   private boolean getCluedTwinCorrelationNoMbWithoutMrnButSameFacility(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdTwinCorrelationNoMbWithoutMrnButSameFacility != __evalNum))
         {
            __evalNumdTwinCorrelationNoMbWithoutMrnButSameFacility = __evalNum;
            __exprdTwinCorrelationNoMbWithoutMrnButSameFacility = getCluenmTwinCorrelationNoMbWithoutMrnButSameFacility(q, m);
         };
      return __exprdTwinCorrelationNoMbWithoutMrnButSameFacility;
   };
   private int __evalNumaWeakTwinCorrelation;
   private boolean __expraWeakTwinCorrelation;
   private boolean getClueaWeakTwinCorrelation(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaWeakTwinCorrelation != __evalNum))
         {
            __evalNumaWeakTwinCorrelation = __evalNum;
            __expraWeakTwinCorrelation = (((!getClueisMB(q, m)) && getClueaDistinctFirstNamesSameLastNameSameDOB(q, m)) && getClueaUncorrelatedMRN(q, m)) && (!getClueaFacilityId(q, m));
         };
      return __expraWeakTwinCorrelation;
   };
   private int __evalNumdWeakTwinCorrelation;
   private boolean __exprdWeakTwinCorrelation;
   private boolean getCluedWeakTwinCorrelation(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdWeakTwinCorrelation != __evalNum))
         {
            __evalNumdWeakTwinCorrelation = __evalNum;
            __exprdWeakTwinCorrelation = getClueaWeakTwinCorrelation(q, m);
         };
      return __exprdWeakTwinCorrelation;
   };
   private boolean __exists327(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            if (q.names[__i0].__v_dob)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists328(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
         {
            if (m.names[__j0].__v_dob)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all329(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $890 = false;
      java.util.Date $892 = null;
      boolean z$893;
      for (int __i0 = 0; __i0 < q.names.length; __i0 = __i0 + 1)
         {
            $890 = q.names[__i0].__v_dob;
            z$893 = false;
            if ((!$890))
               continue ;
            for (int __j0 = 0; __j0 < m.names.length; __j0 = __j0 + 1)
               {
                  if ((!(!(($890 && m.names[__j0].__v_dob) && m.names[__j0].dob.equals(((!z$893) && (z$893 = true)) ?(($892 = q.names[__i0].dob)) : ($892))))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private boolean let332(PatientImpl q, PatientImpl m, int i, int j, int k, int l, float days) throws java.lang.Exception {
      return (days > (365 * 1.5)) && (days < (365 * 1.5));
   };
   private boolean let333(PatientImpl q, PatientImpl m, int i, int j, int k, int l, float days) throws java.lang.Exception {
      return (days > (365 * 1.5)) && (days < (365 * 1.5));
   };
   private boolean __exists331(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      boolean $894 = false;
      float $896 = 0.0F;
      boolean z$897;
      boolean $898 = false;
      boolean z$899;
      boolean $900 = false;
      boolean z$901;
      java.util.Date $902 = null;
      boolean z$903;
      java.util.Date $904 = null;
      boolean z$905;
      for (int k = 0; k < q.events.length; k = k + 1)
         {
            $894 = q.events[k].__v_event_date;
            z$897 = false;
            z$899 = false;
            z$901 = false;
            z$903 = false;
            z$905 = false;
            if ((!($894 && ((((!z$901) && (z$901 = true)) ?(($900 = ("CIR".equals(q.events[k].event_type_cd) && q.names[i].dob.before(q.events[k].event_date)) && (DateUtils.daysApart(q.names[i].dob, q.events[k].event_date) < 90))) : ($900)) || (((!z$899) && (z$899 = true)) ?(($898 = "LEAD".equals(q.events[k].event_type_cd) && q.names[i].dob.before(q.events[k].event_date))) : ($898))))))
               continue ;
            for (int l = 0; l < m.events.length; l = l + 1)
               {
                  if ((($894 && m.events[l].__v_event_date) && (((((!z$901) && (z$901 = true)) ?(($900 = ("CIR".equals(q.events[k].event_type_cd) && q.names[i].dob.before(q.events[k].event_date)) && (DateUtils.daysApart(q.names[i].dob, q.events[k].event_date) < 90))) : ($900)) || ((((!z$899) && (z$899 = true)) ?(($898 = "LEAD".equals(q.events[k].event_type_cd) && q.names[i].dob.before(q.events[k].event_date))) : ($898)) && let332(q, m, i, j, k, l, ((!z$897) && (z$897 = true)) ?(($896 = DateUtils.daysApart(q.names[i].dob, q.events[k].event_date))) : ($896)))) && ((("CIR".equals(m.events[l].event_type_cd) && m.names[j].dob.before(m.events[l].event_date)) && (DateUtils.daysApart(((!z$903) && (z$903 = true)) ?(($902 = m.names[j].dob)) : ($902), m.events[l].event_date) < 90)) || (("LEAD".equals(m.events[l].event_type_cd) && m.names[j].dob.before(m.events[l].event_date)) && let333(q, m, i, j, k, l, DateUtils.daysApart(((!z$905) && (z$905 = true)) ?(($904 = m.names[j].dob)) : ($904), m.events[l].event_date)))))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists330(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $906 = false;
      java.util.Date $908 = null;
      boolean z$909;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $906 = q.names[i].__v_dob;
            z$909 = false;
            if ((!$906))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((($906 && m.names[j].__v_dob) && (DateUtils.daysApart(((!z$909) && (z$909 = true)) ?(($908 = q.names[i].dob)) : ($908), m.names[j].dob) > 270)) && __exists331(q, m, i, j)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumaDiffDobSupportedByEvents;
   private boolean __expraDiffDobSupportedByEvents;
   private boolean getClueaDiffDobSupportedByEvents(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDiffDobSupportedByEvents != __evalNum))
         {
            __evalNumaDiffDobSupportedByEvents = __evalNum;
            __expraDiffDobSupportedByEvents = ((__exists327(q, m) && __exists328(q, m)) && __all329(q, m)) && __exists330(q, m);
         };
      return __expraDiffDobSupportedByEvents;
   };
   private int __evalNumdDobSupportedByEvents;
   private boolean __exprdDobSupportedByEvents;
   private boolean getCluedDobSupportedByEvents(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdDobSupportedByEvents != __evalNum))
         {
            __evalNumdDobSupportedByEvents = __evalNum;
            __exprdDobSupportedByEvents = getClueaDiffDobSupportedByEvents(q, m);
         };
      return __exprdDobSupportedByEvents;
   };
   private boolean __all334(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((!(!q.names[i].__v_nameF)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all335(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((!(!m.names[i].__v_nameF)))
               {
                  return false;
               };
         };
      return true;
   };
   private int __evalNumahDiffPatientNamesFirst;
   private boolean __exprahDiffPatientNamesFirst;
   private boolean getClueahDiffPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumahDiffPatientNamesFirst != __evalNum))
         {
            __evalNumahDiffPatientNamesFirst = __evalNum;
            __exprahDiffPatientNamesFirst = __all334(q, m) || __all335(q, m);
         };
      return __exprahDiffPatientNamesFirst;
   };
   private int __evalNumhdPatientNamesFirst;
   private boolean __exprhdPatientNamesFirst;
   private boolean getCluehdPatientNamesFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumhdPatientNamesFirst != __evalNum))
         {
            __evalNumhdPatientNamesFirst = __evalNum;
            __exprhdPatientNamesFirst = getClueahDiffPatientNamesFirst(q, m);
         };
      return __exprhdPatientNamesFirst;
   };
   private boolean __all336(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((!(!q.names[i].__v_nameL)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all337(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((!(!m.names[i].__v_nameL)))
               {
                  return false;
               };
         };
      return true;
   };
   private int __evalNumahDiffPatientNamesLast;
   private boolean __exprahDiffPatientNamesLast;
   private boolean getClueahDiffPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumahDiffPatientNamesLast != __evalNum))
         {
            __evalNumahDiffPatientNamesLast = __evalNum;
            __exprahDiffPatientNamesLast = __all336(q, m) || __all337(q, m);
         };
      return __exprahDiffPatientNamesLast;
   };
   private int __evalNumhdPatientNamesLast;
   private boolean __exprhdPatientNamesLast;
   private boolean getCluehdPatientNamesLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumhdPatientNamesLast != __evalNum))
         {
            __evalNumhdPatientNamesLast = __evalNum;
            __exprhdPatientNamesLast = getClueahDiffPatientNamesLast(q, m);
         };
      return __exprhdPatientNamesLast;
   };
   private boolean __all338(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((!(!q.names[i].__v_dob)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all339(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((!(!m.names[i].__v_dob)))
               {
                  return false;
               };
         };
      return true;
   };
   private int __evalNumahDiffDob;
   private boolean __exprahDiffDob;
   private boolean getClueahDiffDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumahDiffDob != __evalNum))
         {
            __evalNumahDiffDob = __evalNum;
            __exprahDiffDob = __all338(q, m) || __all339(q, m);
         };
      return __exprahDiffDob;
   };
   private int __evalNumhdDob;
   private boolean __exprhdDob;
   private boolean getCluehdDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumhdDob != __evalNum))
         {
            __evalNumhdDob = __evalNum;
            __exprhdDob = getClueahDiffDob(q, m);
         };
      return __exprhdDob;
   };
   private boolean __all340(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            if ((!(!((((((q.address[i].__v_boro_cd || q.address[i].__v_bin) || q.address[i].__v_house_no) || q.address[i].__v_street_name) || q.address[i].__v_city_name) || q.address[i].__v_state_cd) || q.address[i].__v_zipcode))))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all341(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            if ((!(!((((((m.address[i].__v_boro_cd || m.address[i].__v_bin) || m.address[i].__v_house_no) || m.address[i].__v_street_name) || m.address[i].__v_city_name) || m.address[i].__v_state_cd) || m.address[i].__v_zipcode))))
               {
                  return false;
               };
         };
      return true;
   };
   private int __evalNumahDiffAddress;
   private boolean __exprahDiffAddress;
   private boolean getClueahDiffAddress(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumahDiffAddress != __evalNum))
         {
            __evalNumahDiffAddress = __evalNum;
            __exprahDiffAddress = __all340(q, m) || __all341(q, m);
         };
      return __exprahDiffAddress;
   };
   private int __evalNumhdAddress;
   private boolean __exprhdAddress;
   private boolean getCluehdAddress(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumhdAddress != __evalNum))
         {
            __evalNumhdAddress = __evalNum;
            __exprhdAddress = getClueahDiffAddress(q, m);
         };
      return __exprhdAddress;
   };
   private boolean __all342(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $910 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $912 = null;
      boolean z$913;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $910 = q.address[i].rel;
            z$913 = false;
            for (int j = 0; j < q.address[i].rel.length; j = j + 1)
               {
                  if ((!(!($910[j].__v_apt_no || (((!z$913) && (z$913 = true)) ?(($912 = q.address[i].rel)) : ($912))[j].__v_raw_street_name))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private boolean __all343(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $914 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $916 = null;
      boolean z$917;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $914 = m.address[i].rel;
            z$917 = false;
            for (int j = 0; j < m.address[i].rel.length; j = j + 1)
               {
                  if ((!(!($914[j].__v_apt_no || (((!z$917) && (z$917 = true)) ?(($916 = m.address[i].rel)) : ($916))[j].__v_raw_street_name))))
                     {
                        return false;
                     };
               };
         };
      return true;
   };
   private int __evalNumahDiffAddressRel;
   private boolean __exprahDiffAddressRel;
   private boolean getClueahDiffAddressRel(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumahDiffAddressRel != __evalNum))
         {
            __evalNumahDiffAddressRel = __evalNum;
            __exprahDiffAddressRel = __all342(q, m) || __all343(q, m);
         };
      return __exprahDiffAddressRel;
   };
   private int __evalNumhdAddressRel;
   private boolean __exprhdAddressRel;
   private boolean getCluehdAddressRel(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumhdAddressRel != __evalNum))
         {
            __evalNumhdAddressRel = __evalNum;
            __exprhdAddressRel = getClueahDiffAddressRel(q, m);
         };
      return __exprhdAddressRel;
   };
   private boolean __all344(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.contacts.length; i = i + 1)
         {
            if ((!(!(q.contacts[i].__v_nameF || q.contacts[i].__v_nameL))))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all345(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.contacts.length; i = i + 1)
         {
            if ((!(!(m.contacts[i].__v_nameF || m.contacts[i].__v_nameL))))
               {
                  return false;
               };
         };
      return true;
   };
   private int __evalNumahDiffContactsNamesFirstAndLast;
   private boolean __exprahDiffContactsNamesFirstAndLast;
   private boolean getClueahDiffContactsNamesFirstAndLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumahDiffContactsNamesFirstAndLast != __evalNum))
         {
            __evalNumahDiffContactsNamesFirstAndLast = __evalNum;
            __exprahDiffContactsNamesFirstAndLast = __all344(q, m) || __all345(q, m);
         };
      return __exprahDiffContactsNamesFirstAndLast;
   };
   private int __evalNumhdContactsNamesFirstAndLast;
   private boolean __exprhdContactsNamesFirstAndLast;
   private boolean getCluehdContactsNamesFirstAndLast(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumhdContactsNamesFirstAndLast != __evalNum))
         {
            __evalNumhdContactsNamesFirstAndLast = __evalNum;
            __exprhdContactsNamesFirstAndLast = getClueahDiffContactsNamesFirstAndLast(q, m);
         };
      return __exprhdContactsNamesFirstAndLast;
   };
   private boolean __all346(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.mothers.length; i = i + 1)
         {
            if ((!(!q.mothers[i].__v_mothers_maiden_name)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all347(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.mothers.length; i = i + 1)
         {
            if ((!(!m.mothers[i].__v_mothers_maiden_name)))
               {
                  return false;
               };
         };
      return true;
   };
   private int __evalNumahDiffMothersMaiden;
   private boolean __exprahDiffMothersMaiden;
   private boolean getClueahDiffMothersMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumahDiffMothersMaiden != __evalNum))
         {
            __evalNumahDiffMothersMaiden = __evalNum;
            __exprahDiffMothersMaiden = __all346(q, m) || __all347(q, m);
         };
      return __exprahDiffMothersMaiden;
   };
   private int __evalNumhdMothersMaiden;
   private boolean __exprhdMothersMaiden;
   private boolean getCluehdMothersMaiden(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumhdMothersMaiden != __evalNum))
         {
            __evalNumhdMothersMaiden = __evalNum;
            __exprhdMothersMaiden = getClueahDiffMothersMaiden(q, m);
         };
      return __exprhdMothersMaiden;
   };
   private boolean __all348(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.mothers.length; i = i + 1)
         {
            if ((!(!q.mothers[i].__v_mothers_dob)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __all349(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.mothers.length; i = i + 1)
         {
            if ((!(!m.mothers[i].__v_mothers_dob)))
               {
                  return false;
               };
         };
      return true;
   };
   private int __evalNumahDiffMothersDob;
   private boolean __exprahDiffMothersDob;
   private boolean getClueahDiffMothersDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumahDiffMothersDob != __evalNum))
         {
            __evalNumahDiffMothersDob = __evalNum;
            __exprahDiffMothersDob = __all348(q, m) || __all349(q, m);
         };
      return __exprahDiffMothersDob;
   };
   private int __evalNumhdMothersDob;
   private boolean __exprhdMothersDob;
   private boolean getCluehdMothersDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumhdMothersDob != __evalNum))
         {
            __evalNumhdMothersDob = __evalNum;
            __exprhdMothersDob = getClueahDiffMothersDob(q, m);
         };
      return __exprhdMothersDob;
   };
   private boolean __exists350(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((q.names[i].__v_first_name && ((q.names[i].first_name.trim().endsWith("JR") || q.names[i].first_name.trim().endsWith("SR")) || q.names[i].first_name.trim().endsWith("III"))))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists351(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((m.names[i].__v_first_name && ((m.names[i].first_name.trim().endsWith("JR") || m.names[i].first_name.trim().endsWith("SR")) || m.names[i].first_name.trim().endsWith("III"))))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists352(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((q.names[i].__v_last_name && ((q.names[i].last_name.trim().endsWith("JR") || q.names[i].last_name.trim().endsWith("SR")) || q.names[i].last_name.trim().endsWith("III"))))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists353(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((m.names[i].__v_last_name && ((m.names[i].last_name.trim().endsWith("JR") || m.names[i].last_name.trim().endsWith("SR")) || m.names[i].last_name.trim().endsWith("III"))))
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrJrSrIII;
   private boolean __exprrJrSrIII;
   private boolean getCluerJrSrIII(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrJrSrIII != __evalNum))
         {
            __evalNumrJrSrIII = __evalNum;
            __exprrJrSrIII = (__exists350(q, m) || __exists351(q, m)) || (__exists352(q, m) || __exists353(q, m));
         };
      return __exprrJrSrIII;
   };
   private boolean __exists354(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((q.names[i].__v_dob && (DateUtils.getYear(q.names[i].dob) < 1950)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists355(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((m.names[i].__v_dob && (DateUtils.getYear(m.names[i].dob) < 1950)))
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrScrewyDob;
   private boolean __exprrScrewyDob;
   private boolean getCluerScrewyDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrScrewyDob != __evalNum))
         {
            __evalNumrScrewyDob = __evalNum;
            __exprrScrewyDob = __exists354(q, m) || __exists355(q, m);
         };
      return __exprrScrewyDob;
   };
   private boolean __exists356(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((!q.names[i].__v_nameF))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists357(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((!m.names[i].__v_nameF))
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrInvalidFirstName;
   private boolean __exprrInvalidFirstName;
   private boolean getCluerInvalidFirstName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrInvalidFirstName != __evalNum))
         {
            __evalNumrInvalidFirstName = __evalNum;
            __exprrInvalidFirstName = __exists356(q, m) || __exists357(q, m);
         };
      return __exprrInvalidFirstName;
   };
   private boolean __exists358(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if (q.names[i].__v_mothersFirstName)
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists359(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if (m.names[i].__v_mothersFirstName)
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrMothersFirst;
   private boolean __exprrMothersFirst;
   private boolean getCluerMothersFirst(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrMothersFirst != __evalNum))
         {
            __evalNumrMothersFirst = __evalNum;
            __exprrMothersFirst = __exists358(q, m) || __exists359(q, m);
         };
      return __exprrMothersFirst;
   };
   private boolean __exists360(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $918 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $920 = null;
      boolean z$921;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $918 = q.address[i].rel;
            z$921 = false;
            for (int j = 0; j < q.address[i].rel.length; j = j + 1)
               {
                  if (($918[j].__v_raw_street_name && (!(((!z$921) && (z$921 = true)) ?(($920 = q.address[i].rel)) : ($920))[j].__v_parsedStreet)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists361(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $922 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $924 = null;
      boolean z$925;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $922 = m.address[i].rel;
            z$925 = false;
            for (int j = 0; j < m.address[i].rel.length; j = j + 1)
               {
                  if (($922[j].__v_raw_street_name && (!(((!z$925) && (z$925 = true)) ?(($924 = m.address[i].rel)) : ($924))[j].__v_parsedStreet)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrUnparsedAddress;
   private boolean __exprrUnparsedAddress;
   private boolean getCluerUnparsedAddress(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrUnparsedAddress != __evalNum))
         {
            __evalNumrUnparsedAddress = __evalNum;
            __exprrUnparsedAddress = __exists360(q, m) || __exists361(q, m);
         };
      return __exprrUnparsedAddress;
   };
   private boolean __exists362(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $926 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $928 = null;
      boolean z$929;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $926 = q.address[i].rel;
            z$929 = false;
            for (int j = 0; j < q.address[i].rel.length; j = j + 1)
               {
                  if (($926[j].__v_parsedStreet && (((!z$929) && (z$929 = true)) ?(($928 = q.address[i].rel)) : ($928))[j].parsedStreet.has(ParsedAddress.ATTENTION)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists363(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $930 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $932 = null;
      boolean z$933;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $930 = m.address[i].rel;
            z$933 = false;
            for (int j = 0; j < m.address[i].rel.length; j = j + 1)
               {
                  if (($930[j].__v_parsedStreet && (((!z$933) && (z$933 = true)) ?(($932 = m.address[i].rel)) : ($932))[j].parsedStreet.has(ParsedAddress.ATTENTION)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrAttn;
   private boolean __exprrAttn;
   private boolean getCluerAttn(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrAttn != __evalNum))
         {
            __evalNumrAttn = __evalNum;
            __exprrAttn = __exists362(q, m) || __exists363(q, m);
         };
      return __exprrAttn;
   };
   private boolean __exists364(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $934 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $936 = null;
      boolean z$937;
      for (int i = 0; i < q.address.length; i = i + 1)
         {
            $934 = q.address[i].rel;
            z$937 = false;
            for (int j = 0; j < q.address[i].rel.length; j = j + 1)
               {
                  if (($934[j].__v_parsedStreet && (((!z$937) && (z$937 = true)) ?(($936 = q.address[i].rel)) : ($936))[j].parsedStreet.has(ParsedAddress.PO_BOX)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __exists365(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $938 = null;
      com.choicemaker.cm.custom.mci.gend.MciRecords.RelImpl[] $940 = null;
      boolean z$941;
      for (int i = 0; i < m.address.length; i = i + 1)
         {
            $938 = m.address[i].rel;
            z$941 = false;
            for (int j = 0; j < m.address[i].rel.length; j = j + 1)
               {
                  if (($938[j].__v_parsedStreet && (((!z$941) && (z$941 = true)) ?(($940 = m.address[i].rel)) : ($940))[j].parsedStreet.has(ParsedAddress.PO_BOX)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrPoBox;
   private boolean __exprrPoBox;
   private boolean getCluerPoBox(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrPoBox != __evalNum))
         {
            __evalNumrPoBox = __evalNum;
            __exprrPoBox = __exists364(q, m) || __exists365(q, m);
         };
      return __exprrPoBox;
   };
   private boolean __exists366(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((q.names[i].__v_first_name && StringUtils.containsDigits(q.names[i].first_name)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists367(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((m.names[i].__v_first_name && StringUtils.containsDigits(m.names[i].first_name)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists368(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((q.names[i].__v_middle_name && StringUtils.containsDigits(q.names[i].middle_name)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists369(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((m.names[i].__v_middle_name && StringUtils.containsDigits(m.names[i].middle_name)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists370(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((q.names[i].__v_last_name && StringUtils.containsDigits(q.names[i].last_name)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists371(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            if ((m.names[i].__v_last_name && StringUtils.containsDigits(m.names[i].last_name)))
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrDigitName;
   private boolean __exprrDigitName;
   private boolean getCluerDigitName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrDigitName != __evalNum))
         {
            __evalNumrDigitName = __evalNum;
            __exprrDigitName = ((__exists366(q, m) || __exists367(q, m)) || (__exists368(q, m) || __exists369(q, m))) || (__exists370(q, m) || __exists371(q, m));
         };
      return __exprrDigitName;
   };
   private boolean __exists372(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $942 = false;
      java.lang.String $944 = null;
      boolean z$945;
      for (int __i0 = 0; __i0 < q.ids.length; __i0 = __i0 + 1)
         {

            z$945 = false;
            if ((!$942))
               continue ;
            for (int __j0 = 0; __j0 < m.ids.length; __j0 = __j0 + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrSameVitalId;
   private boolean __exprrSameVitalId;
   private boolean getCluerSameVitalId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrSameVitalId != __evalNum))
         {
            __evalNumrSameVitalId = __evalNum;
            __exprrSameVitalId = __exists372(q, m);
         };
      return __exprrSameVitalId;
   };
   private boolean __exists373(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $946 = false;
      java.util.Date $948 = null;
      boolean z$949;
      java.util.Date $950 = null;
      boolean z$951;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $946 = q.names[i].__v_dob;
            z$949 = false;
            z$951 = false;
            if ((!$946))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((($946 && m.names[j].__v_dob) && (!potentialTypo(((!z$949) && (z$949 = true)) ?(($948 = q.names[i].dob)) : ($948), m.names[j].dob))) && (DateUtils.daysApart(((!z$951) && (z$951 = true)) ?(($950 = q.names[i].dob)) : ($950), m.names[j].dob) >= 368)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrBirthdaySeparationOverOneYear;
   private boolean __exprrBirthdaySeparationOverOneYear;
   private boolean getCluerBirthdaySeparationOverOneYear(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrBirthdaySeparationOverOneYear != __evalNum))
         {
            __evalNumrBirthdaySeparationOverOneYear = __evalNum;
            __exprrBirthdaySeparationOverOneYear = (!getClueaBirthday(q, m)) && __exists373(q, m);
         };
      return __exprrBirthdaySeparationOverOneYear;
   };
   private boolean __exists374(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $952 = false;
      boolean $954 = false;
      boolean z$955;
      boolean $956 = false;
      boolean z$957;
      java.lang.String $958 = null;
      boolean z$959;
      boolean $960 = false;
      boolean z$961;
      java.lang.String $962 = null;
      boolean z$963;
      for (int i = 0; i < q.events.length; i = i + 1)
         {
            $952 = q.events[i].__v_event_type_cd;
            z$955 = false;
            z$957 = false;
            z$959 = false;
            z$961 = false;
            z$963 = false;
            if ((!(($952 && (((!z$955) && (z$955 = true)) ?(($954 = q.events[i].event_type_cd.equals("LEAD"))) : ($954))) && (((!z$961) && (z$961 = true)) ?(($960 = q.events[i].__v_event_id)) : ($960)))))
               continue ;
            for (int j = 0; j < m.events.length; j = j + 1)
               {
                  if ((((((((($952 && m.events[j].__v_event_type_cd) && (((!z$955) && (z$955 = true)) ?(($954 = q.events[i].event_type_cd.equals("LEAD"))) : ($954))) && m.events[j].event_type_cd.equals("LEAD")) && ((q.events[i].__v_event_date && m.events[j].__v_event_date) ?(boolean)(q.events[i].event_date.equals(m.events[j].event_date)) : (boolean)(((q.events[i].__v_lab_date && m.events[j].__v_lab_date) && q.events[i].lab_date.equals(m.events[j].lab_date))))) && ((!((((!z$957) && (z$957 = true)) ?(($956 = q.events[i].__v_facility_id)) : ($956)) && m.events[j].__v_facility_id)) || (((!z$959) && (z$959 = true)) ?(($958 = q.events[i].facility_id)) : ($958)).equals(m.events[j].facility_id))) && (((!z$961) && (z$961 = true)) ?(($960 = q.events[i].__v_event_id)) : ($960))) && m.events[j].__v_event_id) && (!(((!z$963) && (z$963 = true)) ?(($962 = q.events[i].event_id)) : ($962)).equals(m.events[j].event_id))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrLeadReports;
   private boolean __exprrLeadReports;
   private boolean getCluerLeadReports(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrLeadReports != __evalNum))
         {
            __evalNumrLeadReports = __evalNum;
            __exprrLeadReports = (!getCluerSameVitalId(q, m)) && __exists374(q, m);
         };
      return __exprrLeadReports;
   };
   private boolean let376(PatientImpl q, PatientImpl m, int i, int j, int qn, int mn) throws java.lang.Exception {
      return ((qn != Integer.MIN_VALUE) && (mn != Integer.MIN_VALUE)) && (qn != mn);
   };
   private boolean __exists375(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $964 = false;
      int $966 = 0;
      boolean z$967;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $964 = (!q.names[i].__v_first_name) && (q.names[i].first_name != null);
            z$967 = false;
            if ((!$964))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((($964 && (!m.names[j].__v_first_name)) && (m.names[j].first_name != null)) && let376(q, m, i, j, ((!z$967) && (z$967 = true)) ?(($966 = Maps.lookupInt("multiFirstName", q.names[i].first_name.trim()))) : ($966), Maps.lookupInt("multiFirstName", m.names[j].first_name.trim()))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private boolean __all377(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((!(!q.names[i].__v_first_name)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __exists378(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int j = 0; j < m.names.length; j = j + 1)
         {
            if ((((!m.names[j].__v_first_name) && (m.names[j].first_name != null)) && (Maps.lookupInt("multiFirstName", m.names[j].first_name.trim()) != Integer.MIN_VALUE)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __all379(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int j = 0; j < m.names.length; j = j + 1)
         {
            if ((!(!m.names[j].__v_first_name)))
               {
                  return false;
               };
         };
      return true;
   };
   private boolean __exists380(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            if ((((!q.names[i].__v_first_name) && (q.names[i].first_name != null)) && (Maps.lookupInt("multiFirstName", q.names[i].first_name.trim()) != Integer.MIN_VALUE)))
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrDifferentMultiName;
   private boolean __exprrDifferentMultiName;
   private boolean getCluerDifferentMultiName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrDifferentMultiName != __evalNum))
         {
            __evalNumrDifferentMultiName = __evalNum;
            __exprrDifferentMultiName = (((!getCluerSameVitalId(q, m)) && __exists375(q, m)) || (__all377(q, m) && __exists378(q, m))) || (__all379(q, m) && __exists380(q, m));
         };
      return __exprrDifferentMultiName;
   };
   private int __evalNumrHighStackingNames05;
   private boolean __exprrHighStackingNames05;
   private boolean getCluerHighStackingNames05(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrHighStackingNames05 != __evalNum))
         {
            __evalNumrHighStackingNames05 = __evalNum;
            __exprrHighStackingNames05 = ((!getCluerSameVitalId(q, m)) && (StackingUtils.size(q.names) > 5)) || (StackingUtils.size(m.names) > 5);
         };
      return __exprrHighStackingNames05;
   };
   private int __evalNumrHighStackingNames10;
   private boolean __exprrHighStackingNames10;
   private boolean getCluerHighStackingNames10(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrHighStackingNames10 != __evalNum))
         {
            __evalNumrHighStackingNames10 = __evalNum;
            __exprrHighStackingNames10 = ((!getCluerSameVitalId(q, m)) && (StackingUtils.size(q.names) > 10)) || (StackingUtils.size(m.names) > 10);
         };
      return __exprrHighStackingNames10;
   };
   private boolean __exists382(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int k = 0; k < q.mothers.length; k = k + 1)
         {
            if ((q.mothers[k].__v_mothers_maiden_name && q.names[i].nameL.equals(q.mothers[k].mothers_maiden_name)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists383(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int k = 0; k < q.mothers.length; k = k + 1)
         {
            if ((q.mothers[k].__v_mothers_maiden_name && q.names[j].nameL.equals(q.mothers[k].mothers_maiden_name)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists381(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $968 = false;
      boolean $970 = false;
      boolean z$971;
      java.lang.String $972 = null;
      boolean z$973;
      java.lang.String $974 = null;
      boolean z$975;
      java.lang.String $976 = null;
      boolean z$977;
      java.lang.String $978 = null;
      boolean z$979;
      boolean $980 = false;
      boolean z$981;
      boolean $982 = false;
      boolean z$983;
      boolean $984 = false;
      boolean z$985;
      boolean $986 = false;
      boolean z$987;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $968 = q.names[i].__v_nameF;
            z$971 = false;
            z$973 = false;
            z$975 = false;
            z$977 = false;
            z$979 = false;
            z$981 = false;
            z$983 = false;
            z$985 = false;
            z$987 = false;
            if ((!($968 && (((!z$971) && (z$971 = true)) ?(($970 = q.names[i].__v_nameL)) : ($970)))))
               continue ;
            for (int j = 0; j < q.names.length; j = j + 1)
               {
                  if (((((((((i < j) && $968) && (((!z$971) && (z$971 = true)) ?(($970 = q.names[i].__v_nameL)) : ($970))) && (!__exists382(q, m, i, j))) && q.names[j].__v_nameF) && q.names[j].__v_nameL) && (!__exists383(q, m, i, j))) && hasNoNameSimilarity(((!z$973) && (z$973 = true)) ?(($972 = q.names[i].nameF)) : ($972), ((!z$975) && (z$975 = true)) ?(($974 = q.names[i].nameM)) : ($974), ((!z$977) && (z$977 = true)) ?(($976 = q.names[i].nameL)) : ($976), ((!z$979) && (z$979 = true)) ?(($978 = q.names[i].nameMaidn)) : ($978), ((!z$981) && (z$981 = true)) ?(($980 = q.names[i].__v_nameF)) : ($980), ((!z$983) && (z$983 = true)) ?(($982 = q.names[i].__v_nameM)) : ($982), ((!z$985) && (z$985 = true)) ?(($984 = q.names[i].__v_nameL)) : ($984), ((!z$987) && (z$987 = true)) ?(($986 = q.names[i].__v_nameMaidn)) : ($986), q.names[j].nameF, q.names[j].nameM, q.names[j].nameL, q.names[j].nameMaidn, q.names[j].__v_nameF, q.names[j].__v_nameM, q.names[j].__v_nameL, q.names[j].__v_nameMaidn)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrQueryDifferingNames;
   private boolean __exprrQueryDifferingNames;
   private boolean getCluerQueryDifferingNames(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrQueryDifferingNames != __evalNum))
         {
            __evalNumrQueryDifferingNames = __evalNum;
            __exprrQueryDifferingNames = (!getCluerSameVitalId(q, m)) && __exists381(q, m);
         };
      return __exprrQueryDifferingNames;
   };
   private boolean __exists385(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int k = 0; k < m.mothers.length; k = k + 1)
         {
            if ((m.mothers[k].__v_mothers_maiden_name && m.names[i].nameL.equals(m.mothers[k].mothers_maiden_name)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists386(PatientImpl q, PatientImpl m, int i, int j) throws java.lang.Exception {
      for (int k = 0; k < m.mothers.length; k = k + 1)
         {
            if ((m.mothers[k].__v_mothers_maiden_name && m.names[j].nameL.equals(m.mothers[k].mothers_maiden_name)))
               {
                  return true;
               };
         };
      return false;
   };
   private boolean __exists384(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $988 = false;
      boolean $990 = false;
      boolean z$991;
      java.lang.String $992 = null;
      boolean z$993;
      java.lang.String $994 = null;
      boolean z$995;
      java.lang.String $996 = null;
      boolean z$997;
      java.lang.String $998 = null;
      boolean z$999;
      boolean $1000 = false;
      boolean z$1001;
      boolean $1002 = false;
      boolean z$1003;
      boolean $1004 = false;
      boolean z$1005;
      boolean $1006 = false;
      boolean z$1007;
      for (int i = 0; i < m.names.length; i = i + 1)
         {
            $988 = m.names[i].__v_nameF;
            z$991 = false;
            z$993 = false;
            z$995 = false;
            z$997 = false;
            z$999 = false;
            z$1001 = false;
            z$1003 = false;
            z$1005 = false;
            z$1007 = false;
            if ((!($988 && (((!z$991) && (z$991 = true)) ?(($990 = m.names[i].__v_nameL)) : ($990)))))
               continue ;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (((((((((i < j) && $988) && (((!z$991) && (z$991 = true)) ?(($990 = m.names[i].__v_nameL)) : ($990))) && (!__exists385(q, m, i, j))) && m.names[j].__v_nameF) && m.names[j].__v_nameL) && (!__exists386(q, m, i, j))) && hasNoNameSimilarity(((!z$993) && (z$993 = true)) ?(($992 = m.names[i].nameF)) : ($992), ((!z$995) && (z$995 = true)) ?(($994 = m.names[i].nameM)) : ($994), ((!z$997) && (z$997 = true)) ?(($996 = m.names[i].nameL)) : ($996), ((!z$999) && (z$999 = true)) ?(($998 = m.names[i].nameMaidn)) : ($998), ((!z$1001) && (z$1001 = true)) ?(($1000 = m.names[i].__v_nameF)) : ($1000), ((!z$1003) && (z$1003 = true)) ?(($1002 = m.names[i].__v_nameM)) : ($1002), ((!z$1005) && (z$1005 = true)) ?(($1004 = m.names[i].__v_nameL)) : ($1004), ((!z$1007) && (z$1007 = true)) ?(($1006 = m.names[i].__v_nameMaidn)) : ($1006), m.names[j].nameF, m.names[j].nameM, m.names[j].nameL, m.names[j].nameMaidn, m.names[j].__v_nameF, m.names[j].__v_nameM, m.names[j].__v_nameL, m.names[j].__v_nameMaidn)))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumrMatchDifferingNames;
   private boolean __exprrMatchDifferingNames;
   private boolean getCluerMatchDifferingNames(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrMatchDifferingNames != __evalNum))
         {
            __evalNumrMatchDifferingNames = __evalNum;
            __exprrMatchDifferingNames = (!getCluerSameVitalId(q, m)) && __exists384(q, m);
         };
      return __exprrMatchDifferingNames;
   };
   private int __evalNumrVitalRecordId;
   private boolean __exprrVitalRecordId;
   private boolean getCluerVitalRecordId(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrVitalRecordId != __evalNum))
         {
            __evalNumrVitalRecordId = __evalNum;
            __exprrVitalRecordId = (!getCluerSameVitalId(q, m)) && getClueaDiffVitalRecordId(q, m);
         };
      return __exprrVitalRecordId;
   };
   private boolean __exists387(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int j = 0; j < m.frozen.length; j = j + 1)
         {
            if (m.frozen[j].__v_src_system_id)
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrMatchFrozen;
   private boolean __exprrMatchFrozen;
   private boolean getCluerMatchFrozen(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrMatchFrozen != __evalNum))
         {
            __evalNumrMatchFrozen = __evalNum;
            __exprrMatchFrozen = (!getCluerSameVitalId(q, m)) && __exists387(q, m);
         };
      return __exprrMatchFrozen;
   };
   private boolean __exists388(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      for (int i = 0; i < q.frozen.length; i = i + 1)
         {
            if (q.frozen[i].__v_src_system_id)
               {
                  return true;
               };
         };
      return false;
   };
   private int __evalNumrQueryFrozen;
   private boolean __exprrQueryFrozen;
   private boolean getCluerQueryFrozen(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrQueryFrozen != __evalNum))
         {
            __evalNumrQueryFrozen = __evalNum;
            __exprrQueryFrozen = (!getCluerSameVitalId(q, m)) && __exists388(q, m);
         };
      return __exprrQueryFrozen;
   };
   private int __evalNumrCirCir;
   private boolean __exprrCirCir;
   private boolean getCluerCirCir(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrCirCir != __evalNum))
         {
            __evalNumrCirCir = __evalNum;
            __exprrCirCir = ((q.__v_src_system_id && m.__v_src_system_id) && q.src_system_id.equals("CIR")) && m.src_system_id.equals("CIR");
         };
      return __exprrCirCir;
   };
   private int __evalNumrLeadLead;
   private boolean __exprrLeadLead;
   private boolean getCluerLeadLead(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrLeadLead != __evalNum))
         {
            __evalNumrLeadLead = __evalNum;
            __exprrLeadLead = ((q.__v_src_system_id && m.__v_src_system_id) && q.src_system_id.equals("LEAD")) && m.src_system_id.equals("LEAD");
         };
      return __exprrLeadLead;
   };
   private int __evalNumrLeadCIR;
   private boolean __exprrLeadCIR;
   private boolean getCluerLeadCIR(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumrLeadCIR != __evalNum))
         {
            __evalNumrLeadCIR = __evalNum;
            __exprrLeadCIR = (q.__v_src_system_id && m.__v_src_system_id) && ((q.src_system_id.equals("LEAD") && m.src_system_id.equals("CIR")) || (q.src_system_id.equals("CIR") && m.src_system_id.equals("LEAD")));
         };
      return __exprrLeadCIR;
   };
   String safeTrim(String s) {
		String retVal = null;
		if (s != null) {
			retVal = s.trim();
		}
		return retVal;
	};
   String join(String s1, String s2) {
		return join(s1, s2, null);
	};
   String join(String s1, String s2, String s3) {
		StringBuffer buff = new StringBuffer();
		if (s1 != null) {
			buff.append(s1);
		}
		if (s2 != null) {
			buff.append(s2);
		}
		if (s3 != null) {
			buff.append(s3);
		}
		return buff.toString();
	};
   boolean approximateMatch(String s1, String s2) {
		if (s1 == null || s2 == null || s1.length() < 3 || s2.length() < 3) {
			return false;
		} else {
			return StringUtils.overlap(s1, s2) || Jaro.jaro(s1, s2) >= .9 || EditDistance2.editDistance2(s1, s2) < 2;
		}
	};
   long abs(long a, long b) {
		if (a > b) {
			return a - b;
		} else {
			return b - a;
		}
	};
   boolean equal(String a, String b) {
		return a != null && b != null && a.equals(b);
	};
   boolean hasNoNameSimilarity(String fni, String mni, String lni, String mdi, boolean vfni, boolean vmni, boolean vlni, boolean vmdi, String fnj, String mnj, String lnj, String mdj, boolean vfnj, boolean vmnj, boolean vlnj, boolean vmdj) {

		if (vfni && vlni && vfnj && vlnj) {
			String[] di = new String[] {fni, mni, lni, mdi};
			boolean[] vi = new boolean[] {vfni, vmni, vlni, vmdi};
			String[] dj = new String[] {fnj, mnj, lnj, mdj};
			boolean[] vj = new boolean[] {vfnj, vmnj, vlnj, vmdj};

			return hasNoSimilarity(di, vi, dj, vj);
		} else {
			return false;
		}
	};
   boolean hasNoSimilarity(String[] di, boolean[] vi, String[] dj, boolean[] vj) {
		if (di.length != vi.length ||
			dj.length != vj.length ||
			di.length != dj.length) {

			throw new IllegalArgumentException("All arrays should be the same length!");
		}

		int len = di.length;

		for (int j = 0; j < len; j++) {
			if (vj[j]) {
				String soundexDjj = Soundex.soundex(dj[j], 2);
				DoubleMetaphone dmj = DoubleMetaphone.doubleMetaphone(dj[j]);
				for (int i = 0; i < len; i++) {
					if (vi[i]) {
						DoubleMetaphone dmi = DoubleMetaphone.doubleMetaphone(di[i]);
						if (di[i].equals(dj[j]) ||
							soundexDjj.equals(Soundex.soundex(di[i], 2)) ||
							EditDistance.editDistance(dj[j], di[i]) <= 2 ||
							!Relations.emptyIntersection("nicknames", di[i], dj[j]) ||
							!Relations.emptyIntersection("nicknames", dj[j], di[i]) ||
							dmi.equals(dmj) ) {
								return false;
						}
					}
				}
			}
		}
		return true;
	};
   boolean potentialTypo(Date qdob, Date mdob) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd");
		return EditDistance.editDistance(sdf.format(qdob), sdf.format(mdob)) <= 1;
	};
   private boolean __exists389(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $1008 = false;
      for (int i = 0; i < q.names.length; i = i + 1)
         {
            $1008 = (q.names[i].first_name != null) && q.names[i].first_name.trim().startsWith("F C");
            if ($1008)
               return true;
            for (int j = 0; j < m.names.length; j = j + 1)
               {
                  if (($1008 || ((m.names[j].first_name != null) && m.names[j].first_name.trim().startsWith("F C"))))
                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumtrackEnhancement01;
   private boolean __exprtrackEnhancement01;
   private boolean getCluetrackEnhancement01(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumtrackEnhancement01 != __evalNum))
         {
            __evalNumtrackEnhancement01 = __evalNum;
            __exprtrackEnhancement01 = __exists389(q, m);
         };
      return __exprtrackEnhancement01;
   };
   private boolean __exists390(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      boolean $1010 = false;
      for (int i = 0; i < q.names.length; i = i + 1)
         {

            if ($1010)
               return true;
            for (int j = 0; j < m.names.length; j = j + 1)
               {

                     {
                        return true;
                     };
               };
         };
      return false;
   };
   private int __evalNumhasGenericFirstName;
   private boolean __exprhasGenericFirstName;
   private boolean getCluehasGenericFirstName(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumhasGenericFirstName != __evalNum))
         {
            __evalNumhasGenericFirstName = __evalNum;
            __exprhasGenericFirstName = __exists390(q, m);
         };
      return __exprhasGenericFirstName;
   };
   private int __evalNumaVitalRecordMbiGenericFirstNameNoUnique;
   private boolean __expraVitalRecordMbiGenericFirstNameNoUnique;
   private boolean getClueaVitalRecordMbiGenericFirstNameNoUnique(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaVitalRecordMbiGenericFirstNameNoUnique != __evalNum))
         {
            __evalNumaVitalRecordMbiGenericFirstNameNoUnique = __evalNum;
            __expraVitalRecordMbiGenericFirstNameNoUnique = ((getClueisVR(q, m) && getCluehasGenericFirstName(q, m)) && getClueisMB(q, m)) && (!(((getClueaMedicalRecordIds(q, m) || getClueaMedicalRecordDigits(q, m)) || getCluerMedicalRecordDigitsOld(q, m)) || getClueaMedicaidIds(q, m)));
         };
      return __expraVitalRecordMbiGenericFirstNameNoUnique;
   };
   private int __evalNumnmVitalRecordMbiGenericFirstNameNoUnique;
   private boolean __exprnmVitalRecordMbiGenericFirstNameNoUnique;
   private boolean getCluenmVitalRecordMbiGenericFirstNameNoUnique(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumnmVitalRecordMbiGenericFirstNameNoUnique != __evalNum))
         {
            __evalNumnmVitalRecordMbiGenericFirstNameNoUnique = __evalNum;
            __exprnmVitalRecordMbiGenericFirstNameNoUnique = getClueaVitalRecordMbiGenericFirstNameNoUnique(q, m);
         };
      return __exprnmVitalRecordMbiGenericFirstNameNoUnique;
   };
   private int __evalNumdVitalRecordMbiGenericFirstNameNoUnique;
   private boolean __exprdVitalRecordMbiGenericFirstNameNoUnique;
   private boolean getCluedVitalRecordMbiGenericFirstNameNoUnique(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumdVitalRecordMbiGenericFirstNameNoUnique != __evalNum))
         {
            __evalNumdVitalRecordMbiGenericFirstNameNoUnique = __evalNum;
            __exprdVitalRecordMbiGenericFirstNameNoUnique = getClueaVitalRecordMbiGenericFirstNameNoUnique(q, m);
         };
      return __exprdVitalRecordMbiGenericFirstNameNoUnique;
   };
   private int __evalNumaFacilityInfo;
   private boolean __expraFacilityInfo;
   private boolean getClueaFacilityInfo(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaFacilityInfo != __evalNum))
         {
            __evalNumaFacilityInfo = __evalNum;
            __expraFacilityInfo = (((((((((((getCluemFacilityId(q, m) || getCluemFacilityRecordId(q, m)) || getCluemVitalRecordId(q, m)) || getCluedVitalRecordId(q, m)) || getCluemMedicaidIds(q, m)) || getCluemMedicaidIdsFirstName(q, m)) || getCluedMedicaidIds(q, m)) || getCluemMedicalRecordIds(q, m)) || getCluedMedicalRecordIds(q, m)) || getCluemMedicalRecordDigits(q, m)) || getCluedVitalRecordOffBy1(q, m)) || getCluedMedicalRecordOffBy1(q, m)) || getCluemIdentifierTypeAndFacilityId(q, m);
         };
      return __expraFacilityInfo;
   };
   private int __evalNumaDateInfo;
   private boolean __expraDateInfo;
   private boolean getClueaDateInfo(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaDateInfo != __evalNum))
         {
            __evalNumaDateInfo = __evalNum;
            __expraDateInfo = ((((((((getCluedEventPreceedsBirthAndDistinctBirths(q, m) || getCluedEventPreceedsBirthAndApproxBirths(q, m)) || getCluedEventPreceedsBirthAndSameBirths(q, m)) || getCluedEventsOfSameTypeWithin24Days(q, m)) || getCluedLeadReports(q, m)) || getCluedSequentialEventIds(q, m)) || getCluemEventDateFacilityAndId(q, m)) || getCluemEventIds(q, m)) || getCluemEventDate(q, m)) || getCluemLeadDateReportedAsDob(q, m);
         };
      return __expraDateInfo;
   };
   private int __evalNumaAddressInfo;
   private boolean __expraAddressInfo;
   private boolean getClueaAddressInfo(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaAddressInfo != __evalNum))
         {
            __evalNumaAddressInfo = __evalNum;
            __expraAddressInfo = (((((((((((((((getCluemBin(q, m) || getCluemPoBox(q, m)) || getCluemStreetName(q, m)) || getCluemStreetNameDigits(q, m)) || getCluemStreetNameOverlap(q, m)) || getCluemStreetNameApprox(q, m)) || getCluemHouseNumber(q, m)) || getCluemHouseNumberOverlap(q, m)) || getCluemApartment(q, m)) || getCluemHouseNumberApartmentSwap(q, m)) || getCluemZip(q, m)) || getCluemZip3Digits(q, m)) || getCluedBoroCd(q, m)) || getCluedZip(q, m)) || getCluedStreetName(q, m)) || getCluedHouseNumber(q, m)) || getCluedDifferentAddressesWithin90Days(q, m);
         };
      return __expraAddressInfo;
   };
   private int __evalNumaPhoneInfo;
   private boolean __expraPhoneInfo;
   private boolean getClueaPhoneInfo(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaPhoneInfo != __evalNum))
         {
            __evalNumaPhoneInfo = __evalNum;
            __expraPhoneInfo = ((getCluemPhone(q, m) || getCluemLocalPhone(q, m)) || getCluemEditDistancePhone(q, m)) || getCluedPhone(q, m);
         };
      return __expraPhoneInfo;
   };
   private int __evalNumaContactInfo;
   private boolean __expraContactInfo;
   private boolean getClueaContactInfo(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaContactInfo != __evalNum))
         {
            __evalNumaContactInfo = __evalNum;
            __expraContactInfo = ((((((getCluemContactsNamesFirstAndLast(q, m) || getCluemApproxContactsNamesFirstAndLast(q, m)) || getCluemContactsNamesFirst(q, m)) || getCluemContactsNamesFirstCloseLast(q, m)) || getCluemApproxContactsNamesFirst(q, m)) || getCluemContactsNamesLast(q, m)) || getCluemSoundexContactsNamesLast(q, m)) || getCluemContactsNamesMaiden(q, m);
         };
      return __expraContactInfo;
   };
   private int __evalNumaMotherInfo;
   private boolean __expraMotherInfo;
   private boolean getClueaMotherInfo(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaMotherInfo != __evalNum))
         {
            __evalNumaMotherInfo = __evalNum;
            __expraMotherInfo = ((((getCluemMothersMaiden(q, m) || getCluedSoundexMothersMaiden2(q, m)) || getCluemMothersDob(q, m)) || getCluemMothersDobApprox(q, m)) || getCluedMothersDob(q, m)) || getCluedDobIsMothersDob(q, m);
         };
      return __expraMotherInfo;
   };
   private int __evalNumaScantyPair;
   private boolean __expraScantyPair;
   private boolean getClueaScantyPair(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaScantyPair != __evalNum))
         {
            __evalNumaScantyPair = __evalNum;
            __expraScantyPair = !(((((getClueaFacilityInfo(q, m) || getClueaDateInfo(q, m)) || getClueaAddressInfo(q, m)) || getClueaPhoneInfo(q, m)) || getClueaContactInfo(q, m)) || getClueaMotherInfo(q, m));
         };
      return __expraScantyPair;
   };
   private int __evalNumaScantyFourFieldMatch;
   private boolean __expraScantyFourFieldMatch;
   private boolean getClueaScantyFourFieldMatch(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaScantyFourFieldMatch != __evalNum))
         {
            __evalNumaScantyFourFieldMatch = __evalNum;
            __expraScantyFourFieldMatch = (((getClueaScantyPair(q, m) && getClueaPatientNamesFirst(q, m)) && getClueaPatientNamesLast(q, m)) && ((!getClueaDiffSex(q, m)) || getClueaWrongSex(q, m))) && getClueaBirthday(q, m);
         };
      return __expraScantyFourFieldMatch;
   };
   private int __evalNummScantyFourFieldMatch;
   private boolean __exprmScantyFourFieldMatch;
   private boolean getCluemScantyFourFieldMatch(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummScantyFourFieldMatch != __evalNum))
         {
            __evalNummScantyFourFieldMatch = __evalNum;
            __exprmScantyFourFieldMatch = getClueaScantyFourFieldMatch(q, m);
         };
      return __exprmScantyFourFieldMatch;
   };
   private int __evalNumaScantyFourFieldApproxNames;
   private boolean __expraScantyFourFieldApproxNames;
   private boolean getClueaScantyFourFieldApproxNames(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaScantyFourFieldApproxNames != __evalNum))
         {
            __evalNumaScantyFourFieldApproxNames = __evalNum;
            __expraScantyFourFieldApproxNames = (((getClueaScantyPair(q, m) && (getClueaPatientNamesFirst(q, m) || approximateFirstNameMatch)) && (getClueaPatientNamesLast(q, m) || approximateLastNameMatch)) && ((!getClueaDiffSex(q, m)) || getClueaWrongSex(q, m))) && getClueaBirthday(q, m);
         };
      return __expraScantyFourFieldApproxNames;
   };
   private int __evalNummScantyFourFieldApproxNames;
   private boolean __exprmScantyFourFieldApproxNames;
   private boolean getCluemScantyFourFieldApproxNames(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummScantyFourFieldApproxNames != __evalNum))
         {
            __evalNummScantyFourFieldApproxNames = __evalNum;
            __exprmScantyFourFieldApproxNames = (!getCluemScantyFourFieldMatch(q, m)) && getClueaScantyFourFieldApproxNames(q, m);
         };
      return __exprmScantyFourFieldApproxNames;
   };
   private int __evalNumaScantyFourFieldApproxNamesDob;
   private boolean __expraScantyFourFieldApproxNamesDob;
   private boolean getClueaScantyFourFieldApproxNamesDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNumaScantyFourFieldApproxNamesDob != __evalNum))
         {
            __evalNumaScantyFourFieldApproxNamesDob = __evalNum;
            __expraScantyFourFieldApproxNamesDob = (((getClueaScantyPair(q, m) && (getClueaPatientNamesFirst(q, m) || approximateFirstNameMatch)) && (getClueaPatientNamesLast(q, m) || approximateLastNameMatch)) && ((!getClueaDiffSex(q, m)) || getClueaWrongSex(q, m))) && (getClueaBirthday(q, m) || approximateMatchingDobs);
         };
      return __expraScantyFourFieldApproxNamesDob;
   };
   private int __evalNummScantyFourFieldApproxNamesDob;
   private boolean __exprmScantyFourFieldApproxNamesDob;
   private boolean getCluemScantyFourFieldApproxNamesDob(PatientImpl q, PatientImpl m) throws java.lang.Exception {
      if ((__evalNummScantyFourFieldApproxNamesDob != __evalNum))
         {
            __evalNummScantyFourFieldApproxNamesDob = __evalNum;
            __exprmScantyFourFieldApproxNamesDob = (!(getCluemScantyFourFieldMatch(q, m) || getCluemScantyFourFieldApproxNames(q, m))) && getClueaScantyFourFieldApproxNamesDob(q, m);
         };
      return __exprmScantyFourFieldApproxNamesDob;
   };
   private java.util.ArrayList __lacc = new java.util.ArrayList();
   private static com.choicemaker.cm.core.ClueDesc[] clueDescs = {
      new com.choicemaker.cm.core.ClueDesc(0, "rLargerMci_id_isMB", com.choicemaker.cm.core.ExtDecision.NONE, true, 1, 42, 51), 
      new com.choicemaker.cm.core.ClueDesc(1, "rSmallerMci_id_isMB", com.choicemaker.cm.core.ExtDecision.NONE, true, 1, 53, 61), 
      new com.choicemaker.cm.core.ClueDesc(2, "rLargerMci_id_isVR", com.choicemaker.cm.core.ExtDecision.NONE, true, 1, 62, 70), 
      new com.choicemaker.cm.core.ClueDesc(3, "rSmallerMci_id_isVR", com.choicemaker.cm.core.ExtDecision.NONE, true, 1, 72, 80), 
      new com.choicemaker.cm.core.ClueDesc(4, "rLargerMci_id_isFrozen", com.choicemaker.cm.core.ExtDecision.NONE, true, 1, 82, 90), 
      new com.choicemaker.cm.core.ClueDesc(5, "rSmallerMci_id_isFrozen", com.choicemaker.cm.core.ExtDecision.NONE, true, 1, 92, 100), 
      new com.choicemaker.cm.core.ClueDesc(6, "aBin", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 110, 112), 
      new com.choicemaker.cm.core.ClueDesc(7, "aPoBox", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 114, 116), 
      new com.choicemaker.cm.core.ClueDesc(8, "aStreetName", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 118, 122), 
      new com.choicemaker.cm.core.ClueDesc(9, "aStreetNameDigits", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 123, 136), 
      new com.choicemaker.cm.core.ClueDesc(10, "aRoughHouseholdAddress", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 138, 140), 
      new com.choicemaker.cm.core.ClueDesc(11, "aPhone_0", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 144, 151), 
      new com.choicemaker.cm.core.ClueDesc(12, "aLocalPhone_0", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 153, 160), 
      new com.choicemaker.cm.core.ClueDesc(13, "aRoughHouseholdPhone", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 162, 164), 
      new com.choicemaker.cm.core.ClueDesc(14, "aApproxContactsNamesFirstAndLast_0", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 167, 174), 
      new com.choicemaker.cm.core.ClueDesc(15, "aContactsNamesLast_0", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 176, 179), 
      new com.choicemaker.cm.core.ClueDesc(16, "aRoughHouseholdContacts", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 181, 183), 
      new com.choicemaker.cm.core.ClueDesc(17, "aContactsNamesMaiden_0", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 187, 190), 
      new com.choicemaker.cm.core.ClueDesc(18, "aMothersMaiden_0", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 192, 195), 
      new com.choicemaker.cm.core.ClueDesc(19, "aRoughHouseholdMother", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 197, 199), 
      new com.choicemaker.cm.core.ClueDesc(20, "isHH", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 204, 212), 
      new com.choicemaker.cm.core.ClueDesc(21, "isMB", com.choicemaker.cm.core.ExtDecision.NONE, true, 1, 214, 220), 
      new com.choicemaker.cm.core.ClueDesc(22, "isVR", com.choicemaker.cm.core.ExtDecision.NONE, true, 1, 222, 230), 
      new com.choicemaker.cm.core.ClueDesc(23, "isVitalNotMB", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 232, 241), 
      new com.choicemaker.cm.core.ClueDesc(24, "unreliableNotMB", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 243, 249), 
      new com.choicemaker.cm.core.ClueDesc(25, "PairType_7_ALL", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 330, 336), 
      new com.choicemaker.cm.core.ClueDesc(26, "aPatientNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 347, 351), 
      new com.choicemaker.cm.core.ClueDesc(27, "mPatientNamesFirst", com.choicemaker.cm.core.Decision.MATCH, false, 0, 353, 355), 
      new com.choicemaker.cm.core.ClueDesc(28, "aPatientNamesFirstInitial", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 357, 362), 
      new com.choicemaker.cm.core.ClueDesc(29, "mPatientNamesFirstInitial", com.choicemaker.cm.core.Decision.MATCH, false, 0, 364, 366), 
      new com.choicemaker.cm.core.ClueDesc(30, "aNicknameRaw", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 367, 370), 
      new com.choicemaker.cm.core.ClueDesc(31, "aNicknameQualified", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 372, 375), 
      new com.choicemaker.cm.core.ClueDesc(32, "mNickname", com.choicemaker.cm.core.Decision.MATCH, false, 0, 377, 379), 
      new com.choicemaker.cm.core.ClueDesc(33, "aOverlapPatientNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 380, 385), 
      new com.choicemaker.cm.core.ClueDesc(34, "mOverlapPatientNamesFirst", com.choicemaker.cm.core.Decision.MATCH, false, 0, 387, 389), 
      new com.choicemaker.cm.core.ClueDesc(35, "aEditDistancePatientNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 390, 396), 
      new com.choicemaker.cm.core.ClueDesc(36, "mEditDistancePatientNamesFirst", com.choicemaker.cm.core.Decision.MATCH, false, 0, 398, 400), 
      new com.choicemaker.cm.core.ClueDesc(37, "aJaroPatientNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 401, 406), 
      new com.choicemaker.cm.core.ClueDesc(38, "mJaroPatientNamesFirst", com.choicemaker.cm.core.Decision.MATCH, false, 0, 408, 410), 
      new com.choicemaker.cm.core.ClueDesc(39, "aNysiisOrDoubleMetaphonePatientNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 411, 415), 
      new com.choicemaker.cm.core.ClueDesc(40, "mNysiisOrDoubleMetaphonePatientNamesFirst", com.choicemaker.cm.core.Decision.MATCH, false, 0, 417, 419), 
      new com.choicemaker.cm.core.ClueDesc(41, "rSoundexPatientNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 421, 426), 
      new com.choicemaker.cm.core.ClueDesc(42, "aMultiBirthOrderQ[0]", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 428, 433), 
      new com.choicemaker.cm.core.ClueDesc(43, "aMultiBirthOrderQ[1]", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 428, 433), 
      new com.choicemaker.cm.core.ClueDesc(44, "aMultiBirthOrderQ[2]", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 428, 433), 
      new com.choicemaker.cm.core.ClueDesc(45, "aMultiBirthOrderQ[3]", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 428, 433), 
      new com.choicemaker.cm.core.ClueDesc(46, "aMultiBirthOrderQ[Integer.MAX_VALUE]", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 428, 433), 
      new com.choicemaker.cm.core.ClueDesc(47, "aMultiBirthOrderM[0]", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 435, 440), 
      new com.choicemaker.cm.core.ClueDesc(48, "aMultiBirthOrderM[1]", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 435, 440), 
      new com.choicemaker.cm.core.ClueDesc(49, "aMultiBirthOrderM[2]", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 435, 440), 
      new com.choicemaker.cm.core.ClueDesc(50, "aMultiBirthOrderM[3]", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 435, 440), 
      new com.choicemaker.cm.core.ClueDesc(51, "aMultiBirthOrderM[Integer.MAX_VALUE]", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 435, 440), 
      new com.choicemaker.cm.core.ClueDesc(52, "dMultiBirthOrderQ", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 442, 448), 
      new com.choicemaker.cm.core.ClueDesc(53, "aDiffPatientNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 454, 457), 
      new com.choicemaker.cm.core.ClueDesc(54, "dPatientNamesFirst", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 459, 461), 
      new com.choicemaker.cm.core.ClueDesc(55, "mJaroSoundexFrequencyFirst[4]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 462, 475), 
      new com.choicemaker.cm.core.ClueDesc(56, "mJaroSoundexFrequencyFirst[3]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 462, 475), 
      new com.choicemaker.cm.core.ClueDesc(57, "mJaroSoundexFrequencyFirst[2]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 462, 475), 
      new com.choicemaker.cm.core.ClueDesc(58, "mJaroSoundexFrequencyFirst[1]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 462, 475), 
      new com.choicemaker.cm.core.ClueDesc(59, "mJaroSoundexFrequencyFirst[0]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 462, 475), 
      new com.choicemaker.cm.core.ClueDesc(60, "mJaroSoundexFrequencyFirst[Integer.MIN_VALUE]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 462, 475), 
      new com.choicemaker.cm.core.ClueDesc(61, "mFrequencyPatientNamesFirst[Integer.MIN_VALUE]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 477, 487), 
      new com.choicemaker.cm.core.ClueDesc(62, "mFrequencyPatientNamesFirst[0]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 477, 487), 
      new com.choicemaker.cm.core.ClueDesc(63, "mFrequencyPatientNamesFirst[1]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 477, 487), 
      new com.choicemaker.cm.core.ClueDesc(64, "mFrequencyPatientNamesFirst[2]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 477, 487), 
      new com.choicemaker.cm.core.ClueDesc(65, "mFrequencyPatientNamesFirst[3]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 477, 487), 
      new com.choicemaker.cm.core.ClueDesc(66, "mFrequencyPatientNamesFirst[4]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 477, 487), 
      new com.choicemaker.cm.core.ClueDesc(67, "mFrequencyPatientNamesFirst[5]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 477, 487), 
      new com.choicemaker.cm.core.ClueDesc(68, "mFrequencyPatientNamesFirst[6]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 477, 487), 
      new com.choicemaker.cm.core.ClueDesc(69, "mFrequencyPatientNamesFirst[7]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 477, 487), 
      new com.choicemaker.cm.core.ClueDesc(70, "mFrequencyPatientNamesFirst[8]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 477, 487), 
      new com.choicemaker.cm.core.ClueDesc(71, "mFrequencyPatientNamesFirst[9]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 477, 487), 
      new com.choicemaker.cm.core.ClueDesc(72, "aPatientNamesMiddle", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 491, 494), 
      new com.choicemaker.cm.core.ClueDesc(73, "mPatientNamesMiddle", com.choicemaker.cm.core.Decision.MATCH, false, 0, 496, 498), 
      new com.choicemaker.cm.core.ClueDesc(74, "aPatientNamesMiddleInitial", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 500, 506), 
      new com.choicemaker.cm.core.ClueDesc(75, "mPatientNamesMiddleInitial", com.choicemaker.cm.core.Decision.MATCH, false, 0, 508, 510), 
      new com.choicemaker.cm.core.ClueDesc(76, "aPatientNamesMiddleSoundex", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 511, 515), 
      new com.choicemaker.cm.core.ClueDesc(77, "mPatientNamesMiddleSoundex", com.choicemaker.cm.core.Decision.MATCH, false, 0, 517, 519), 
      new com.choicemaker.cm.core.ClueDesc(78, "aPatientNamesMiddleJaro", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 521, 526), 
      new com.choicemaker.cm.core.ClueDesc(79, "mPatientNamesMiddleJaro", com.choicemaker.cm.core.Decision.MATCH, false, 0, 528, 530), 
      new com.choicemaker.cm.core.ClueDesc(80, "aDiffPatientNamesMiddle", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 532, 541), 
      new com.choicemaker.cm.core.ClueDesc(81, "dPatientNamesMiddle", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 543, 545), 
      new com.choicemaker.cm.core.ClueDesc(82, "aPatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 549, 553), 
      new com.choicemaker.cm.core.ClueDesc(83, "mPatientNamesLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 555, 557), 
      new com.choicemaker.cm.core.ClueDesc(84, "aOverlapPatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 559, 564), 
      new com.choicemaker.cm.core.ClueDesc(85, "mOverlapPatientNamesLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 566, 568), 
      new com.choicemaker.cm.core.ClueDesc(86, "aNysiisPatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 570, 574), 
      new com.choicemaker.cm.core.ClueDesc(87, "mNysiisPatientNamesLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 576, 578), 
      new com.choicemaker.cm.core.ClueDesc(88, "aDoubleMetaphonePatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 580, 584), 
      new com.choicemaker.cm.core.ClueDesc(89, "mDoubleMetaphonePatientNamesLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 586, 588), 
      new com.choicemaker.cm.core.ClueDesc(90, "aEditDistancePatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 590, 595), 
      new com.choicemaker.cm.core.ClueDesc(91, "mEditDistancePatientNamesLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 597, 599), 
      new com.choicemaker.cm.core.ClueDesc(92, "aJaroPatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 601, 606), 
      new com.choicemaker.cm.core.ClueDesc(93, "mJaroPatientNamesLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 608, 610), 
      new com.choicemaker.cm.core.ClueDesc(94, "rSoundexPatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 612, 616), 
      new com.choicemaker.cm.core.ClueDesc(95, "aDiffPatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 621, 624), 
      new com.choicemaker.cm.core.ClueDesc(96, "dPatientNamesLast", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 626, 628), 
      new com.choicemaker.cm.core.ClueDesc(97, "mJaroSoundexFrequencyLast[4]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 631, 644), 
      new com.choicemaker.cm.core.ClueDesc(98, "mJaroSoundexFrequencyLast[3]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 631, 644), 
      new com.choicemaker.cm.core.ClueDesc(99, "mJaroSoundexFrequencyLast[2]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 631, 644), 
      new com.choicemaker.cm.core.ClueDesc(100, "mJaroSoundexFrequencyLast[1]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 631, 644), 
      new com.choicemaker.cm.core.ClueDesc(101, "mJaroSoundexFrequencyLast[0]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 631, 644), 
      new com.choicemaker.cm.core.ClueDesc(102, "mJaroSoundexFrequencyLast[Integer.MIN_VALUE]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 631, 644), 
      new com.choicemaker.cm.core.ClueDesc(103, "mFrequencyPatientNamesLast[Integer.MIN_VALUE]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 646, 656), 
      new com.choicemaker.cm.core.ClueDesc(104, "mFrequencyPatientNamesLast[0]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 646, 656), 
      new com.choicemaker.cm.core.ClueDesc(105, "mFrequencyPatientNamesLast[1]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 646, 656), 
      new com.choicemaker.cm.core.ClueDesc(106, "mFrequencyPatientNamesLast[2]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 646, 656), 
      new com.choicemaker.cm.core.ClueDesc(107, "mFrequencyPatientNamesLast[3]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 646, 656), 
      new com.choicemaker.cm.core.ClueDesc(108, "mFrequencyPatientNamesLast[4]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 646, 656), 
      new com.choicemaker.cm.core.ClueDesc(109, "mFrequencyPatientNamesLast[5]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 646, 656), 
      new com.choicemaker.cm.core.ClueDesc(110, "mFrequencyPatientNamesLast[6]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 646, 656), 
      new com.choicemaker.cm.core.ClueDesc(111, "mFrequencyPatientNamesLast[7]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 646, 656), 
      new com.choicemaker.cm.core.ClueDesc(112, "mFrequencyPatientNamesLast[8]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 646, 656), 
      new com.choicemaker.cm.core.ClueDesc(113, "mFrequencyPatientNamesLast[9]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 646, 656), 
      new com.choicemaker.cm.core.ClueDesc(114, "aMomsFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 668, 677), 
      new com.choicemaker.cm.core.ClueDesc(115, "mMomsFirst", com.choicemaker.cm.core.Decision.MATCH, false, 0, 679, 681), 
      new com.choicemaker.cm.core.ClueDesc(116, "aSwapPatientNamesFirstMiddleExact", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 689, 702), 
      new com.choicemaker.cm.core.ClueDesc(117, "mSwapPatientNamesFirstMiddleExact", com.choicemaker.cm.core.Decision.MATCH, false, 0, 704, 706), 
      new com.choicemaker.cm.core.ClueDesc(118, "aSwapPatientNamesFirstMiddleAny", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 708, 711), 
      new com.choicemaker.cm.core.ClueDesc(119, "mSwapPatientNamesFirstMiddleAny", com.choicemaker.cm.core.Decision.MATCH, false, 0, 713, 715), 
      new com.choicemaker.cm.core.ClueDesc(120, "aSwapPatientNamesFirstLastExact", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 717, 720), 
      new com.choicemaker.cm.core.ClueDesc(121, "mSwapPatientNamesFirstLastExact", com.choicemaker.cm.core.Decision.MATCH, false, 0, 722, 724), 
      new com.choicemaker.cm.core.ClueDesc(122, "aSwapPatientNamesFirstLastExactSoundex", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 726, 729), 
      new com.choicemaker.cm.core.ClueDesc(123, "mSwapPatientNamesFirstLastExactSoundex", com.choicemaker.cm.core.Decision.MATCH, false, 0, 731, 733), 
      new com.choicemaker.cm.core.ClueDesc(124, "aSwapPatientNamesFirstLastAny", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 735, 738), 
      new com.choicemaker.cm.core.ClueDesc(125, "mSwapPatientNamesFirstLastAny", com.choicemaker.cm.core.Decision.MATCH, false, 0, 740, 742), 
      new com.choicemaker.cm.core.ClueDesc(126, "aSwapPatientNamesFirstLastAnySoundex", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 744, 747), 
      new com.choicemaker.cm.core.ClueDesc(127, "mSwapPatientNamesFirstLastAnySoundex", com.choicemaker.cm.core.Decision.MATCH, false, 0, 749, 751), 
      new com.choicemaker.cm.core.ClueDesc(128, "aSwapPatientNamesLastMaidenAny", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 753, 756), 
      new com.choicemaker.cm.core.ClueDesc(129, "mSwapPatientNamesLastMaidenAny", com.choicemaker.cm.core.Decision.MATCH, false, 0, 758, 760), 
      new com.choicemaker.cm.core.ClueDesc(130, "aSwapPatientNamesMiddleLastExact", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 762, 765), 
      new com.choicemaker.cm.core.ClueDesc(131, "mSwapPatientNamesMiddleLastExact", com.choicemaker.cm.core.Decision.MATCH, false, 0, 767, 769), 
      new com.choicemaker.cm.core.ClueDesc(132, "aSwapPatientNamesMiddleLastAny", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 771, 774), 
      new com.choicemaker.cm.core.ClueDesc(133, "mSwapPatientNamesMiddleLastAny", com.choicemaker.cm.core.Decision.MATCH, false, 0, 776, 778), 
      new com.choicemaker.cm.core.ClueDesc(134, "aDiffSoundex1PatientNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 780, 784), 
      new com.choicemaker.cm.core.ClueDesc(135, "dSoundex1PatientNamesFirst", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 786, 788), 
      new com.choicemaker.cm.core.ClueDesc(136, "aDiffSoundex1PatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 790, 794), 
      new com.choicemaker.cm.core.ClueDesc(137, "dSoundex1PatientNamesLast", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 796, 798), 
      new com.choicemaker.cm.core.ClueDesc(138, "dCommonFirstNames[6]", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 800, 807), 
      new com.choicemaker.cm.core.ClueDesc(139, "dCommonFirstNames[4]", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 800, 807), 
      new com.choicemaker.cm.core.ClueDesc(140, "dCommonFirstNames[3]", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 800, 807), 
      new com.choicemaker.cm.core.ClueDesc(141, "dCommonLastNames[6]", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 809, 816), 
      new com.choicemaker.cm.core.ClueDesc(142, "dCommonLastNames[4]", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 809, 816), 
      new com.choicemaker.cm.core.ClueDesc(143, "dCommonLastNames[3]", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 809, 816), 
      new com.choicemaker.cm.core.ClueDesc(144, "aLcsPatientNames", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 818, 831), 
      new com.choicemaker.cm.core.ClueDesc(145, "mLcsPatientNames", com.choicemaker.cm.core.Decision.MATCH, false, 0, 833, 835), 
      new com.choicemaker.cm.core.ClueDesc(146, "aJaroPatientNames", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 837, 850), 
      new com.choicemaker.cm.core.ClueDesc(147, "mJaroPatientNames", com.choicemaker.cm.core.Decision.MATCH, false, 0, 852, 854), 
      new com.choicemaker.cm.core.ClueDesc(148, "aBirthday", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 862, 865), 
      new com.choicemaker.cm.core.ClueDesc(149, "mBirthday", com.choicemaker.cm.core.Decision.MATCH, false, 0, 867, 869), 
      new com.choicemaker.cm.core.ClueDesc(150, "aBirthdayFirstOfMonthAndNamesHipFacility", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 877, 884), 
      new com.choicemaker.cm.core.ClueDesc(151, "mBirthdayFirstOfMonthAndNamesHipFacility", com.choicemaker.cm.core.Decision.MATCH, false, 0, 886, 888), 
      new com.choicemaker.cm.core.ClueDesc(152, "aDiffBirthdayMatchFirstOfMonthAndHIP", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 890, 896), 
      new com.choicemaker.cm.core.ClueDesc(153, "dBirthdayMatchFirstOfMonthAndHIP", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 898, 900), 
      new com.choicemaker.cm.core.ClueDesc(154, "aDiffBirthdayDayMonthMatchAndHIP", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 902, 909), 
      new com.choicemaker.cm.core.ClueDesc(155, "dBirthdayDayMonthMatchAndHIP", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 911, 913), 
      new com.choicemaker.cm.core.ClueDesc(156, "aBirthdayFirstOfMonthAndProvidersHipFacility", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 915, 922), 
      new com.choicemaker.cm.core.ClueDesc(157, "mBirthdayFirstOfMonthAndProvidersHipFacility", com.choicemaker.cm.core.Decision.MATCH, false, 0, 924, 926), 
      new com.choicemaker.cm.core.ClueDesc(158, "aBirthdayDayAndMonth", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 930, 933), 
      new com.choicemaker.cm.core.ClueDesc(159, "mBirthdayDayAndMonth", com.choicemaker.cm.core.Decision.MATCH, false, 0, 935, 937), 
      new com.choicemaker.cm.core.ClueDesc(160, "aBirthdayMonthAndYear", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 939, 942), 
      new com.choicemaker.cm.core.ClueDesc(161, "mBirthdayMonthAndYear", com.choicemaker.cm.core.Decision.MATCH, false, 0, 944, 946), 
      new com.choicemaker.cm.core.ClueDesc(162, "aBirthdayDayYearAndCloseMonth", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 948, 954), 
      new com.choicemaker.cm.core.ClueDesc(163, "mBirthdayDayYearAndCloseMonth", com.choicemaker.cm.core.Decision.MATCH, false, 0, 956, 958), 
      new com.choicemaker.cm.core.ClueDesc(164, "aBirthdayMissingDigit", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 960, 964), 
      new com.choicemaker.cm.core.ClueDesc(165, "mBirthdayMissingDigit", com.choicemaker.cm.core.Decision.MATCH, false, 0, 966, 968), 
      new com.choicemaker.cm.core.ClueDesc(166, "aBirthdaySwappedDayAndMonth", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 970, 974), 
      new com.choicemaker.cm.core.ClueDesc(167, "mBirthdaySwappedDayAndMonth", com.choicemaker.cm.core.Decision.MATCH, false, 0, 976, 978), 
      new com.choicemaker.cm.core.ClueDesc(168, "aEditDistanceBirthdayNumbers", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 980, 986), 
      new com.choicemaker.cm.core.ClueDesc(169, "mEditDistanceBirthdayNumbers", com.choicemaker.cm.core.Decision.MATCH, false, 0, 988, 990), 
      new com.choicemaker.cm.core.ClueDesc(170, "aDiffBirthdayMaybeTypo", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 997, 999), 
      new com.choicemaker.cm.core.ClueDesc(171, "dBirthdayMaybeTypo", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1001, 1003), 
      new com.choicemaker.cm.core.ClueDesc(172, "dBirthdaySeparation[6570]", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1005, 1014), 
      new com.choicemaker.cm.core.ClueDesc(173, "dBirthdaySeparation[730]", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1005, 1014), 
      new com.choicemaker.cm.core.ClueDesc(174, "dBirthdaySeparation[270]", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1005, 1014), 
      new com.choicemaker.cm.core.ClueDesc(175, "dBirthdaySeparation[1]", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1005, 1014), 
      new com.choicemaker.cm.core.ClueDesc(176, "aDiffBirthdayAndFirstEvent", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1016, 1022), 
      new com.choicemaker.cm.core.ClueDesc(177, "dBirthdayAndFirstEvent", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1024, 1026), 
      new com.choicemaker.cm.core.ClueDesc(178, "aDiffSexPossiblyTypo", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1034, 1037), 
      new com.choicemaker.cm.core.ClueDesc(179, "dSexPossiblyTypo", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1039, 1041), 
      new com.choicemaker.cm.core.ClueDesc(180, "aDiffSex", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1043, 1046), 
      new com.choicemaker.cm.core.ClueDesc(181, "dSex", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1048, 1050), 
      new com.choicemaker.cm.core.ClueDesc(182, "aWrongSex", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1052, 1059), 
      new com.choicemaker.cm.core.ClueDesc(183, "mWrongSex", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1061, 1063), 
      new com.choicemaker.cm.core.ClueDesc(184, "aDiffFirstNameSex", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1065, 1072), 
      new com.choicemaker.cm.core.ClueDesc(185, "dFirstNameSex", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1074, 1076), 
      new com.choicemaker.cm.core.ClueDesc(186, "aImpliedSex", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1078, 1089), 
      new com.choicemaker.cm.core.ClueDesc(187, "mImpliedSex", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1091, 1093), 
      new com.choicemaker.cm.core.ClueDesc(188, "aDiffEthnicity", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1095, 1098), 
      new com.choicemaker.cm.core.ClueDesc(189, "dEthnicity", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1100, 1102), 
      new com.choicemaker.cm.core.ClueDesc(190, "aFacilityId_names", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1137, 1139), 
      new com.choicemaker.cm.core.ClueDesc(191, "aFacilityId_not_names", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1141, 1144), 
      new com.choicemaker.cm.core.ClueDesc(192, "aFacilityId", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1146, 1148), 
      new com.choicemaker.cm.core.ClueDesc(193, "mFacilityId", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1151, 1153), 
      new com.choicemaker.cm.core.ClueDesc(194, "aFacilityRecordId", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1155, 1158), 
      new com.choicemaker.cm.core.ClueDesc(195, "mFacilityRecordId", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1160, 1162), 
      new com.choicemaker.cm.core.ClueDesc(196, "aVitalRecordId", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1164, 1167), 
      new com.choicemaker.cm.core.ClueDesc(197, "mVitalRecordId", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1169, 1171), 
      new com.choicemaker.cm.core.ClueDesc(198, "aDiffVitalRecordId", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1173, 1176), 
      new com.choicemaker.cm.core.ClueDesc(199, "dVitalRecordId", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1178, 1180), 
      new com.choicemaker.cm.core.ClueDesc(200, "aMedicaidIds", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1182, 1186), 
      new com.choicemaker.cm.core.ClueDesc(201, "mMedicaidIds", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1188, 1190), 
      new com.choicemaker.cm.core.ClueDesc(202, "aMedicaidIdsFirstName", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1193, 1196), 
      new com.choicemaker.cm.core.ClueDesc(203, "mMedicaidIdsFirstName", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1198, 1200), 
      new com.choicemaker.cm.core.ClueDesc(204, "aDiffMedicaidIds", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1202, 1205), 
      new com.choicemaker.cm.core.ClueDesc(205, "dMedicaidIds", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1207, 1209), 
      new com.choicemaker.cm.core.ClueDesc(206, "aMedicalRecordIds", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1211, 1215), 
      new com.choicemaker.cm.core.ClueDesc(207, "mMedicalRecordIds", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1217, 1219), 
      new com.choicemaker.cm.core.ClueDesc(208, "aDiffMedicalRecordIdsSameFacility", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1262, 1278), 
      new com.choicemaker.cm.core.ClueDesc(209, "dMedicalRecordIdsSameFacility", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1280, 1282), 
      new com.choicemaker.cm.core.ClueDesc(210, "aDiffMedicalRecordIds", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1284, 1289), 
      new com.choicemaker.cm.core.ClueDesc(211, "dMedicalRecordIds", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1291, 1293), 
      new com.choicemaker.cm.core.ClueDesc(212, "aMedicalRecordDigits", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1296, 1300), 
      new com.choicemaker.cm.core.ClueDesc(213, "mMedicalRecordDigits", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1302, 1304), 
      new com.choicemaker.cm.core.ClueDesc(214, "rMedicalRecordDigitsOld", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1306, 1310), 
      new com.choicemaker.cm.core.ClueDesc(215, "aDiffVitalRecordOffBy1", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1312, 1320), 
      new com.choicemaker.cm.core.ClueDesc(216, "dVitalRecordOffBy1", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1322, 1324), 
      new com.choicemaker.cm.core.ClueDesc(217, "aMedicalRecordOffBy1", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1326, 1340), 
      new com.choicemaker.cm.core.ClueDesc(218, "dMedicalRecordOffBy1", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1342, 1344), 
      new com.choicemaker.cm.core.ClueDesc(219, "aMedicalRecordOffBySmallDifference", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1346, 1364), 
      new com.choicemaker.cm.core.ClueDesc(220, "aMedicalRecordSmallEditDistance", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1366, 1386), 
      new com.choicemaker.cm.core.ClueDesc(221, "aIdentifierTypeAndFacilityId", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1388, 1399), 
      new com.choicemaker.cm.core.ClueDesc(222, "mIdentifierTypeAndFacilityId", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1401, 1403), 
      new com.choicemaker.cm.core.ClueDesc(223, "mEventsDateAndTypeCounts[3]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1409, 1442), 
      new com.choicemaker.cm.core.ClueDesc(224, "mEventsDateAndTypeCounts[2]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1409, 1442), 
      new com.choicemaker.cm.core.ClueDesc(225, "mEventsDateAndTypeCounts[1]", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1409, 1442), 
      new com.choicemaker.cm.core.ClueDesc(226, "aDiffSomeEventOfOnePreceedsAllBirthdaysOfOther", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1444, 1465), 
      new com.choicemaker.cm.core.ClueDesc(227, "dEventPreceedsBirthAndDistinctBirths", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1467, 1470), 
      new com.choicemaker.cm.core.ClueDesc(228, "dEventPreceedsBirthAndApproxBirths", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1472, 1475), 
      new com.choicemaker.cm.core.ClueDesc(229, "dEventPreceedsBirthAndSameBirths", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1477, 1480), 
      new com.choicemaker.cm.core.ClueDesc(230, "aDiffEventsOfSameTypeWithin24Days", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1482, 1492), 
      new com.choicemaker.cm.core.ClueDesc(231, "dEventsOfSameTypeWithin24Days", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1494, 1496), 
      new com.choicemaker.cm.core.ClueDesc(232, "aDiffLeadReports", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1498, 1506), 
      new com.choicemaker.cm.core.ClueDesc(233, "dLeadReports", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1508, 1510), 
      new com.choicemaker.cm.core.ClueDesc(234, "aDiffSequentialEventIds", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1512, 1516), 
      new com.choicemaker.cm.core.ClueDesc(235, "dSequentialEventIds", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1518, 1520), 
      new com.choicemaker.cm.core.ClueDesc(236, "aEventDateFacilityAndId", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1522, 1524), 
      new com.choicemaker.cm.core.ClueDesc(237, "mEventDateFacilityAndId", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1526, 1528), 
      new com.choicemaker.cm.core.ClueDesc(238, "aEventIds", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1530, 1532), 
      new com.choicemaker.cm.core.ClueDesc(239, "mEventIds", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1534, 1536), 
      new com.choicemaker.cm.core.ClueDesc(240, "aObsoleteEventDate", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1546, 1550), 
      new com.choicemaker.cm.core.ClueDesc(241, "mEventDate", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1552, 1562), 
      new com.choicemaker.cm.core.ClueDesc(242, "aLeadDateReportedAsDob", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1565, 1575), 
      new com.choicemaker.cm.core.ClueDesc(243, "mLeadDateReportedAsDob", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1577, 1579), 
      new com.choicemaker.cm.core.ClueDesc(244, "aNotSiblings", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1584, 1588), 
      new com.choicemaker.cm.core.ClueDesc(245, "aProviderId", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1593, 1595), 
      new com.choicemaker.cm.core.ClueDesc(246, "mProviderId", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1597, 1599), 
      new com.choicemaker.cm.core.ClueDesc(247, "mBin", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1613, 1615), 
      new com.choicemaker.cm.core.ClueDesc(248, "mPoBox", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1621, 1623), 
      new com.choicemaker.cm.core.ClueDesc(249, "mStreetName", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1625, 1627), 
      new com.choicemaker.cm.core.ClueDesc(250, "mStreetNameDigits", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1629, 1631), 
      new com.choicemaker.cm.core.ClueDesc(251, "aStreetNameOverlap", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1633, 1638), 
      new com.choicemaker.cm.core.ClueDesc(252, "mStreetNameOverlap", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1640, 1642), 
      new com.choicemaker.cm.core.ClueDesc(253, "aStreetNameApprox", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1644, 1652), 
      new com.choicemaker.cm.core.ClueDesc(254, "mStreetNameApprox", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1654, 1656), 
      new com.choicemaker.cm.core.ClueDesc(255, "aHouseNumber", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1660, 1663), 
      new com.choicemaker.cm.core.ClueDesc(256, "mHouseNumber", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1665, 1667), 
      new com.choicemaker.cm.core.ClueDesc(257, "aHouseNumberOverlap", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1671, 1679), 
      new com.choicemaker.cm.core.ClueDesc(258, "mHouseNumberOverlap", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1682, 1684), 
      new com.choicemaker.cm.core.ClueDesc(259, "rHouseNumberEditDistance", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1687, 1695), 
      new com.choicemaker.cm.core.ClueDesc(260, "aApartment", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1697, 1700), 
      new com.choicemaker.cm.core.ClueDesc(261, "mApartment", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1702, 1704), 
      new com.choicemaker.cm.core.ClueDesc(262, "aHouseNumberApartmentSwap", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1706, 1709), 
      new com.choicemaker.cm.core.ClueDesc(263, "mHouseNumberApartmentSwap", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1711, 1713), 
      new com.choicemaker.cm.core.ClueDesc(264, "aZip", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1720, 1723), 
      new com.choicemaker.cm.core.ClueDesc(265, "mZip", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1725, 1727), 
      new com.choicemaker.cm.core.ClueDesc(266, "aZip3Digits", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1729, 1732), 
      new com.choicemaker.cm.core.ClueDesc(267, "mZip3Digits", com.choicemaker.cm.core.Decision.MATCH, false, 0, 1734, 1736), 
      new com.choicemaker.cm.core.ClueDesc(268, "aDiffBoroCd", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1751, 1754), 
      new com.choicemaker.cm.core.ClueDesc(269, "dBoroCd", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1756, 1758), 
      new com.choicemaker.cm.core.ClueDesc(270, "aDiffZip", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1760, 1763), 
      new com.choicemaker.cm.core.ClueDesc(271, "dZip", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1765, 1767), 
      new com.choicemaker.cm.core.ClueDesc(272, "aDiffStreetName", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1769, 1772), 
      new com.choicemaker.cm.core.ClueDesc(273, "dStreetName", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1774, 1776), 
      new com.choicemaker.cm.core.ClueDesc(274, "aDiffHouseNumber", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1778, 1782), 
      new com.choicemaker.cm.core.ClueDesc(275, "dHouseNumber", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1784, 1786), 
      new com.choicemaker.cm.core.ClueDesc(276, "aDiffDifferentAddressesWithin90Days", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1833, 1837), 
      new com.choicemaker.cm.core.ClueDesc(277, "dDifferentAddressesWithin90Days", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1839, 1841), 
      new com.choicemaker.cm.core.ClueDesc(278, "aZeroCountValidAddrId", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1845, 1849), 
      new com.choicemaker.cm.core.ClueDesc(279, "aMissingRelFields", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1857, 1872), 
      new com.choicemaker.cm.core.ClueDesc(280, "aMissingAddrRelContactMothers", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1883, 1887), 
      new com.choicemaker.cm.core.ClueDesc(281, "aMissingAddrRelContact", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1889, 1894), 
      new com.choicemaker.cm.core.ClueDesc(282, "aMissingAddressRel", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1896, 1900), 
      new com.choicemaker.cm.core.ClueDesc(283, "aMissingIds", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1902, 1905), 
      new com.choicemaker.cm.core.ClueDesc(284, "aMissingAddrRelContactMothersIds", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1907, 1914), 
      new com.choicemaker.cm.core.ClueDesc(285, "dMissingAddrRelContactMothersIds", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1916, 1919), 
      new com.choicemaker.cm.core.ClueDesc(286, "dMissingAddrRelContactMothers", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1921, 1924), 
      new com.choicemaker.cm.core.ClueDesc(287, "dMissingAddrRelContact", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1926, 1929), 
      new com.choicemaker.cm.core.ClueDesc(288, "dMissingAddressRel", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1931, 1935), 
      new com.choicemaker.cm.core.ClueDesc(289, "dMissingIds", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1937, 1940), 
      new com.choicemaker.cm.core.ClueDesc(290, "aDiffSparsePatientAndContactAddress", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1962, 1971), 
      new com.choicemaker.cm.core.ClueDesc(291, "dSparsePatientAndContactAddress", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1973, 1975), 
      new com.choicemaker.cm.core.ClueDesc(292, "aDiffSparsePatientAddress", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 1977, 1981), 
      new com.choicemaker.cm.core.ClueDesc(293, "dSparsePatientAddress", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 1983, 1985), 
      new com.choicemaker.cm.core.ClueDesc(294, "aPhone", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2000, 2011), 
      new com.choicemaker.cm.core.ClueDesc(295, "mPhone", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2013, 2015), 
      new com.choicemaker.cm.core.ClueDesc(296, "aLocalPhone", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2017, 2023), 
      new com.choicemaker.cm.core.ClueDesc(297, "mLocalPhone", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2025, 2027), 
      new com.choicemaker.cm.core.ClueDesc(298, "rStreetPhone", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2078, 2080), 
      new com.choicemaker.cm.core.ClueDesc(299, "aEditDistancePhone", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2082, 2086), 
      new com.choicemaker.cm.core.ClueDesc(300, "mEditDistancePhone", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2088, 2090), 
      new com.choicemaker.cm.core.ClueDesc(301, "aDiffPhone", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2094, 2096), 
      new com.choicemaker.cm.core.ClueDesc(302, "dPhone", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2098, 2100), 
      new com.choicemaker.cm.core.ClueDesc(303, "aContactsNamesFirstAndLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2126, 2129), 
      new com.choicemaker.cm.core.ClueDesc(304, "mContactsNamesFirstAndLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2131, 2133), 
      new com.choicemaker.cm.core.ClueDesc(305, "aApproxContactsNamesFirstAndLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2135, 2141), 
      new com.choicemaker.cm.core.ClueDesc(306, "mApproxContactsNamesFirstAndLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2143, 2145), 
      new com.choicemaker.cm.core.ClueDesc(307, "aContactsNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2147, 2151), 
      new com.choicemaker.cm.core.ClueDesc(308, "mContactsNamesFirst", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2153, 2155), 
      new com.choicemaker.cm.core.ClueDesc(309, "aContactsNamesFirstCloseLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2157, 2162), 
      new com.choicemaker.cm.core.ClueDesc(310, "mContactsNamesFirstCloseLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2164, 2166), 
      new com.choicemaker.cm.core.ClueDesc(311, "aApproxContactsNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2168, 2172), 
      new com.choicemaker.cm.core.ClueDesc(312, "mApproxContactsNamesFirst", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2174, 2176), 
      new com.choicemaker.cm.core.ClueDesc(313, "aContactsNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2178, 2184), 
      new com.choicemaker.cm.core.ClueDesc(314, "mContactsNamesLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2186, 2188), 
      new com.choicemaker.cm.core.ClueDesc(315, "aSoundexContactsNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2190, 2198), 
      new com.choicemaker.cm.core.ClueDesc(316, "mSoundexContactsNamesLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2200, 2202), 
      new com.choicemaker.cm.core.ClueDesc(317, "aContactsNamesMaiden", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2204, 2208), 
      new com.choicemaker.cm.core.ClueDesc(318, "mContactsNamesMaiden", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2210, 2212), 
      new com.choicemaker.cm.core.ClueDesc(319, "aMothersMaiden", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2216, 2223), 
      new com.choicemaker.cm.core.ClueDesc(320, "mMothersMaiden", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2225, 2227), 
      new com.choicemaker.cm.core.ClueDesc(321, "aSoundexMothersMaiden", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2229, 2238), 
      new com.choicemaker.cm.core.ClueDesc(322, "aSoundexMothersMaiden2", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2240, 2243), 
      new com.choicemaker.cm.core.ClueDesc(323, "dSoundexMothersMaiden2", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2245, 2247), 
      new com.choicemaker.cm.core.ClueDesc(324, "aMothersDob", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2251, 2254), 
      new com.choicemaker.cm.core.ClueDesc(325, "mMothersDob", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2256, 2258), 
      new com.choicemaker.cm.core.ClueDesc(326, "aMothersDobApprox", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2260, 2266), 
      new com.choicemaker.cm.core.ClueDesc(327, "mMothersDobApprox", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2268, 2270), 
      new com.choicemaker.cm.core.ClueDesc(328, "aDiffMothersDob", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2272, 2275), 
      new com.choicemaker.cm.core.ClueDesc(329, "dMothersDob", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2277, 2279), 
      new com.choicemaker.cm.core.ClueDesc(330, "aDiffDobIsMothersDob", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2281, 2284), 
      new com.choicemaker.cm.core.ClueDesc(331, "dDobIsMothersDob", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2286, 2288), 
      new com.choicemaker.cm.core.ClueDesc(332, "aContactsNamesLastPatientNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2292, 2294), 
      new com.choicemaker.cm.core.ClueDesc(333, "mContactsNamesLastPatientNamesFirst", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2296, 2298), 
      new com.choicemaker.cm.core.ClueDesc(334, "aContactsNamesLastPatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2300, 2303), 
      new com.choicemaker.cm.core.ClueDesc(335, "mContactsNamesLastPatientNamesLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2305, 2307), 
      new com.choicemaker.cm.core.ClueDesc(336, "aContactsNamesMaidenPatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2309, 2313), 
      new com.choicemaker.cm.core.ClueDesc(337, "mContactsNamesMaidenPatientNamesLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2315, 2317), 
      new com.choicemaker.cm.core.ClueDesc(338, "aSoundexContactsNamesMaidenPatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2319, 2323), 
      new com.choicemaker.cm.core.ClueDesc(339, "mSoundexContactsNamesMaidenPatientNamesLast", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2325, 2327), 
      new com.choicemaker.cm.core.ClueDesc(340, "aSwapContactsNamesFirstLastExact", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2329, 2332), 
      new com.choicemaker.cm.core.ClueDesc(341, "mSwapContactsNamesFirstLastExact", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2334, 2336), 
      new com.choicemaker.cm.core.ClueDesc(342, "aSwapContactsNamesFirstLastAny", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2338, 2341), 
      new com.choicemaker.cm.core.ClueDesc(343, "mSwapContactsNamesFirstLastAny", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2343, 2345), 
      new com.choicemaker.cm.core.ClueDesc(344, "aSwapContactsNamesFirstLastExactSoundex", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2347, 2350), 
      new com.choicemaker.cm.core.ClueDesc(345, "mSwapContactsNamesFirstLastExactSoundex", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2352, 2354), 
      new com.choicemaker.cm.core.ClueDesc(346, "aContactsNamesLastPatientNamesMaiden", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2356, 2359), 
      new com.choicemaker.cm.core.ClueDesc(347, "mContactsNamesLastPatientNamesMaiden", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2361, 2363), 
      new com.choicemaker.cm.core.ClueDesc(348, "aContactsNamesMaidenPatientNamesMaiden", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2365, 2369), 
      new com.choicemaker.cm.core.ClueDesc(349, "mContactsNamesMaidenPatientNamesMaiden", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2371, 2373), 
      new com.choicemaker.cm.core.ClueDesc(350, "aContactsNamesLastMothersMaiden", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2375, 2379), 
      new com.choicemaker.cm.core.ClueDesc(351, "mContactsNamesLastMothersMaiden", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2381, 2383), 
      new com.choicemaker.cm.core.ClueDesc(352, "aDiffContactsNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2387, 2391), 
      new com.choicemaker.cm.core.ClueDesc(353, "dContactsNamesLast", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2393, 2395), 
      new com.choicemaker.cm.core.ClueDesc(354, "aDiffSoundexContactsNamesFirstAndLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2397, 2401), 
      new com.choicemaker.cm.core.ClueDesc(355, "dSoundexContactsNamesFirstAndLast", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2403, 2405), 
      new com.choicemaker.cm.core.ClueDesc(356, "aDiffSoundexContactsNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2407, 2411), 
      new com.choicemaker.cm.core.ClueDesc(357, "dSoundexContactsNamesLast", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2413, 2415), 
      new com.choicemaker.cm.core.ClueDesc(358, "aDiffMothersMaiden", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2418, 2425), 
      new com.choicemaker.cm.core.ClueDesc(359, "dMothersMaiden", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2427, 2429), 
      new com.choicemaker.cm.core.ClueDesc(360, "aDiffSoundexMothersMaiden", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2431, 2434), 
      new com.choicemaker.cm.core.ClueDesc(361, "dSoundexMothersMaiden", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2436, 2438), 
      new com.choicemaker.cm.core.ClueDesc(362, "aDiffSiblings", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2448, 2459), 
      new com.choicemaker.cm.core.ClueDesc(363, "dSiblings", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2461, 2463), 
      new com.choicemaker.cm.core.ClueDesc(364, "aDiffTwinsDEPRECATED", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2465, 2474), 
      new com.choicemaker.cm.core.ClueDesc(365, "aDiffTwins", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2476, 2478), 
      new com.choicemaker.cm.core.ClueDesc(366, "dTwins", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2480, 2482), 
      new com.choicemaker.cm.core.ClueDesc(367, "aDiffTwinsScantyDEPRECATED", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2484, 2493), 
      new com.choicemaker.cm.core.ClueDesc(368, "aDiffTwinsScanty", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2495, 2498), 
      new com.choicemaker.cm.core.ClueDesc(369, "dTwinsScanty", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2500, 2502), 
      new com.choicemaker.cm.core.ClueDesc(370, "aMbiAndDifferentFirstOrMiddleName", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2504, 2512), 
      new com.choicemaker.cm.core.ClueDesc(371, "dMbiAndDifferentFirstOrMiddleName", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2514, 2516), 
      new com.choicemaker.cm.core.ClueDesc(372, "aMbiAndApproximateFirstName", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2518, 2521), 
      new com.choicemaker.cm.core.ClueDesc(373, "mMbiAndApproximateFirstName", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2523, 2525), 
      new com.choicemaker.cm.core.ClueDesc(374, "aVitalAndNoMBI", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2528, 2536), 
      new com.choicemaker.cm.core.ClueDesc(375, "mVitalAndNoMBI", com.choicemaker.cm.core.Decision.MATCH, false, 0, 2538, 2540), 
      new com.choicemaker.cm.core.ClueDesc(376, "aInconsistentFirstNamesQNotVR", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2544, 2557), 
      new com.choicemaker.cm.core.ClueDesc(377, "aInconsistentFirstNamesMNotVR", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2559, 2567), 
      new com.choicemaker.cm.core.ClueDesc(378, "aInconsistentFirstNames", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2569, 2572), 
      new com.choicemaker.cm.core.ClueDesc(379, "dInconsistentFirstNamesMB", com.choicemaker.cm.core.Decision.DIFFER, false, 1, 2574, 2580), 
      new com.choicemaker.cm.core.ClueDesc(380, "dInconsistentFirstNamesNotMB", com.choicemaker.cm.core.Decision.DIFFER, false, 1, 2582, 2588), 
      new com.choicemaker.cm.core.ClueDesc(381, "aDistinctFirstNames", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2590, 2595), 
      new com.choicemaker.cm.core.ClueDesc(382, "aDistinctFirstNamesSameLastNameSameDOB", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2597, 2600), 
      new com.choicemaker.cm.core.ClueDesc(383, "aUncorrelatedMRN", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2602, 2605), 
      new com.choicemaker.cm.core.ClueDesc(384, "nmMBTwinCorrelationWithMrn", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 0, 2607, 2610), 
      new com.choicemaker.cm.core.ClueDesc(385, "dMBTwinCorrelationWithMrn", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2612, 2614), 
      new com.choicemaker.cm.core.ClueDesc(386, "nmMBTwinCorrelationWithoutMrn", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 0, 2616, 2619), 
      new com.choicemaker.cm.core.ClueDesc(387, "dMBTwinCorrelationWithoutMrn", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2621, 2623), 
      new com.choicemaker.cm.core.ClueDesc(388, "nmTwinCorrelationNoMbWithMrn", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 0, 2625, 2628), 
      new com.choicemaker.cm.core.ClueDesc(389, "dTwinCorrelationNoMbWithMrn", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2630, 2632), 
      new com.choicemaker.cm.core.ClueDesc(390, "nmTwinCorrelationNoMbWithoutMrnButSameFacility", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 0, 2634, 2637), 
      new com.choicemaker.cm.core.ClueDesc(391, "dTwinCorrelationNoMbWithoutMrnButSameFacility", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2639, 2641), 
      new com.choicemaker.cm.core.ClueDesc(392, "aWeakTwinCorrelation", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2643, 2646), 
      new com.choicemaker.cm.core.ClueDesc(393, "dWeakTwinCorrelation", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2648, 2650), 
      new com.choicemaker.cm.core.ClueDesc(394, "aDiffDobSupportedByEvents", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2654, 2664), 
      new com.choicemaker.cm.core.ClueDesc(395, "dDobSupportedByEvents", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2666, 2668), 
      new com.choicemaker.cm.core.ClueDesc(396, "ahDiffPatientNamesFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2672, 2674), 
      new com.choicemaker.cm.core.ClueDesc(397, "hdPatientNamesFirst", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2676, 2678), 
      new com.choicemaker.cm.core.ClueDesc(398, "ahDiffPatientNamesLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2680, 2682), 
      new com.choicemaker.cm.core.ClueDesc(399, "hdPatientNamesLast", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2684, 2686), 
      new com.choicemaker.cm.core.ClueDesc(400, "ahDiffDob", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2688, 2690), 
      new com.choicemaker.cm.core.ClueDesc(401, "hdDob", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2692, 2694), 
      new com.choicemaker.cm.core.ClueDesc(402, "ahDiffAddress", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2701, 2705), 
      new com.choicemaker.cm.core.ClueDesc(403, "hdAddress", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2707, 2709), 
      new com.choicemaker.cm.core.ClueDesc(404, "ahDiffAddressRel", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2711, 2713), 
      new com.choicemaker.cm.core.ClueDesc(405, "hdAddressRel", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2715, 2717), 
      new com.choicemaker.cm.core.ClueDesc(406, "ahDiffContactsNamesFirstAndLast", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2719, 2721), 
      new com.choicemaker.cm.core.ClueDesc(407, "hdContactsNamesFirstAndLast", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2723, 2725), 
      new com.choicemaker.cm.core.ClueDesc(408, "ahDiffMothersMaiden", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2727, 2729), 
      new com.choicemaker.cm.core.ClueDesc(409, "hdMothersMaiden", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2731, 2733), 
      new com.choicemaker.cm.core.ClueDesc(410, "ahDiffMothersDob", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2735, 2737), 
      new com.choicemaker.cm.core.ClueDesc(411, "hdMothersDob", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 2739, 2741), 
      new com.choicemaker.cm.core.ClueDesc(412, "rJrSrIII", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2785, 2788), 
      new com.choicemaker.cm.core.ClueDesc(413, "rScrewyDob", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2790, 2792), 
      new com.choicemaker.cm.core.ClueDesc(414, "rInvalidFirstName", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2794, 2796), 
      new com.choicemaker.cm.core.ClueDesc(415, "rMothersFirst", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2798, 2800), 
      new com.choicemaker.cm.core.ClueDesc(416, "rUnparsedAddress", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2802, 2804), 
      new com.choicemaker.cm.core.ClueDesc(417, "rAttn", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2806, 2808), 
      new com.choicemaker.cm.core.ClueDesc(418, "rPoBox", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2810, 2812), 
      new com.choicemaker.cm.core.ClueDesc(419, "rDigitName", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 2814, 2818), 
      new com.choicemaker.cm.core.ClueDesc(420, "rSameVitalId", com.choicemaker.cm.core.Decision.MATCH, true, 1, 2820, 2823), 
      new com.choicemaker.cm.core.ClueDesc(421, "rBirthdaySeparationOverOneYear", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 0, 2828, 2833), 
      new com.choicemaker.cm.core.ClueDesc(422, "rLeadReports", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 0, 2842, 2855), 
      new com.choicemaker.cm.core.ClueDesc(423, "rDifferentMultiName", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 0, 2857, 2872), 
      new com.choicemaker.cm.core.ClueDesc(424, "rHighStackingNames05", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 1, 2874, 2881), 
      new com.choicemaker.cm.core.ClueDesc(425, "rHighStackingNames10", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 1, 2883, 2891), 
      new com.choicemaker.cm.core.ClueDesc(426, "rQueryDifferingNames", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 0, 2900, 2943), 
      new com.choicemaker.cm.core.ClueDesc(427, "rMatchDifferingNames", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 0, 2945, 2989), 
      new com.choicemaker.cm.core.ClueDesc(428, "rVitalRecordId", com.choicemaker.cm.core.Decision.DIFFER, true, 0, 2992, 2995), 
      new com.choicemaker.cm.core.ClueDesc(429, "rMatchFrozen", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 1, 2997, 3000), 
      new com.choicemaker.cm.core.ClueDesc(430, "rQueryFrozen", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 1, 3002, 3005), 
      new com.choicemaker.cm.core.ClueDesc(431, "rCirCir", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3007, 3011), 
      new com.choicemaker.cm.core.ClueDesc(432, "rLeadLead", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3013, 3017), 
      new com.choicemaker.cm.core.ClueDesc(433, "rLeadCIR", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3019, 3024), 
      new com.choicemaker.cm.core.ClueDesc(434, "trackEnhancement01", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3132, 3141), 
      new com.choicemaker.cm.core.ClueDesc(435, "hasGenericFirstName", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3143, 3150), 
      new com.choicemaker.cm.core.ClueDesc(436, "aVitalRecordMbiGenericFirstNameNoUnique", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3152, 3160), 
      new com.choicemaker.cm.core.ClueDesc(437, "nmVitalRecordMbiGenericFirstNameNoUnique", com.choicemaker.cm.core.ExtDecision.NOMATCH, true, 0, 3162, 3169), 
      new com.choicemaker.cm.core.ClueDesc(438, "dVitalRecordMbiGenericFirstNameNoUnique", com.choicemaker.cm.core.Decision.DIFFER, false, 0, 3171, 3177), 
      new com.choicemaker.cm.core.ClueDesc(439, "aFacilityInfo", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3179, 3183), 
      new com.choicemaker.cm.core.ClueDesc(440, "aDateInfo", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3185, 3189), 
      new com.choicemaker.cm.core.ClueDesc(441, "aAddressInfo", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3191, 3195), 
      new com.choicemaker.cm.core.ClueDesc(442, "aPhoneInfo", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3197, 3199), 
      new com.choicemaker.cm.core.ClueDesc(443, "aContactInfo", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3201, 3205), 
      new com.choicemaker.cm.core.ClueDesc(444, "aMotherInfo", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3209, 3212), 
      new com.choicemaker.cm.core.ClueDesc(445, "aScantyPair", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3214, 3216), 
      new com.choicemaker.cm.core.ClueDesc(446, "aScantyFourFieldMatch", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3218, 3220), 
      new com.choicemaker.cm.core.ClueDesc(447, "mScantyFourFieldMatch", com.choicemaker.cm.core.Decision.MATCH, false, 0, 3222, 3224), 
      new com.choicemaker.cm.core.ClueDesc(448, "aScantyFourFieldApproxNames", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3226, 3230), 
      new com.choicemaker.cm.core.ClueDesc(449, "mScantyFourFieldApproxNames", com.choicemaker.cm.core.Decision.MATCH, false, 0, 3232, 3234), 
      new com.choicemaker.cm.core.ClueDesc(450, "aScantyFourFieldApproxNamesDob", com.choicemaker.cm.core.ExtDecision.NONE, true, 0, 3236, 3240), 
      new com.choicemaker.cm.core.ClueDesc(451, "mScantyFourFieldApproxNamesDob", com.choicemaker.cm.core.Decision.MATCH, false, 0, 3242, 3244), 
   };
   private static int[] sizes = {
      78, 
      133, 
      0, 
      0, 
      14, 
      0, 
      227, 
   };
   public int size(com.choicemaker.cm.core.Decision d) {
      return sizes[d.toInt()];
   };
   private static int aSize = 452;
   public int size() {
      return 452;
   };
   public com.choicemaker.cm.core.ClueSetType getType() {
      return com.choicemaker.cm.core.ClueSetType.BOOLEAN;
   };
   public boolean hasDecision() {
      return true;
   };
   public com.choicemaker.cm.core.ClueDesc[] getClueDesc() {
      return clueDescs;
   };
   public com.choicemaker.cm.core.base.ActiveClues getActiveClues(com.choicemaker.cm.core.Record qi, com.choicemaker.cm.core.Record mi, boolean[] eval) {
      __evalNum = __evalNum + 1;
      cat.fine("PatientImpl.class.getName() == " + PatientImpl.class.getName());
      cat.fine("PatientImpl.class.toString() == " + PatientImpl.class.toString());
      cat.fine("PatientImpl.class.getClassLoader().toString() == " + PatientImpl.class.getClassLoader().toString());
      PatientImpl q = (PatientImpl)qi;
      PatientImpl m = (PatientImpl)mi;
      com.choicemaker.cm.core.base.BooleanActiveClues a = new com.choicemaker.cm.core.base.BooleanActiveClues(108);
      if (eval[0])
         try {
            if (getCluerLargerMci_id_isMB(q, m))
               {
                  a.addRule(0, 1);
                  cat.fine("Clue rLargerMci_id_isMB (0) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rLargerMci_id_isMB (0) exception: " + ex);
         };
      if (eval[1])
         try {
            if (getCluerSmallerMci_id_isMB(q, m))
               {
                  a.addRule(1, 1);
                  cat.fine("Clue rSmallerMci_id_isMB (1) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rSmallerMci_id_isMB (1) exception: " + ex);
         };
      if (eval[2])
         try {
            if (getCluerLargerMci_id_isVR(q, m))
               {
                  a.addRule(2, 1);
                  cat.fine("Clue rLargerMci_id_isVR (2) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rLargerMci_id_isVR (2) exception: " + ex);
         };
      if (eval[3])
         try {
            if (getCluerSmallerMci_id_isVR(q, m))
               {
                  a.addRule(3, 1);
                  cat.fine("Clue rSmallerMci_id_isVR (3) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rSmallerMci_id_isVR (3) exception: " + ex);
         };
      if (eval[4])
         try {
            if (getCluerLargerMci_id_isFrozen(q, m))
               {
                  a.addRule(4, 1);
                  cat.fine("Clue rLargerMci_id_isFrozen (4) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rLargerMci_id_isFrozen (4) exception: " + ex);
         };
      if (eval[5])
         try {
            if (getCluerSmallerMci_id_isFrozen(q, m))
               {
                  a.addRule(5, 1);
                  cat.fine("Clue rSmallerMci_id_isFrozen (5) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rSmallerMci_id_isFrozen (5) exception: " + ex);
         };
      if (eval[6])
         try {
            if (getClueaBin(q, m))
               {
                  a.addRule(6, 0);
                  cat.fine("Clue aBin (6) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aBin (6) exception: " + ex);
         };
      if (eval[7])
         try {
            if (getClueaPoBox(q, m))
               {
                  a.addRule(7, 0);
                  cat.fine("Clue aPoBox (7) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aPoBox (7) exception: " + ex);
         };
      if (eval[8])
         try {
            if (getClueaStreetName(q, m))
               {
                  a.addRule(8, 0);
                  cat.fine("Clue aStreetName (8) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aStreetName (8) exception: " + ex);
         };
      if (eval[9])
         try {
            if (getClueaStreetNameDigits(q, m))
               {
                  a.addRule(9, 0);
                  cat.fine("Clue aStreetNameDigits (9) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aStreetNameDigits (9) exception: " + ex);
         };
      if (eval[10])
         try {
            if (getClueaRoughHouseholdAddress(q, m))
               {
                  a.addRule(10, 0);
                  cat.fine("Clue aRoughHouseholdAddress (10) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aRoughHouseholdAddress (10) exception: " + ex);
         };
      if (eval[11])
         try {
            if (getClueaPhone_0(q, m))
               {
                  a.addRule(11, 0);
                  cat.fine("Clue aPhone_0 (11) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aPhone_0 (11) exception: " + ex);
         };
      if (eval[12])
         try {
            if (getClueaLocalPhone_0(q, m))
               {
                  a.addRule(12, 0);
                  cat.fine("Clue aLocalPhone_0 (12) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aLocalPhone_0 (12) exception: " + ex);
         };
      if (eval[13])
         try {
            if (getClueaRoughHouseholdPhone(q, m))
               {
                  a.addRule(13, 0);
                  cat.fine("Clue aRoughHouseholdPhone (13) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aRoughHouseholdPhone (13) exception: " + ex);
         };
      if (eval[14])
         try {
            if (getClueaApproxContactsNamesFirstAndLast_0(q, m))
               {
                  a.addRule(14, 0);
                  cat.fine("Clue aApproxContactsNamesFirstAndLast_0 (14) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aApproxContactsNamesFirstAndLast_0 (14) exception: " + ex);
         };
      if (eval[15])
         try {
            if (getClueaContactsNamesLast_0(q, m))
               {
                  a.addRule(15, 0);
                  cat.fine("Clue aContactsNamesLast_0 (15) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesLast_0 (15) exception: " + ex);
         };
      if (eval[16])
         try {
            if (getClueaRoughHouseholdContacts(q, m))
               {
                  a.addRule(16, 0);
                  cat.fine("Clue aRoughHouseholdContacts (16) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aRoughHouseholdContacts (16) exception: " + ex);
         };
      if (eval[17])
         try {
            if (getClueaContactsNamesMaiden_0(q, m))
               {
                  a.addRule(17, 0);
                  cat.fine("Clue aContactsNamesMaiden_0 (17) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesMaiden_0 (17) exception: " + ex);
         };
      if (eval[18])
         try {
            if (getClueaMothersMaiden_0(q, m))
               {
                  a.addRule(18, 0);
                  cat.fine("Clue aMothersMaiden_0 (18) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMothersMaiden_0 (18) exception: " + ex);
         };
      if (eval[19])
         try {
            if (getClueaRoughHouseholdMother(q, m))
               {
                  a.addRule(19, 0);
                  cat.fine("Clue aRoughHouseholdMother (19) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aRoughHouseholdMother (19) exception: " + ex);
         };
      if (eval[20])
         try {
            if (getClueisHH(q, m))
               {
                  a.addRule(20, 0);
                  cat.fine("Clue isHH (20) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue isHH (20) exception: " + ex);
         };
      if (eval[21])
         try {
            if (getClueisMB(q, m))
               {
                  a.addRule(21, 1);
                  cat.fine("Clue isMB (21) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue isMB (21) exception: " + ex);
         };
      if (eval[22])
         try {
            if (getClueisVR(q, m))
               {
                  a.addRule(22, 1);
                  cat.fine("Clue isVR (22) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue isVR (22) exception: " + ex);
         };
      if (eval[23])
         try {
            if (getClueisVitalNotMB(q, m))
               {
                  a.addRule(23, 0);
                  cat.fine("Clue isVitalNotMB (23) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue isVitalNotMB (23) exception: " + ex);
         };
      if (eval[24])
         try {
            if (getClueunreliableNotMB(q, m))
               {
                  a.addRule(24, 0);
                  cat.fine("Clue unreliableNotMB (24) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue unreliableNotMB (24) exception: " + ex);
         };
      try {
         TYPE_ALL_7 = 7;
      } catch (java.lang.Exception ex) {
         cat.severe("Expression TYPE_ALL_7 exception: " + ex);
      };
      try {
         pairType = TYPE_ALL_7;
      } catch (java.lang.Exception ex) {
         cat.severe("Expression pairType exception: " + ex);
      };
      if (eval[25])
         try {
            if (getCluePairType_7_ALL(q, m))
               {
                  a.addRule(25, 0);
                  cat.fine("Clue PairType_7_ALL (25) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue PairType_7_ALL (25) exception: " + ex);
         };
      if (eval[26])
         try {
            if (getClueaPatientNamesFirst(q, m))
               {
                  a.addRule(26, 0);
                  cat.fine("Clue aPatientNamesFirst (26) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aPatientNamesFirst (26) exception: " + ex);
         };
      if (eval[27])
         try {
            if (getCluemPatientNamesFirst(q, m))
               {
                  a.add(27, 0);
                  cat.fine("Clue mPatientNamesFirst (27) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mPatientNamesFirst (27) exception: " + ex);
         };
      if (eval[28])
         try {
            if (getClueaPatientNamesFirstInitial(q, m))
               {
                  a.addRule(28, 0);
                  cat.fine("Clue aPatientNamesFirstInitial (28) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aPatientNamesFirstInitial (28) exception: " + ex);
         };
      if (eval[29])
         try {
            if (getCluemPatientNamesFirstInitial(q, m))
               {
                  a.add(29, 0);
                  cat.fine("Clue mPatientNamesFirstInitial (29) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mPatientNamesFirstInitial (29) exception: " + ex);
         };
      if (eval[30])
         try {
            if (getClueaNicknameRaw(q, m))
               {
                  a.addRule(30, 0);
                  cat.fine("Clue aNicknameRaw (30) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aNicknameRaw (30) exception: " + ex);
         };
      if (eval[31])
         try {
            if (getClueaNicknameQualified(q, m))
               {
                  a.addRule(31, 0);
                  cat.fine("Clue aNicknameQualified (31) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aNicknameQualified (31) exception: " + ex);
         };
      if (eval[32])
         try {
            if (getCluemNickname(q, m))
               {
                  a.add(32, 0);
                  cat.fine("Clue mNickname (32) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mNickname (32) exception: " + ex);
         };
      if (eval[33])
         try {
            if (getClueaOverlapPatientNamesFirst(q, m))
               {
                  a.addRule(33, 0);
                  cat.fine("Clue aOverlapPatientNamesFirst (33) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aOverlapPatientNamesFirst (33) exception: " + ex);
         };
      if (eval[34])
         try {
            if (getCluemOverlapPatientNamesFirst(q, m))
               {
                  a.add(34, 0);
                  cat.fine("Clue mOverlapPatientNamesFirst (34) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mOverlapPatientNamesFirst (34) exception: " + ex);
         };
      if (eval[35])
         try {
            if (getClueaEditDistancePatientNamesFirst(q, m))
               {
                  a.addRule(35, 0);
                  cat.fine("Clue aEditDistancePatientNamesFirst (35) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aEditDistancePatientNamesFirst (35) exception: " + ex);
         };
      if (eval[36])
         try {
            if (getCluemEditDistancePatientNamesFirst(q, m))
               {
                  a.add(36, 0);
                  cat.fine("Clue mEditDistancePatientNamesFirst (36) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mEditDistancePatientNamesFirst (36) exception: " + ex);
         };
      if (eval[37])
         try {
            if (getClueaJaroPatientNamesFirst(q, m))
               {
                  a.addRule(37, 0);
                  cat.fine("Clue aJaroPatientNamesFirst (37) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aJaroPatientNamesFirst (37) exception: " + ex);
         };
      if (eval[38])
         try {
            if (getCluemJaroPatientNamesFirst(q, m))
               {
                  a.add(38, 0);
                  cat.fine("Clue mJaroPatientNamesFirst (38) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mJaroPatientNamesFirst (38) exception: " + ex);
         };
      if (eval[39])
         try {
            if (getClueaNysiisOrDoubleMetaphonePatientNamesFirst(q, m))
               {
                  a.addRule(39, 0);
                  cat.fine("Clue aNysiisOrDoubleMetaphonePatientNamesFirst (39) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aNysiisOrDoubleMetaphonePatientNamesFirst (39) exception: " + ex);
         };
      if (eval[40])
         try {
            if (getCluemNysiisOrDoubleMetaphonePatientNamesFirst(q, m))
               {
                  a.add(40, 0);
                  cat.fine("Clue mNysiisOrDoubleMetaphonePatientNamesFirst (40) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mNysiisOrDoubleMetaphonePatientNamesFirst (40) exception: " + ex);
         };
      if (eval[41])
         try {
            if (getCluerSoundexPatientNamesFirst(q, m))
               {
                  a.addRule(41, 0);
                  cat.fine("Clue rSoundexPatientNamesFirst (41) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rSoundexPatientNamesFirst (41) exception: " + ex);
         };
      aMultiBirthOrderQ[0] = -1;
      __taMultiBirthOrderQ: for (int i0 = 0, clueNum = 0; i0 < __aMultiBirthOrderQ__idx__order.length; i0 = i0 + 1, clueNum = clueNum + 1)
         if (eval[42 + clueNum])
            try {
               if (getClueaMultiBirthOrderQ(q, m, __aMultiBirthOrderQ__idx__order[i0]))
                  {
                     a.addRule(42 + clueNum, 0);
                     if (cat.isLoggable(java.util.logging.Level.FINE))
                        cat.fine(("Clue aMultiBirthOrderQ" + (" (" + ((42 + clueNum) + ")"))) + " fired");
                     {
                        aMultiBirthOrderQ[0] = i0;
                     };
                     break __taMultiBirthOrderQ;
                  };
            } catch (java.lang.Exception ex) {
               cat.severe((("Clue aMultiBirthOrderQ" + (" (" + ((42 + clueNum) + ")"))) + " exception: ") + ex);
            };
      aMultiBirthOrderM[0] = -1;
      __taMultiBirthOrderM: for (int i0 = 0, clueNum = 0; i0 < __aMultiBirthOrderM__idx__order.length; i0 = i0 + 1, clueNum = clueNum + 1)
         if (eval[47 + clueNum])
            try {
               if (getClueaMultiBirthOrderM(q, m, __aMultiBirthOrderM__idx__order[i0]))
                  {
                     a.addRule(47 + clueNum, 0);
                     if (cat.isLoggable(java.util.logging.Level.FINE))
                        cat.fine(("Clue aMultiBirthOrderM" + (" (" + ((47 + clueNum) + ")"))) + " fired");
                     {
                        aMultiBirthOrderM[0] = i0;
                     };
                     break __taMultiBirthOrderM;
                  };
            } catch (java.lang.Exception ex) {
               cat.severe((("Clue aMultiBirthOrderM" + (" (" + ((47 + clueNum) + ")"))) + " exception: ") + ex);
            };
      if (eval[52])
         try {
            if (getCluedMultiBirthOrderQ(q, m))
               {
                  a.add(52, 0);
                  cat.fine("Clue dMultiBirthOrderQ (52) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMultiBirthOrderQ (52) exception: " + ex);
         };
      try {
         approximateFirstNameMatch = ((((getClueaPatientNamesFirstInitial(q, m) || getClueaNicknameQualified(q, m)) || getClueaOverlapPatientNamesFirst(q, m)) || getClueaEditDistancePatientNamesFirst(q, m)) || getClueaJaroPatientNamesFirst(q, m)) || getClueaNysiisOrDoubleMetaphonePatientNamesFirst(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression approximateFirstNameMatch exception: " + ex);
      };
      if (eval[53])
         try {
            if (getClueaDiffPatientNamesFirst(q, m))
               {
                  a.addRule(53, 0);
                  cat.fine("Clue aDiffPatientNamesFirst (53) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffPatientNamesFirst (53) exception: " + ex);
         };
      if (eval[54])
         try {
            if (getCluedPatientNamesFirst(q, m))
               {
                  a.add(54, 0);
                  cat.fine("Clue dPatientNamesFirst (54) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dPatientNamesFirst (54) exception: " + ex);
         };
      mJaroSoundexFrequencyFirst[0] = -1;
      __tmJaroSoundexFrequencyFirst: for (int i0 = 0, clueNum = 0; i0 < __mJaroSoundexFrequencyFirst__idx__frequency.length; i0 = i0 + 1, clueNum = clueNum + 1)
         if (eval[55 + clueNum])
            try {
               if (getCluemJaroSoundexFrequencyFirst(q, m, __mJaroSoundexFrequencyFirst__idx__frequency[i0]))
                  {
                     a.add(55 + clueNum, 0);
                     if (cat.isLoggable(java.util.logging.Level.FINE))
                        cat.fine(("Clue mJaroSoundexFrequencyFirst" + (" (" + ((55 + clueNum) + ")"))) + " fired");
                     {
                        mJaroSoundexFrequencyFirst[0] = i0;
                     };
                     break __tmJaroSoundexFrequencyFirst;
                  };
            } catch (java.lang.Exception ex) {
               cat.severe((("Clue mJaroSoundexFrequencyFirst" + (" (" + ((55 + clueNum) + ")"))) + " exception: ") + ex);
            };
      mFrequencyPatientNamesFirst[0] = -1;
      __tmFrequencyPatientNamesFirst: for (int i0 = 0, clueNum = 0; i0 < __mFrequencyPatientNamesFirst__idx__frequency.length; i0 = i0 + 1, clueNum = clueNum + 1)
         if (eval[61 + clueNum])
            try {
               if (getCluemFrequencyPatientNamesFirst(q, m, __mFrequencyPatientNamesFirst__idx__frequency[i0]))
                  {
                     a.add(61 + clueNum, 0);
                     if (cat.isLoggable(java.util.logging.Level.FINE))
                        cat.fine(("Clue mFrequencyPatientNamesFirst" + (" (" + ((61 + clueNum) + ")"))) + " fired");
                     {
                        mFrequencyPatientNamesFirst[0] = i0;
                     };
                     break __tmFrequencyPatientNamesFirst;
                  };
            } catch (java.lang.Exception ex) {
               cat.severe((("Clue mFrequencyPatientNamesFirst" + (" (" + ((61 + clueNum) + ")"))) + " exception: ") + ex);
            };
      if (eval[72])
         try {
            if (getClueaPatientNamesMiddle(q, m))
               {
                  a.addRule(72, 0);
                  cat.fine("Clue aPatientNamesMiddle (72) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aPatientNamesMiddle (72) exception: " + ex);
         };
      if (eval[73])
         try {
            if (getCluemPatientNamesMiddle(q, m))
               {
                  a.add(73, 0);
                  cat.fine("Clue mPatientNamesMiddle (73) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mPatientNamesMiddle (73) exception: " + ex);
         };
      if (eval[74])
         try {
            if (getClueaPatientNamesMiddleInitial(q, m))
               {
                  a.addRule(74, 0);
                  cat.fine("Clue aPatientNamesMiddleInitial (74) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aPatientNamesMiddleInitial (74) exception: " + ex);
         };
      if (eval[75])
         try {
            if (getCluemPatientNamesMiddleInitial(q, m))
               {
                  a.add(75, 0);
                  cat.fine("Clue mPatientNamesMiddleInitial (75) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mPatientNamesMiddleInitial (75) exception: " + ex);
         };
      if (eval[76])
         try {
            if (getClueaPatientNamesMiddleSoundex(q, m))
               {
                  a.addRule(76, 0);
                  cat.fine("Clue aPatientNamesMiddleSoundex (76) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aPatientNamesMiddleSoundex (76) exception: " + ex);
         };
      if (eval[77])
         try {
            if (getCluemPatientNamesMiddleSoundex(q, m))
               {
                  a.add(77, 0);
                  cat.fine("Clue mPatientNamesMiddleSoundex (77) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mPatientNamesMiddleSoundex (77) exception: " + ex);
         };
      if (eval[78])
         try {
            if (getClueaPatientNamesMiddleJaro(q, m))
               {
                  a.addRule(78, 0);
                  cat.fine("Clue aPatientNamesMiddleJaro (78) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aPatientNamesMiddleJaro (78) exception: " + ex);
         };
      if (eval[79])
         try {
            if (getCluemPatientNamesMiddleJaro(q, m))
               {
                  a.add(79, 0);
                  cat.fine("Clue mPatientNamesMiddleJaro (79) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mPatientNamesMiddleJaro (79) exception: " + ex);
         };
      if (eval[80])
         try {
            if (getClueaDiffPatientNamesMiddle(q, m))
               {
                  a.addRule(80, 0);
                  cat.fine("Clue aDiffPatientNamesMiddle (80) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffPatientNamesMiddle (80) exception: " + ex);
         };
      if (eval[81])
         try {
            if (getCluedPatientNamesMiddle(q, m))
               {
                  a.add(81, 0);
                  cat.fine("Clue dPatientNamesMiddle (81) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dPatientNamesMiddle (81) exception: " + ex);
         };
      if (eval[82])
         try {
            if (getClueaPatientNamesLast(q, m))
               {
                  a.addRule(82, 0);
                  cat.fine("Clue aPatientNamesLast (82) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aPatientNamesLast (82) exception: " + ex);
         };
      if (eval[83])
         try {
            if (getCluemPatientNamesLast(q, m))
               {
                  a.add(83, 0);
                  cat.fine("Clue mPatientNamesLast (83) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mPatientNamesLast (83) exception: " + ex);
         };
      if (eval[84])
         try {
            if (getClueaOverlapPatientNamesLast(q, m))
               {
                  a.addRule(84, 0);
                  cat.fine("Clue aOverlapPatientNamesLast (84) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aOverlapPatientNamesLast (84) exception: " + ex);
         };
      if (eval[85])
         try {
            if (getCluemOverlapPatientNamesLast(q, m))
               {
                  a.add(85, 0);
                  cat.fine("Clue mOverlapPatientNamesLast (85) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mOverlapPatientNamesLast (85) exception: " + ex);
         };
      if (eval[86])
         try {
            if (getClueaNysiisPatientNamesLast(q, m))
               {
                  a.addRule(86, 0);
                  cat.fine("Clue aNysiisPatientNamesLast (86) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aNysiisPatientNamesLast (86) exception: " + ex);
         };
      if (eval[87])
         try {
            if (getCluemNysiisPatientNamesLast(q, m))
               {
                  a.add(87, 0);
                  cat.fine("Clue mNysiisPatientNamesLast (87) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mNysiisPatientNamesLast (87) exception: " + ex);
         };
      if (eval[88])
         try {
            if (getClueaDoubleMetaphonePatientNamesLast(q, m))
               {
                  a.addRule(88, 0);
                  cat.fine("Clue aDoubleMetaphonePatientNamesLast (88) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDoubleMetaphonePatientNamesLast (88) exception: " + ex);
         };
      if (eval[89])
         try {
            if (getCluemDoubleMetaphonePatientNamesLast(q, m))
               {
                  a.add(89, 0);
                  cat.fine("Clue mDoubleMetaphonePatientNamesLast (89) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mDoubleMetaphonePatientNamesLast (89) exception: " + ex);
         };
      if (eval[90])
         try {
            if (getClueaEditDistancePatientNamesLast(q, m))
               {
                  a.addRule(90, 0);
                  cat.fine("Clue aEditDistancePatientNamesLast (90) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aEditDistancePatientNamesLast (90) exception: " + ex);
         };
      if (eval[91])
         try {
            if (getCluemEditDistancePatientNamesLast(q, m))
               {
                  a.add(91, 0);
                  cat.fine("Clue mEditDistancePatientNamesLast (91) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mEditDistancePatientNamesLast (91) exception: " + ex);
         };
      if (eval[92])
         try {
            if (getClueaJaroPatientNamesLast(q, m))
               {
                  a.addRule(92, 0);
                  cat.fine("Clue aJaroPatientNamesLast (92) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aJaroPatientNamesLast (92) exception: " + ex);
         };
      if (eval[93])
         try {
            if (getCluemJaroPatientNamesLast(q, m))
               {
                  a.add(93, 0);
                  cat.fine("Clue mJaroPatientNamesLast (93) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mJaroPatientNamesLast (93) exception: " + ex);
         };
      if (eval[94])
         try {
            if (getCluerSoundexPatientNamesLast(q, m))
               {
                  a.addRule(94, 0);
                  cat.fine("Clue rSoundexPatientNamesLast (94) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rSoundexPatientNamesLast (94) exception: " + ex);
         };
      try {
         approximateLastNameMatch = ((((getClueaOverlapPatientNamesLast(q, m) || getClueaNysiisPatientNamesLast(q, m)) || getClueaDoubleMetaphonePatientNamesLast(q, m)) || getCluerSoundexPatientNamesLast(q, m)) || getClueaEditDistancePatientNamesLast(q, m)) || getClueaJaroPatientNamesLast(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression approximateLastNameMatch exception: " + ex);
      };
      if (eval[95])
         try {
            if (getClueaDiffPatientNamesLast(q, m))
               {
                  a.addRule(95, 0);
                  cat.fine("Clue aDiffPatientNamesLast (95) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffPatientNamesLast (95) exception: " + ex);
         };
      if (eval[96])
         try {
            if (getCluedPatientNamesLast(q, m))
               {
                  a.add(96, 0);
                  cat.fine("Clue dPatientNamesLast (96) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dPatientNamesLast (96) exception: " + ex);
         };
      mJaroSoundexFrequencyLast[0] = -1;
      __tmJaroSoundexFrequencyLast: for (int i0 = 0, clueNum = 0; i0 < __mJaroSoundexFrequencyLast__idx__frequency.length; i0 = i0 + 1, clueNum = clueNum + 1)
         if (eval[97 + clueNum])
            try {
               if (getCluemJaroSoundexFrequencyLast(q, m, __mJaroSoundexFrequencyLast__idx__frequency[i0]))
                  {
                     a.add(97 + clueNum, 0);
                     if (cat.isLoggable(java.util.logging.Level.FINE))
                        cat.fine(("Clue mJaroSoundexFrequencyLast" + (" (" + ((97 + clueNum) + ")"))) + " fired");
                     {
                        mJaroSoundexFrequencyLast[0] = i0;
                     };
                     break __tmJaroSoundexFrequencyLast;
                  };
            } catch (java.lang.Exception ex) {
               cat.severe((("Clue mJaroSoundexFrequencyLast" + (" (" + ((97 + clueNum) + ")"))) + " exception: ") + ex);
            };
      mFrequencyPatientNamesLast[0] = -1;
      __tmFrequencyPatientNamesLast: for (int i0 = 0, clueNum = 0; i0 < __mFrequencyPatientNamesLast__idx__frequency.length; i0 = i0 + 1, clueNum = clueNum + 1)
         if (eval[103 + clueNum])
            try {
               if (getCluemFrequencyPatientNamesLast(q, m, __mFrequencyPatientNamesLast__idx__frequency[i0]))
                  {
                     a.add(103 + clueNum, 0);
                     if (cat.isLoggable(java.util.logging.Level.FINE))
                        cat.fine(("Clue mFrequencyPatientNamesLast" + (" (" + ((103 + clueNum) + ")"))) + " fired");
                     {
                        mFrequencyPatientNamesLast[0] = i0;
                     };
                     break __tmFrequencyPatientNamesLast;
                  };
            } catch (java.lang.Exception ex) {
               cat.severe((("Clue mFrequencyPatientNamesLast" + (" (" + ((103 + clueNum) + ")"))) + " exception: ") + ex);
            };
      if (eval[114])
         try {
            if (getClueaMomsFirst(q, m))
               {
                  a.addRule(114, 0);
                  cat.fine("Clue aMomsFirst (114) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMomsFirst (114) exception: " + ex);
         };
      if (eval[115])
         try {
            if (getCluemMomsFirst(q, m))
               {
                  a.add(115, 0);
                  cat.fine("Clue mMomsFirst (115) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mMomsFirst (115) exception: " + ex);
         };
      if (eval[116])
         try {
            if (getClueaSwapPatientNamesFirstMiddleExact(q, m))
               {
                  a.addRule(116, 0);
                  cat.fine("Clue aSwapPatientNamesFirstMiddleExact (116) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapPatientNamesFirstMiddleExact (116) exception: " + ex);
         };
      if (eval[117])
         try {
            if (getCluemSwapPatientNamesFirstMiddleExact(q, m))
               {
                  a.add(117, 0);
                  cat.fine("Clue mSwapPatientNamesFirstMiddleExact (117) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapPatientNamesFirstMiddleExact (117) exception: " + ex);
         };
      if (eval[118])
         try {
            if (getClueaSwapPatientNamesFirstMiddleAny(q, m))
               {
                  a.addRule(118, 0);
                  cat.fine("Clue aSwapPatientNamesFirstMiddleAny (118) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapPatientNamesFirstMiddleAny (118) exception: " + ex);
         };
      if (eval[119])
         try {
            if (getCluemSwapPatientNamesFirstMiddleAny(q, m))
               {
                  a.add(119, 0);
                  cat.fine("Clue mSwapPatientNamesFirstMiddleAny (119) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapPatientNamesFirstMiddleAny (119) exception: " + ex);
         };
      if (eval[120])
         try {
            if (getClueaSwapPatientNamesFirstLastExact(q, m))
               {
                  a.addRule(120, 0);
                  cat.fine("Clue aSwapPatientNamesFirstLastExact (120) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapPatientNamesFirstLastExact (120) exception: " + ex);
         };
      if (eval[121])
         try {
            if (getCluemSwapPatientNamesFirstLastExact(q, m))
               {
                  a.add(121, 0);
                  cat.fine("Clue mSwapPatientNamesFirstLastExact (121) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapPatientNamesFirstLastExact (121) exception: " + ex);
         };
      if (eval[122])
         try {
            if (getClueaSwapPatientNamesFirstLastExactSoundex(q, m))
               {
                  a.addRule(122, 0);
                  cat.fine("Clue aSwapPatientNamesFirstLastExactSoundex (122) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapPatientNamesFirstLastExactSoundex (122) exception: " + ex);
         };
      if (eval[123])
         try {
            if (getCluemSwapPatientNamesFirstLastExactSoundex(q, m))
               {
                  a.add(123, 0);
                  cat.fine("Clue mSwapPatientNamesFirstLastExactSoundex (123) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapPatientNamesFirstLastExactSoundex (123) exception: " + ex);
         };
      if (eval[124])
         try {
            if (getClueaSwapPatientNamesFirstLastAny(q, m))
               {
                  a.addRule(124, 0);
                  cat.fine("Clue aSwapPatientNamesFirstLastAny (124) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapPatientNamesFirstLastAny (124) exception: " + ex);
         };
      if (eval[125])
         try {
            if (getCluemSwapPatientNamesFirstLastAny(q, m))
               {
                  a.add(125, 0);
                  cat.fine("Clue mSwapPatientNamesFirstLastAny (125) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapPatientNamesFirstLastAny (125) exception: " + ex);
         };
      if (eval[126])
         try {
            if (getClueaSwapPatientNamesFirstLastAnySoundex(q, m))
               {
                  a.addRule(126, 0);
                  cat.fine("Clue aSwapPatientNamesFirstLastAnySoundex (126) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapPatientNamesFirstLastAnySoundex (126) exception: " + ex);
         };
      if (eval[127])
         try {
            if (getCluemSwapPatientNamesFirstLastAnySoundex(q, m))
               {
                  a.add(127, 0);
                  cat.fine("Clue mSwapPatientNamesFirstLastAnySoundex (127) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapPatientNamesFirstLastAnySoundex (127) exception: " + ex);
         };
      if (eval[128])
         try {
            if (getClueaSwapPatientNamesLastMaidenAny(q, m))
               {
                  a.addRule(128, 0);
                  cat.fine("Clue aSwapPatientNamesLastMaidenAny (128) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapPatientNamesLastMaidenAny (128) exception: " + ex);
         };
      if (eval[129])
         try {
            if (getCluemSwapPatientNamesLastMaidenAny(q, m))
               {
                  a.add(129, 0);
                  cat.fine("Clue mSwapPatientNamesLastMaidenAny (129) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapPatientNamesLastMaidenAny (129) exception: " + ex);
         };
      if (eval[130])
         try {
            if (getClueaSwapPatientNamesMiddleLastExact(q, m))
               {
                  a.addRule(130, 0);
                  cat.fine("Clue aSwapPatientNamesMiddleLastExact (130) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapPatientNamesMiddleLastExact (130) exception: " + ex);
         };
      if (eval[131])
         try {
            if (getCluemSwapPatientNamesMiddleLastExact(q, m))
               {
                  a.add(131, 0);
                  cat.fine("Clue mSwapPatientNamesMiddleLastExact (131) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapPatientNamesMiddleLastExact (131) exception: " + ex);
         };
      if (eval[132])
         try {
            if (getClueaSwapPatientNamesMiddleLastAny(q, m))
               {
                  a.addRule(132, 0);
                  cat.fine("Clue aSwapPatientNamesMiddleLastAny (132) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapPatientNamesMiddleLastAny (132) exception: " + ex);
         };
      if (eval[133])
         try {
            if (getCluemSwapPatientNamesMiddleLastAny(q, m))
               {
                  a.add(133, 0);
                  cat.fine("Clue mSwapPatientNamesMiddleLastAny (133) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapPatientNamesMiddleLastAny (133) exception: " + ex);
         };
      if (eval[134])
         try {
            if (getClueaDiffSoundex1PatientNamesFirst(q, m))
               {
                  a.addRule(134, 0);
                  cat.fine("Clue aDiffSoundex1PatientNamesFirst (134) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSoundex1PatientNamesFirst (134) exception: " + ex);
         };
      if (eval[135])
         try {
            if (getCluedSoundex1PatientNamesFirst(q, m))
               {
                  a.add(135, 0);
                  cat.fine("Clue dSoundex1PatientNamesFirst (135) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSoundex1PatientNamesFirst (135) exception: " + ex);
         };
      if (eval[136])
         try {
            if (getClueaDiffSoundex1PatientNamesLast(q, m))
               {
                  a.addRule(136, 0);
                  cat.fine("Clue aDiffSoundex1PatientNamesLast (136) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSoundex1PatientNamesLast (136) exception: " + ex);
         };
      if (eval[137])
         try {
            if (getCluedSoundex1PatientNamesLast(q, m))
               {
                  a.add(137, 0);
                  cat.fine("Clue dSoundex1PatientNamesLast (137) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSoundex1PatientNamesLast (137) exception: " + ex);
         };
      dCommonFirstNames[0] = -1;
      __tdCommonFirstNames: for (int i0 = 0, clueNum = 0; i0 < __dCommonFirstNames__idx__limit.length; i0 = i0 + 1, clueNum = clueNum + 1)
         if (eval[138 + clueNum])
            try {
               if (getCluedCommonFirstNames(q, m, __dCommonFirstNames__idx__limit[i0]))
                  {
                     a.add(138 + clueNum, 0);
                     if (cat.isLoggable(java.util.logging.Level.FINE))
                        cat.fine(("Clue dCommonFirstNames" + (" (" + ((138 + clueNum) + ")"))) + " fired");
                     {
                        dCommonFirstNames[0] = i0;
                     };
                     break __tdCommonFirstNames;
                  };
            } catch (java.lang.Exception ex) {
               cat.severe((("Clue dCommonFirstNames" + (" (" + ((138 + clueNum) + ")"))) + " exception: ") + ex);
            };
      dCommonLastNames[0] = -1;
      __tdCommonLastNames: for (int i0 = 0, clueNum = 0; i0 < __dCommonLastNames__idx__limit.length; i0 = i0 + 1, clueNum = clueNum + 1)
         if (eval[141 + clueNum])
            try {
               if (getCluedCommonLastNames(q, m, __dCommonLastNames__idx__limit[i0]))
                  {
                     a.add(141 + clueNum, 0);
                     if (cat.isLoggable(java.util.logging.Level.FINE))
                        cat.fine(("Clue dCommonLastNames" + (" (" + ((141 + clueNum) + ")"))) + " fired");
                     {
                        dCommonLastNames[0] = i0;
                     };
                     break __tdCommonLastNames;
                  };
            } catch (java.lang.Exception ex) {
               cat.severe((("Clue dCommonLastNames" + (" (" + ((141 + clueNum) + ")"))) + " exception: ") + ex);
            };
      if (eval[144])
         try {
            if (getClueaLcsPatientNames(q, m))
               {
                  a.addRule(144, 0);
                  cat.fine("Clue aLcsPatientNames (144) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aLcsPatientNames (144) exception: " + ex);
         };
      if (eval[145])
         try {
            if (getCluemLcsPatientNames(q, m))
               {
                  a.add(145, 0);
                  cat.fine("Clue mLcsPatientNames (145) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mLcsPatientNames (145) exception: " + ex);
         };
      if (eval[146])
         try {
            if (getClueaJaroPatientNames(q, m))
               {
                  a.addRule(146, 0);
                  cat.fine("Clue aJaroPatientNames (146) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aJaroPatientNames (146) exception: " + ex);
         };
      if (eval[147])
         try {
            if (getCluemJaroPatientNames(q, m))
               {
                  a.add(147, 0);
                  cat.fine("Clue mJaroPatientNames (147) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mJaroPatientNames (147) exception: " + ex);
         };
      if (eval[148])
         try {
            if (getClueaBirthday(q, m))
               {
                  a.addRule(148, 0);
                  cat.fine("Clue aBirthday (148) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aBirthday (148) exception: " + ex);
         };
      if (eval[149])
         try {
            if (getCluemBirthday(q, m))
               {
                  a.add(149, 0);
                  cat.fine("Clue mBirthday (149) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mBirthday (149) exception: " + ex);
         };
      try {
         sameDayAndMonth = __exists100(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression sameDayAndMonth exception: " + ex);
      };
      try {
         sameMonthAndYear = __exists101(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression sameMonthAndYear exception: " + ex);
      };
      if (eval[150])
         try {
            if (getClueaBirthdayFirstOfMonthAndNamesHipFacility(q, m))
               {
                  a.addRule(150, 0);
                  cat.fine("Clue aBirthdayFirstOfMonthAndNamesHipFacility (150) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aBirthdayFirstOfMonthAndNamesHipFacility (150) exception: " + ex);
         };
      if (eval[151])
         try {
            if (getCluemBirthdayFirstOfMonthAndNamesHipFacility(q, m))
               {
                  a.add(151, 0);
                  cat.fine("Clue mBirthdayFirstOfMonthAndNamesHipFacility (151) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mBirthdayFirstOfMonthAndNamesHipFacility (151) exception: " + ex);
         };
      if (eval[152])
         try {
            if (getClueaDiffBirthdayMatchFirstOfMonthAndHIP(q, m))
               {
                  a.addRule(152, 0);
                  cat.fine("Clue aDiffBirthdayMatchFirstOfMonthAndHIP (152) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffBirthdayMatchFirstOfMonthAndHIP (152) exception: " + ex);
         };
      if (eval[153])
         try {
            if (getCluedBirthdayMatchFirstOfMonthAndHIP(q, m))
               {
                  a.add(153, 0);
                  cat.fine("Clue dBirthdayMatchFirstOfMonthAndHIP (153) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dBirthdayMatchFirstOfMonthAndHIP (153) exception: " + ex);
         };
      if (eval[154])
         try {
            if (getClueaDiffBirthdayDayMonthMatchAndHIP(q, m))
               {
                  a.addRule(154, 0);
                  cat.fine("Clue aDiffBirthdayDayMonthMatchAndHIP (154) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffBirthdayDayMonthMatchAndHIP (154) exception: " + ex);
         };
      if (eval[155])
         try {
            if (getCluedBirthdayDayMonthMatchAndHIP(q, m))
               {
                  a.add(155, 0);
                  cat.fine("Clue dBirthdayDayMonthMatchAndHIP (155) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dBirthdayDayMonthMatchAndHIP (155) exception: " + ex);
         };
      if (eval[156])
         try {
            if (getClueaBirthdayFirstOfMonthAndProvidersHipFacility(q, m))
               {
                  a.addRule(156, 0);
                  cat.fine("Clue aBirthdayFirstOfMonthAndProvidersHipFacility (156) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aBirthdayFirstOfMonthAndProvidersHipFacility (156) exception: " + ex);
         };
      if (eval[157])
         try {
            if (getCluemBirthdayFirstOfMonthAndProvidersHipFacility(q, m))
               {
                  a.add(157, 0);
                  cat.fine("Clue mBirthdayFirstOfMonthAndProvidersHipFacility (157) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mBirthdayFirstOfMonthAndProvidersHipFacility (157) exception: " + ex);
         };
      try {
         hipMatch = getClueaBirthdayFirstOfMonthAndNamesHipFacility(q, m) || getClueaBirthdayFirstOfMonthAndProvidersHipFacility(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression hipMatch exception: " + ex);
      };
      if (eval[158])
         try {
            if (getClueaBirthdayDayAndMonth(q, m))
               {
                  a.addRule(158, 0);
                  cat.fine("Clue aBirthdayDayAndMonth (158) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aBirthdayDayAndMonth (158) exception: " + ex);
         };
      if (eval[159])
         try {
            if (getCluemBirthdayDayAndMonth(q, m))
               {
                  a.add(159, 0);
                  cat.fine("Clue mBirthdayDayAndMonth (159) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mBirthdayDayAndMonth (159) exception: " + ex);
         };
      if (eval[160])
         try {
            if (getClueaBirthdayMonthAndYear(q, m))
               {
                  a.addRule(160, 0);
                  cat.fine("Clue aBirthdayMonthAndYear (160) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aBirthdayMonthAndYear (160) exception: " + ex);
         };
      if (eval[161])
         try {
            if (getCluemBirthdayMonthAndYear(q, m))
               {
                  a.add(161, 0);
                  cat.fine("Clue mBirthdayMonthAndYear (161) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mBirthdayMonthAndYear (161) exception: " + ex);
         };
      if (eval[162])
         try {
            if (getClueaBirthdayDayYearAndCloseMonth(q, m))
               {
                  a.addRule(162, 0);
                  cat.fine("Clue aBirthdayDayYearAndCloseMonth (162) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aBirthdayDayYearAndCloseMonth (162) exception: " + ex);
         };
      if (eval[163])
         try {
            if (getCluemBirthdayDayYearAndCloseMonth(q, m))
               {
                  a.add(163, 0);
                  cat.fine("Clue mBirthdayDayYearAndCloseMonth (163) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mBirthdayDayYearAndCloseMonth (163) exception: " + ex);
         };
      if (eval[164])
         try {
            if (getClueaBirthdayMissingDigit(q, m))
               {
                  a.addRule(164, 0);
                  cat.fine("Clue aBirthdayMissingDigit (164) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aBirthdayMissingDigit (164) exception: " + ex);
         };
      if (eval[165])
         try {
            if (getCluemBirthdayMissingDigit(q, m))
               {
                  a.add(165, 0);
                  cat.fine("Clue mBirthdayMissingDigit (165) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mBirthdayMissingDigit (165) exception: " + ex);
         };
      if (eval[166])
         try {
            if (getClueaBirthdaySwappedDayAndMonth(q, m))
               {
                  a.addRule(166, 0);
                  cat.fine("Clue aBirthdaySwappedDayAndMonth (166) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aBirthdaySwappedDayAndMonth (166) exception: " + ex);
         };
      if (eval[167])
         try {
            if (getCluemBirthdaySwappedDayAndMonth(q, m))
               {
                  a.add(167, 0);
                  cat.fine("Clue mBirthdaySwappedDayAndMonth (167) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mBirthdaySwappedDayAndMonth (167) exception: " + ex);
         };
      if (eval[168])
         try {
            if (getClueaEditDistanceBirthdayNumbers(q, m))
               {
                  a.addRule(168, 0);
                  cat.fine("Clue aEditDistanceBirthdayNumbers (168) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aEditDistanceBirthdayNumbers (168) exception: " + ex);
         };
      if (eval[169])
         try {
            if (getCluemEditDistanceBirthdayNumbers(q, m))
               {
                  a.add(169, 0);
                  cat.fine("Clue mEditDistanceBirthdayNumbers (169) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mEditDistanceBirthdayNumbers (169) exception: " + ex);
         };
      try {
         approximateMatchingDobs = ((((getClueaBirthdayDayAndMonth(q, m) || getClueaBirthdayMonthAndYear(q, m)) || getClueaBirthdayDayYearAndCloseMonth(q, m)) || getClueaBirthdayMissingDigit(q, m)) || getClueaBirthdaySwappedDayAndMonth(q, m)) || getClueaEditDistanceBirthdayNumbers(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression approximateMatchingDobs exception: " + ex);
      };
      try {
         birthdayMaybeTypo = (!getClueaBirthday(q, m)) && approximateMatchingDobs;
      } catch (java.lang.Exception ex) {
         cat.severe("Expression birthdayMaybeTypo exception: " + ex);
      };
      if (eval[170])
         try {
            if (getClueaDiffBirthdayMaybeTypo(q, m))
               {
                  a.addRule(170, 0);
                  cat.fine("Clue aDiffBirthdayMaybeTypo (170) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffBirthdayMaybeTypo (170) exception: " + ex);
         };
      if (eval[171])
         try {
            if (getCluedBirthdayMaybeTypo(q, m))
               {
                  a.add(171, 0);
                  cat.fine("Clue dBirthdayMaybeTypo (171) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dBirthdayMaybeTypo (171) exception: " + ex);
         };
      dBirthdaySeparation[0] = -1;
      __tdBirthdaySeparation: for (int i0 = 0, clueNum = 0; i0 < __dBirthdaySeparation__idx__bound.length; i0 = i0 + 1, clueNum = clueNum + 1)
         if (eval[172 + clueNum])
            try {
               if (getCluedBirthdaySeparation(q, m, __dBirthdaySeparation__idx__bound[i0]))
                  {
                     a.add(172 + clueNum, 0);
                     if (cat.isLoggable(java.util.logging.Level.FINE))
                        cat.fine(("Clue dBirthdaySeparation" + (" (" + ((172 + clueNum) + ")"))) + " fired");
                     {
                        dBirthdaySeparation[0] = i0;
                     };
                     break __tdBirthdaySeparation;
                  };
            } catch (java.lang.Exception ex) {
               cat.severe((("Clue dBirthdaySeparation" + (" (" + ((172 + clueNum) + ")"))) + " exception: ") + ex);
            };
      if (eval[176])
         try {
            if (getClueaDiffBirthdayAndFirstEvent(q, m))
               {
                  a.addRule(176, 0);
                  cat.fine("Clue aDiffBirthdayAndFirstEvent (176) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffBirthdayAndFirstEvent (176) exception: " + ex);
         };
      if (eval[177])
         try {
            if (getCluedBirthdayAndFirstEvent(q, m))
               {
                  a.add(177, 0);
                  cat.fine("Clue dBirthdayAndFirstEvent (177) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dBirthdayAndFirstEvent (177) exception: " + ex);
         };
      if (eval[178])
         try {
            if (getClueaDiffSexPossiblyTypo(q, m))
               {
                  a.addRule(178, 0);
                  cat.fine("Clue aDiffSexPossiblyTypo (178) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSexPossiblyTypo (178) exception: " + ex);
         };
      if (eval[179])
         try {
            if (getCluedSexPossiblyTypo(q, m))
               {
                  a.add(179, 0);
                  cat.fine("Clue dSexPossiblyTypo (179) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSexPossiblyTypo (179) exception: " + ex);
         };
      if (eval[180])
         try {
            if (getClueaDiffSex(q, m))
               {
                  a.addRule(180, 0);
                  cat.fine("Clue aDiffSex (180) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSex (180) exception: " + ex);
         };
      if (eval[181])
         try {
            if (getCluedSex(q, m))
               {
                  a.add(181, 0);
                  cat.fine("Clue dSex (181) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSex (181) exception: " + ex);
         };
      if (eval[182])
         try {
            if (getClueaWrongSex(q, m))
               {
                  a.addRule(182, 0);
                  cat.fine("Clue aWrongSex (182) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aWrongSex (182) exception: " + ex);
         };
      if (eval[183])
         try {
            if (getCluemWrongSex(q, m))
               {
                  a.add(183, 0);
                  cat.fine("Clue mWrongSex (183) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mWrongSex (183) exception: " + ex);
         };
      if (eval[184])
         try {
            if (getClueaDiffFirstNameSex(q, m))
               {
                  a.addRule(184, 0);
                  cat.fine("Clue aDiffFirstNameSex (184) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffFirstNameSex (184) exception: " + ex);
         };
      if (eval[185])
         try {
            if (getCluedFirstNameSex(q, m))
               {
                  a.add(185, 0);
                  cat.fine("Clue dFirstNameSex (185) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dFirstNameSex (185) exception: " + ex);
         };
      if (eval[186])
         try {
            if (getClueaImpliedSex(q, m))
               {
                  a.addRule(186, 0);
                  cat.fine("Clue aImpliedSex (186) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aImpliedSex (186) exception: " + ex);
         };
      if (eval[187])
         try {
            if (getCluemImpliedSex(q, m))
               {
                  a.add(187, 0);
                  cat.fine("Clue mImpliedSex (187) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mImpliedSex (187) exception: " + ex);
         };
      if (eval[188])
         try {
            if (getClueaDiffEthnicity(q, m))
               {
                  a.addRule(188, 0);
                  cat.fine("Clue aDiffEthnicity (188) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffEthnicity (188) exception: " + ex);
         };
      if (eval[189])
         try {
            if (getCluedEthnicity(q, m))
               {
                  a.add(189, 0);
                  cat.fine("Clue dEthnicity (189) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dEthnicity (189) exception: " + ex);
         };
      if (eval[190])
         try {
            if (getClueaFacilityId_names(q, m))
               {
                  a.addRule(190, 0);
                  cat.fine("Clue aFacilityId_names (190) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aFacilityId_names (190) exception: " + ex);
         };
      if (eval[191])
         try {
            if (getClueaFacilityId_not_names(q, m))
               {
                  a.addRule(191, 0);
                  cat.fine("Clue aFacilityId_not_names (191) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aFacilityId_not_names (191) exception: " + ex);
         };
      if (eval[192])
         try {
            if (getClueaFacilityId(q, m))
               {
                  a.addRule(192, 0);
                  cat.fine("Clue aFacilityId (192) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aFacilityId (192) exception: " + ex);
         };
      if (eval[193])
         try {
            if (getCluemFacilityId(q, m))
               {
                  a.add(193, 0);
                  cat.fine("Clue mFacilityId (193) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mFacilityId (193) exception: " + ex);
         };
      if (eval[194])
         try {
            if (getClueaFacilityRecordId(q, m))
               {
                  a.addRule(194, 0);
                  cat.fine("Clue aFacilityRecordId (194) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aFacilityRecordId (194) exception: " + ex);
         };
      if (eval[195])
         try {
            if (getCluemFacilityRecordId(q, m))
               {
                  a.add(195, 0);
                  cat.fine("Clue mFacilityRecordId (195) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mFacilityRecordId (195) exception: " + ex);
         };
      if (eval[196])
         try {
            if (getClueaVitalRecordId(q, m))
               {
                  a.addRule(196, 0);
                  cat.fine("Clue aVitalRecordId (196) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aVitalRecordId (196) exception: " + ex);
         };
      if (eval[197])
         try {
            if (getCluemVitalRecordId(q, m))
               {
                  a.add(197, 0);
                  cat.fine("Clue mVitalRecordId (197) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mVitalRecordId (197) exception: " + ex);
         };
      if (eval[198])
         try {
            if (getClueaDiffVitalRecordId(q, m))
               {
                  a.addRule(198, 0);
                  cat.fine("Clue aDiffVitalRecordId (198) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffVitalRecordId (198) exception: " + ex);
         };
      if (eval[199])
         try {
            if (getCluedVitalRecordId(q, m))
               {
                  a.add(199, 0);
                  cat.fine("Clue dVitalRecordId (199) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dVitalRecordId (199) exception: " + ex);
         };
      if (eval[200])
         try {
            if (getClueaMedicaidIds(q, m))
               {
                  a.addRule(200, 0);
                  cat.fine("Clue aMedicaidIds (200) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMedicaidIds (200) exception: " + ex);
         };
      if (eval[201])
         try {
            if (getCluemMedicaidIds(q, m))
               {
                  a.add(201, 0);
                  cat.fine("Clue mMedicaidIds (201) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mMedicaidIds (201) exception: " + ex);
         };
      if (eval[202])
         try {
            if (getClueaMedicaidIdsFirstName(q, m))
               {
                  a.addRule(202, 0);
                  cat.fine("Clue aMedicaidIdsFirstName (202) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMedicaidIdsFirstName (202) exception: " + ex);
         };
      if (eval[203])
         try {
            if (getCluemMedicaidIdsFirstName(q, m))
               {
                  a.add(203, 0);
                  cat.fine("Clue mMedicaidIdsFirstName (203) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mMedicaidIdsFirstName (203) exception: " + ex);
         };
      if (eval[204])
         try {
            if (getClueaDiffMedicaidIds(q, m))
               {
                  a.addRule(204, 0);
                  cat.fine("Clue aDiffMedicaidIds (204) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffMedicaidIds (204) exception: " + ex);
         };
      if (eval[205])
         try {
            if (getCluedMedicaidIds(q, m))
               {
                  a.add(205, 0);
                  cat.fine("Clue dMedicaidIds (205) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMedicaidIds (205) exception: " + ex);
         };
      if (eval[206])
         try {
            if (getClueaMedicalRecordIds(q, m))
               {
                  a.addRule(206, 0);
                  cat.fine("Clue aMedicalRecordIds (206) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMedicalRecordIds (206) exception: " + ex);
         };
      if (eval[207])
         try {
            if (getCluemMedicalRecordIds(q, m))
               {
                  a.add(207, 0);
                  cat.fine("Clue mMedicalRecordIds (207) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mMedicalRecordIds (207) exception: " + ex);
         };
      if (eval[208])
         try {
            if (getClueaDiffMedicalRecordIdsSameFacility(q, m))
               {
                  a.addRule(208, 0);
                  cat.fine("Clue aDiffMedicalRecordIdsSameFacility (208) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffMedicalRecordIdsSameFacility (208) exception: " + ex);
         };
      if (eval[209])
         try {
            if (getCluedMedicalRecordIdsSameFacility(q, m))
               {
                  a.add(209, 0);
                  cat.fine("Clue dMedicalRecordIdsSameFacility (209) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMedicalRecordIdsSameFacility (209) exception: " + ex);
         };
      if (eval[210])
         try {
            if (getClueaDiffMedicalRecordIds(q, m))
               {
                  a.addRule(210, 0);
                  cat.fine("Clue aDiffMedicalRecordIds (210) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffMedicalRecordIds (210) exception: " + ex);
         };
      if (eval[211])
         try {
            if (getCluedMedicalRecordIds(q, m))
               {
                  a.add(211, 0);
                  cat.fine("Clue dMedicalRecordIds (211) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMedicalRecordIds (211) exception: " + ex);
         };
      if (eval[212])
         try {
            if (getClueaMedicalRecordDigits(q, m))
               {
                  a.addRule(212, 0);
                  cat.fine("Clue aMedicalRecordDigits (212) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMedicalRecordDigits (212) exception: " + ex);
         };
      if (eval[213])
         try {
            if (getCluemMedicalRecordDigits(q, m))
               {
                  a.add(213, 0);
                  cat.fine("Clue mMedicalRecordDigits (213) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mMedicalRecordDigits (213) exception: " + ex);
         };
      if (eval[214])
         try {
            if (getCluerMedicalRecordDigitsOld(q, m))
               {
                  a.addRule(214, 0);
                  cat.fine("Clue rMedicalRecordDigitsOld (214) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rMedicalRecordDigitsOld (214) exception: " + ex);
         };
      if (eval[215])
         try {
            if (getClueaDiffVitalRecordOffBy1(q, m))
               {
                  a.addRule(215, 0);
                  cat.fine("Clue aDiffVitalRecordOffBy1 (215) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffVitalRecordOffBy1 (215) exception: " + ex);
         };
      if (eval[216])
         try {
            if (getCluedVitalRecordOffBy1(q, m))
               {
                  a.add(216, 0);
                  cat.fine("Clue dVitalRecordOffBy1 (216) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dVitalRecordOffBy1 (216) exception: " + ex);
         };
      if (eval[217])
         try {
            if (getClueaMedicalRecordOffBy1(q, m))
               {
                  a.addRule(217, 0);
                  cat.fine("Clue aMedicalRecordOffBy1 (217) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMedicalRecordOffBy1 (217) exception: " + ex);
         };
      if (eval[218])
         try {
            if (getCluedMedicalRecordOffBy1(q, m))
               {
                  a.add(218, 0);
                  cat.fine("Clue dMedicalRecordOffBy1 (218) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMedicalRecordOffBy1 (218) exception: " + ex);
         };
      if (eval[219])
         try {
            if (getClueaMedicalRecordOffBySmallDifference(q, m))
               {
                  a.addRule(219, 0);
                  cat.fine("Clue aMedicalRecordOffBySmallDifference (219) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMedicalRecordOffBySmallDifference (219) exception: " + ex);
         };
      if (eval[220])
         try {
            if (getClueaMedicalRecordSmallEditDistance(q, m))
               {
                  a.addRule(220, 0);
                  cat.fine("Clue aMedicalRecordSmallEditDistance (220) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMedicalRecordSmallEditDistance (220) exception: " + ex);
         };
      if (eval[221])
         try {
            if (getClueaIdentifierTypeAndFacilityId(q, m))
               {
                  a.addRule(221, 0);
                  cat.fine("Clue aIdentifierTypeAndFacilityId (221) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aIdentifierTypeAndFacilityId (221) exception: " + ex);
         };
      if (eval[222])
         try {
            if (getCluemIdentifierTypeAndFacilityId(q, m))
               {
                  a.add(222, 0);
                  cat.fine("Clue mIdentifierTypeAndFacilityId (222) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mIdentifierTypeAndFacilityId (222) exception: " + ex);
         };
      mEventsDateAndTypeCounts[0] = -1;
      __tmEventsDateAndTypeCounts: for (int i0 = 0, clueNum = 0; i0 < __mEventsDateAndTypeCounts__idx__number.length; i0 = i0 + 1, clueNum = clueNum + 1)
         if (eval[223 + clueNum])
            try {
               if (getCluemEventsDateAndTypeCounts(q, m, __mEventsDateAndTypeCounts__idx__number[i0]))
                  {
                     a.add(223 + clueNum, 0);
                     if (cat.isLoggable(java.util.logging.Level.FINE))
                        cat.fine(("Clue mEventsDateAndTypeCounts" + (" (" + ((223 + clueNum) + ")"))) + " fired");
                     {
                        mEventsDateAndTypeCounts[0] = i0;
                     };
                     break __tmEventsDateAndTypeCounts;
                  };
            } catch (java.lang.Exception ex) {
               cat.severe((("Clue mEventsDateAndTypeCounts" + (" (" + ((223 + clueNum) + ")"))) + " exception: ") + ex);
            };
      if (eval[226])
         try {
            if (getClueaDiffSomeEventOfOnePreceedsAllBirthdaysOfOther(q, m))
               {
                  a.addRule(226, 0);
                  cat.fine("Clue aDiffSomeEventOfOnePreceedsAllBirthdaysOfOther (226) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSomeEventOfOnePreceedsAllBirthdaysOfOther (226) exception: " + ex);
         };
      if (eval[227])
         try {
            if (getCluedEventPreceedsBirthAndDistinctBirths(q, m))
               {
                  a.add(227, 0);
                  cat.fine("Clue dEventPreceedsBirthAndDistinctBirths (227) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dEventPreceedsBirthAndDistinctBirths (227) exception: " + ex);
         };
      if (eval[228])
         try {
            if (getCluedEventPreceedsBirthAndApproxBirths(q, m))
               {
                  a.add(228, 0);
                  cat.fine("Clue dEventPreceedsBirthAndApproxBirths (228) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dEventPreceedsBirthAndApproxBirths (228) exception: " + ex);
         };
      if (eval[229])
         try {
            if (getCluedEventPreceedsBirthAndSameBirths(q, m))
               {
                  a.add(229, 0);
                  cat.fine("Clue dEventPreceedsBirthAndSameBirths (229) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dEventPreceedsBirthAndSameBirths (229) exception: " + ex);
         };
      if (eval[230])
         try {
            if (getClueaDiffEventsOfSameTypeWithin24Days(q, m))
               {
                  a.addRule(230, 0);
                  cat.fine("Clue aDiffEventsOfSameTypeWithin24Days (230) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffEventsOfSameTypeWithin24Days (230) exception: " + ex);
         };
      if (eval[231])
         try {
            if (getCluedEventsOfSameTypeWithin24Days(q, m))
               {
                  a.add(231, 0);
                  cat.fine("Clue dEventsOfSameTypeWithin24Days (231) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dEventsOfSameTypeWithin24Days (231) exception: " + ex);
         };
      if (eval[232])
         try {
            if (getClueaDiffLeadReports(q, m))
               {
                  a.addRule(232, 0);
                  cat.fine("Clue aDiffLeadReports (232) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffLeadReports (232) exception: " + ex);
         };
      if (eval[233])
         try {
            if (getCluedLeadReports(q, m))
               {
                  a.add(233, 0);
                  cat.fine("Clue dLeadReports (233) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dLeadReports (233) exception: " + ex);
         };
      if (eval[234])
         try {
            if (getClueaDiffSequentialEventIds(q, m))
               {
                  a.addRule(234, 0);
                  cat.fine("Clue aDiffSequentialEventIds (234) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSequentialEventIds (234) exception: " + ex);
         };
      if (eval[235])
         try {
            if (getCluedSequentialEventIds(q, m))
               {
                  a.add(235, 0);
                  cat.fine("Clue dSequentialEventIds (235) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSequentialEventIds (235) exception: " + ex);
         };
      if (eval[236])
         try {
            if (getClueaEventDateFacilityAndId(q, m))
               {
                  a.addRule(236, 0);
                  cat.fine("Clue aEventDateFacilityAndId (236) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aEventDateFacilityAndId (236) exception: " + ex);
         };
      if (eval[237])
         try {
            if (getCluemEventDateFacilityAndId(q, m))
               {
                  a.add(237, 0);
                  cat.fine("Clue mEventDateFacilityAndId (237) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mEventDateFacilityAndId (237) exception: " + ex);
         };
      if (eval[238])
         try {
            if (getClueaEventIds(q, m))
               {
                  a.addRule(238, 0);
                  cat.fine("Clue aEventIds (238) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aEventIds (238) exception: " + ex);
         };
      if (eval[239])
         try {
            if (getCluemEventIds(q, m))
               {
                  a.add(239, 0);
                  cat.fine("Clue mEventIds (239) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mEventIds (239) exception: " + ex);
         };
      if (eval[240])
         try {
            if (getClueaObsoleteEventDate(q, m))
               {
                  a.addRule(240, 0);
                  cat.fine("Clue aObsoleteEventDate (240) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aObsoleteEventDate (240) exception: " + ex);
         };
      if (eval[241])
         try {
            if (getCluemEventDate(q, m))
               {
                  a.add(241, 0);
                  cat.fine("Clue mEventDate (241) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mEventDate (241) exception: " + ex);
         };
      if (eval[242])
         try {
            if (getClueaLeadDateReportedAsDob(q, m))
               {
                  a.addRule(242, 0);
                  cat.fine("Clue aLeadDateReportedAsDob (242) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aLeadDateReportedAsDob (242) exception: " + ex);
         };
      if (eval[243])
         try {
            if (getCluemLeadDateReportedAsDob(q, m))
               {
                  a.add(243, 0);
                  cat.fine("Clue mLeadDateReportedAsDob (243) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mLeadDateReportedAsDob (243) exception: " + ex);
         };
      if (eval[244])
         try {
            if (getClueaNotSiblings(q, m))
               {
                  a.addRule(244, 0);
                  cat.fine("Clue aNotSiblings (244) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aNotSiblings (244) exception: " + ex);
         };
      if (eval[245])
         try {
            if (getClueaProviderId(q, m))
               {
                  a.addRule(245, 0);
                  cat.fine("Clue aProviderId (245) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aProviderId (245) exception: " + ex);
         };
      if (eval[246])
         try {
            if (getCluemProviderId(q, m))
               {
                  a.add(246, 0);
                  cat.fine("Clue mProviderId (246) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mProviderId (246) exception: " + ex);
         };
      if (eval[247])
         try {
            if (getCluemBin(q, m))
               {
                  a.add(247, 0);
                  cat.fine("Clue mBin (247) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mBin (247) exception: " + ex);
         };
      try {
         areValidStreetNames = (__exists191(q, m) || __exists192(q, m)) && (__exists193(q, m) || __exists194(q, m));
      } catch (java.lang.Exception ex) {
         cat.severe("Expression areValidStreetNames exception: " + ex);
      };
      if (eval[248])
         try {
            if (getCluemPoBox(q, m))
               {
                  a.add(248, 0);
                  cat.fine("Clue mPoBox (248) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mPoBox (248) exception: " + ex);
         };
      if (eval[249])
         try {
            if (getCluemStreetName(q, m))
               {
                  a.add(249, 0);
                  cat.fine("Clue mStreetName (249) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mStreetName (249) exception: " + ex);
         };
      if (eval[250])
         try {
            if (getCluemStreetNameDigits(q, m))
               {
                  a.add(250, 0);
                  cat.fine("Clue mStreetNameDigits (250) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mStreetNameDigits (250) exception: " + ex);
         };
      if (eval[251])
         try {
            if (getClueaStreetNameOverlap(q, m))
               {
                  a.addRule(251, 0);
                  cat.fine("Clue aStreetNameOverlap (251) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aStreetNameOverlap (251) exception: " + ex);
         };
      if (eval[252])
         try {
            if (getCluemStreetNameOverlap(q, m))
               {
                  a.add(252, 0);
                  cat.fine("Clue mStreetNameOverlap (252) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mStreetNameOverlap (252) exception: " + ex);
         };
      if (eval[253])
         try {
            if (getClueaStreetNameApprox(q, m))
               {
                  a.addRule(253, 0);
                  cat.fine("Clue aStreetNameApprox (253) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aStreetNameApprox (253) exception: " + ex);
         };
      if (eval[254])
         try {
            if (getCluemStreetNameApprox(q, m))
               {
                  a.add(254, 0);
                  cat.fine("Clue mStreetNameApprox (254) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mStreetNameApprox (254) exception: " + ex);
         };
      try {
         approxMatchingStreetNames = getClueaStreetNameOverlap(q, m) || getClueaStreetNameApprox(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression approxMatchingStreetNames exception: " + ex);
      };
      if (eval[255])
         try {
            if (getClueaHouseNumber(q, m))
               {
                  a.addRule(255, 0);
                  cat.fine("Clue aHouseNumber (255) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aHouseNumber (255) exception: " + ex);
         };
      if (eval[256])
         try {
            if (getCluemHouseNumber(q, m))
               {
                  a.add(256, 0);
                  cat.fine("Clue mHouseNumber (256) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mHouseNumber (256) exception: " + ex);
         };
      if (eval[257])
         try {
            if (getClueaHouseNumberOverlap(q, m))
               {
                  a.addRule(257, 0);
                  cat.fine("Clue aHouseNumberOverlap (257) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aHouseNumberOverlap (257) exception: " + ex);
         };
      if (eval[258])
         try {
            if (getCluemHouseNumberOverlap(q, m))
               {
                  a.add(258, 0);
                  cat.fine("Clue mHouseNumberOverlap (258) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mHouseNumberOverlap (258) exception: " + ex);
         };
      if (eval[259])
         try {
            if (getCluerHouseNumberEditDistance(q, m))
               {
                  a.addRule(259, 0);
                  cat.fine("Clue rHouseNumberEditDistance (259) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rHouseNumberEditDistance (259) exception: " + ex);
         };
      if (eval[260])
         try {
            if (getClueaApartment(q, m))
               {
                  a.addRule(260, 0);
                  cat.fine("Clue aApartment (260) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aApartment (260) exception: " + ex);
         };
      if (eval[261])
         try {
            if (getCluemApartment(q, m))
               {
                  a.add(261, 0);
                  cat.fine("Clue mApartment (261) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mApartment (261) exception: " + ex);
         };
      if (eval[262])
         try {
            if (getClueaHouseNumberApartmentSwap(q, m))
               {
                  a.addRule(262, 0);
                  cat.fine("Clue aHouseNumberApartmentSwap (262) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aHouseNumberApartmentSwap (262) exception: " + ex);
         };
      if (eval[263])
         try {
            if (getCluemHouseNumberApartmentSwap(q, m))
               {
                  a.add(263, 0);
                  cat.fine("Clue mHouseNumberApartmentSwap (263) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mHouseNumberApartmentSwap (263) exception: " + ex);
         };
      if (eval[264])
         try {
            if (getClueaZip(q, m))
               {
                  a.addRule(264, 0);
                  cat.fine("Clue aZip (264) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aZip (264) exception: " + ex);
         };
      if (eval[265])
         try {
            if (getCluemZip(q, m))
               {
                  a.add(265, 0);
                  cat.fine("Clue mZip (265) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mZip (265) exception: " + ex);
         };
      if (eval[266])
         try {
            if (getClueaZip3Digits(q, m))
               {
                  a.addRule(266, 0);
                  cat.fine("Clue aZip3Digits (266) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aZip3Digits (266) exception: " + ex);
         };
      if (eval[267])
         try {
            if (getCluemZip3Digits(q, m))
               {
                  a.add(267, 0);
                  cat.fine("Clue mZip3Digits (267) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mZip3Digits (267) exception: " + ex);
         };
      try {
         matchingBoro = __exists205(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression matchingBoro exception: " + ex);
      };
      try {
         matchingImpliedBoro = (!matchingBoro) && __exists206(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression matchingImpliedBoro exception: " + ex);
      };
      try {
         validBoroOrImpliedBoro = __exists208(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression validBoroOrImpliedBoro exception: " + ex);
      };
      if (eval[268])
         try {
            if (getClueaDiffBoroCd(q, m))
               {
                  a.addRule(268, 0);
                  cat.fine("Clue aDiffBoroCd (268) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffBoroCd (268) exception: " + ex);
         };
      if (eval[269])
         try {
            if (getCluedBoroCd(q, m))
               {
                  a.add(269, 0);
                  cat.fine("Clue dBoroCd (269) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dBoroCd (269) exception: " + ex);
         };
      if (eval[270])
         try {
            if (getClueaDiffZip(q, m))
               {
                  a.addRule(270, 0);
                  cat.fine("Clue aDiffZip (270) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffZip (270) exception: " + ex);
         };
      if (eval[271])
         try {
            if (getCluedZip(q, m))
               {
                  a.add(271, 0);
                  cat.fine("Clue dZip (271) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dZip (271) exception: " + ex);
         };
      if (eval[272])
         try {
            if (getClueaDiffStreetName(q, m))
               {
                  a.addRule(272, 0);
                  cat.fine("Clue aDiffStreetName (272) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffStreetName (272) exception: " + ex);
         };
      if (eval[273])
         try {
            if (getCluedStreetName(q, m))
               {
                  a.add(273, 0);
                  cat.fine("Clue dStreetName (273) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dStreetName (273) exception: " + ex);
         };
      if (eval[274])
         try {
            if (getClueaDiffHouseNumber(q, m))
               {
                  a.addRule(274, 0);
                  cat.fine("Clue aDiffHouseNumber (274) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffHouseNumber (274) exception: " + ex);
         };
      if (eval[275])
         try {
            if (getCluedHouseNumber(q, m))
               {
                  a.add(275, 0);
                  cat.fine("Clue dHouseNumber (275) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dHouseNumber (275) exception: " + ex);
         };
      if (eval[276])
         try {
            if (getClueaDiffDifferentAddressesWithin90Days(q, m))
               {
                  a.addRule(276, 0);
                  cat.fine("Clue aDiffDifferentAddressesWithin90Days (276) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffDifferentAddressesWithin90Days (276) exception: " + ex);
         };
      if (eval[277])
         try {
            if (getCluedDifferentAddressesWithin90Days(q, m))
               {
                  a.add(277, 0);
                  cat.fine("Clue dDifferentAddressesWithin90Days (277) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dDifferentAddressesWithin90Days (277) exception: " + ex);
         };
      if (eval[278])
         try {
            if (getClueaZeroCountValidAddrId(q, m))
               {
                  a.addRule(278, 0);
                  cat.fine("Clue aZeroCountValidAddrId (278) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aZeroCountValidAddrId (278) exception: " + ex);
         };
      if (eval[279])
         try {
            if (getClueaMissingRelFields(q, m))
               {
                  a.addRule(279, 0);
                  cat.fine("Clue aMissingRelFields (279) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMissingRelFields (279) exception: " + ex);
         };
      if (eval[280])
         try {
            if (getClueaMissingAddrRelContactMothers(q, m))
               {
                  a.addRule(280, 0);
                  cat.fine("Clue aMissingAddrRelContactMothers (280) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMissingAddrRelContactMothers (280) exception: " + ex);
         };
      if (eval[281])
         try {
            if (getClueaMissingAddrRelContact(q, m))
               {
                  a.addRule(281, 0);
                  cat.fine("Clue aMissingAddrRelContact (281) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMissingAddrRelContact (281) exception: " + ex);
         };
      if (eval[282])
         try {
            if (getClueaMissingAddressRel(q, m))
               {
                  a.addRule(282, 0);
                  cat.fine("Clue aMissingAddressRel (282) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMissingAddressRel (282) exception: " + ex);
         };
      if (eval[283])
         try {
            if (getClueaMissingIds(q, m))
               {
                  a.addRule(283, 0);
                  cat.fine("Clue aMissingIds (283) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMissingIds (283) exception: " + ex);
         };
      if (eval[284])
         try {
            if (getClueaMissingAddrRelContactMothersIds(q, m))
               {
                  a.addRule(284, 0);
                  cat.fine("Clue aMissingAddrRelContactMothersIds (284) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMissingAddrRelContactMothersIds (284) exception: " + ex);
         };
      if (eval[285])
         try {
            if (getCluedMissingAddrRelContactMothersIds(q, m))
               {
                  a.add(285, 0);
                  cat.fine("Clue dMissingAddrRelContactMothersIds (285) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMissingAddrRelContactMothersIds (285) exception: " + ex);
         };
      if (eval[286])
         try {
            if (getCluedMissingAddrRelContactMothers(q, m))
               {
                  a.add(286, 0);
                  cat.fine("Clue dMissingAddrRelContactMothers (286) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMissingAddrRelContactMothers (286) exception: " + ex);
         };
      if (eval[287])
         try {
            if (getCluedMissingAddrRelContact(q, m))
               {
                  a.add(287, 0);
                  cat.fine("Clue dMissingAddrRelContact (287) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMissingAddrRelContact (287) exception: " + ex);
         };
      if (eval[288])
         try {
            if (getCluedMissingAddressRel(q, m))
               {
                  a.add(288, 0);
                  cat.fine("Clue dMissingAddressRel (288) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMissingAddressRel (288) exception: " + ex);
         };
      if (eval[289])
         try {
            if (getCluedMissingIds(q, m))
               {
                  a.add(289, 0);
                  cat.fine("Clue dMissingIds (289) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMissingIds (289) exception: " + ex);
         };
      if (eval[290])
         try {
            if (getClueaDiffSparsePatientAndContactAddress(q, m))
               {
                  a.addRule(290, 0);
                  cat.fine("Clue aDiffSparsePatientAndContactAddress (290) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSparsePatientAndContactAddress (290) exception: " + ex);
         };
      if (eval[291])
         try {
            if (getCluedSparsePatientAndContactAddress(q, m))
               {
                  a.add(291, 0);
                  cat.fine("Clue dSparsePatientAndContactAddress (291) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSparsePatientAndContactAddress (291) exception: " + ex);
         };
      if (eval[292])
         try {
            if (getClueaDiffSparsePatientAddress(q, m))
               {
                  a.addRule(292, 0);
                  cat.fine("Clue aDiffSparsePatientAddress (292) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSparsePatientAddress (292) exception: " + ex);
         };
      if (eval[293])
         try {
            if (getCluedSparsePatientAddress(q, m))
               {
                  a.add(293, 0);
                  cat.fine("Clue dSparsePatientAddress (293) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSparsePatientAddress (293) exception: " + ex);
         };
      try {
         areValidPhoneNumbers = (__exists228(q, m) || __exists229(q, m)) && (__exists230(q, m) || __exists231(q, m));
      } catch (java.lang.Exception ex) {
         cat.severe("Expression areValidPhoneNumbers exception: " + ex);
      };
      if (eval[294])
         try {
            if (getClueaPhone(q, m))
               {
                  a.addRule(294, 0);
                  cat.fine("Clue aPhone (294) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aPhone (294) exception: " + ex);
         };
      if (eval[295])
         try {
            if (getCluemPhone(q, m))
               {
                  a.add(295, 0);
                  cat.fine("Clue mPhone (295) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mPhone (295) exception: " + ex);
         };
      if (eval[296])
         try {
            if (getClueaLocalPhone(q, m))
               {
                  a.addRule(296, 0);
                  cat.fine("Clue aLocalPhone (296) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aLocalPhone (296) exception: " + ex);
         };
      if (eval[297])
         try {
            if (getCluemLocalPhone(q, m))
               {
                  a.add(297, 0);
                  cat.fine("Clue mLocalPhone (297) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mLocalPhone (297) exception: " + ex);
         };
      try {
         PHONE_EDIT_DISTANCE_LIMIT = 3;
      } catch (java.lang.Exception ex) {
         cat.severe("Expression PHONE_EDIT_DISTANCE_LIMIT exception: " + ex);
      };
      try {
         editDistanceContactsPhone = ((__exists234(q, m) || __exists235(q, m)) || __exists236(q, m)) || __exists237(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression editDistanceContactsPhone exception: " + ex);
      };
      try {
         editDistanceRelPhone = ((__exists238(q, m) || __exists239(q, m)) || __exists240(q, m)) || __exists241(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression editDistanceRelPhone exception: " + ex);
      };
      try {
         editDistanceSwapRelContacts = ((__exists242(q, m) || __exists243(q, m)) || __exists244(q, m)) || __exists245(q, m);
      } catch (java.lang.Exception ex) {
         cat.severe("Expression editDistanceSwapRelContacts exception: " + ex);
      };
      if (eval[298])
         try {
            if (getCluerStreetPhone(q, m))
               {
                  a.addRule(298, 0);
                  cat.fine("Clue rStreetPhone (298) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rStreetPhone (298) exception: " + ex);
         };
      if (eval[299])
         try {
            if (getClueaEditDistancePhone(q, m))
               {
                  a.addRule(299, 0);
                  cat.fine("Clue aEditDistancePhone (299) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aEditDistancePhone (299) exception: " + ex);
         };
      if (eval[300])
         try {
            if (getCluemEditDistancePhone(q, m))
               {
                  a.add(300, 0);
                  cat.fine("Clue mEditDistancePhone (300) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mEditDistancePhone (300) exception: " + ex);
         };
      if (eval[301])
         try {
            if (getClueaDiffPhone(q, m))
               {
                  a.addRule(301, 0);
                  cat.fine("Clue aDiffPhone (301) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffPhone (301) exception: " + ex);
         };
      if (eval[302])
         try {
            if (getCluedPhone(q, m))
               {
                  a.add(302, 0);
                  cat.fine("Clue dPhone (302) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dPhone (302) exception: " + ex);
         };
      if (eval[303])
         try {
            if (getClueaContactsNamesFirstAndLast(q, m))
               {
                  a.addRule(303, 0);
                  cat.fine("Clue aContactsNamesFirstAndLast (303) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesFirstAndLast (303) exception: " + ex);
         };
      if (eval[304])
         try {
            if (getCluemContactsNamesFirstAndLast(q, m))
               {
                  a.add(304, 0);
                  cat.fine("Clue mContactsNamesFirstAndLast (304) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mContactsNamesFirstAndLast (304) exception: " + ex);
         };
      if (eval[305])
         try {
            if (getClueaApproxContactsNamesFirstAndLast(q, m))
               {
                  a.addRule(305, 0);
                  cat.fine("Clue aApproxContactsNamesFirstAndLast (305) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aApproxContactsNamesFirstAndLast (305) exception: " + ex);
         };
      if (eval[306])
         try {
            if (getCluemApproxContactsNamesFirstAndLast(q, m))
               {
                  a.add(306, 0);
                  cat.fine("Clue mApproxContactsNamesFirstAndLast (306) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mApproxContactsNamesFirstAndLast (306) exception: " + ex);
         };
      if (eval[307])
         try {
            if (getClueaContactsNamesFirst(q, m))
               {
                  a.addRule(307, 0);
                  cat.fine("Clue aContactsNamesFirst (307) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesFirst (307) exception: " + ex);
         };
      if (eval[308])
         try {
            if (getCluemContactsNamesFirst(q, m))
               {
                  a.add(308, 0);
                  cat.fine("Clue mContactsNamesFirst (308) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mContactsNamesFirst (308) exception: " + ex);
         };
      if (eval[309])
         try {
            if (getClueaContactsNamesFirstCloseLast(q, m))
               {
                  a.addRule(309, 0);
                  cat.fine("Clue aContactsNamesFirstCloseLast (309) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesFirstCloseLast (309) exception: " + ex);
         };
      if (eval[310])
         try {
            if (getCluemContactsNamesFirstCloseLast(q, m))
               {
                  a.add(310, 0);
                  cat.fine("Clue mContactsNamesFirstCloseLast (310) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mContactsNamesFirstCloseLast (310) exception: " + ex);
         };
      if (eval[311])
         try {
            if (getClueaApproxContactsNamesFirst(q, m))
               {
                  a.addRule(311, 0);
                  cat.fine("Clue aApproxContactsNamesFirst (311) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aApproxContactsNamesFirst (311) exception: " + ex);
         };
      if (eval[312])
         try {
            if (getCluemApproxContactsNamesFirst(q, m))
               {
                  a.add(312, 0);
                  cat.fine("Clue mApproxContactsNamesFirst (312) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mApproxContactsNamesFirst (312) exception: " + ex);
         };
      if (eval[313])
         try {
            if (getClueaContactsNamesLast(q, m))
               {
                  a.addRule(313, 0);
                  cat.fine("Clue aContactsNamesLast (313) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesLast (313) exception: " + ex);
         };
      if (eval[314])
         try {
            if (getCluemContactsNamesLast(q, m))
               {
                  a.add(314, 0);
                  cat.fine("Clue mContactsNamesLast (314) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mContactsNamesLast (314) exception: " + ex);
         };
      if (eval[315])
         try {
            if (getClueaSoundexContactsNamesLast(q, m))
               {
                  a.addRule(315, 0);
                  cat.fine("Clue aSoundexContactsNamesLast (315) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSoundexContactsNamesLast (315) exception: " + ex);
         };
      if (eval[316])
         try {
            if (getCluemSoundexContactsNamesLast(q, m))
               {
                  a.add(316, 0);
                  cat.fine("Clue mSoundexContactsNamesLast (316) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSoundexContactsNamesLast (316) exception: " + ex);
         };
      if (eval[317])
         try {
            if (getClueaContactsNamesMaiden(q, m))
               {
                  a.addRule(317, 0);
                  cat.fine("Clue aContactsNamesMaiden (317) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesMaiden (317) exception: " + ex);
         };
      if (eval[318])
         try {
            if (getCluemContactsNamesMaiden(q, m))
               {
                  a.add(318, 0);
                  cat.fine("Clue mContactsNamesMaiden (318) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mContactsNamesMaiden (318) exception: " + ex);
         };
      if (eval[319])
         try {
            if (getClueaMothersMaiden(q, m))
               {
                  a.addRule(319, 0);
                  cat.fine("Clue aMothersMaiden (319) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMothersMaiden (319) exception: " + ex);
         };
      if (eval[320])
         try {
            if (getCluemMothersMaiden(q, m))
               {
                  a.add(320, 0);
                  cat.fine("Clue mMothersMaiden (320) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mMothersMaiden (320) exception: " + ex);
         };
      if (eval[321])
         try {
            if (getClueaSoundexMothersMaiden(q, m))
               {
                  a.addRule(321, 0);
                  cat.fine("Clue aSoundexMothersMaiden (321) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSoundexMothersMaiden (321) exception: " + ex);
         };
      if (eval[322])
         try {
            if (getClueaSoundexMothersMaiden2(q, m))
               {
                  a.addRule(322, 0);
                  cat.fine("Clue aSoundexMothersMaiden2 (322) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSoundexMothersMaiden2 (322) exception: " + ex);
         };
      if (eval[323])
         try {
            if (getCluedSoundexMothersMaiden2(q, m))
               {
                  a.add(323, 0);
                  cat.fine("Clue dSoundexMothersMaiden2 (323) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSoundexMothersMaiden2 (323) exception: " + ex);
         };
      if (eval[324])
         try {
            if (getClueaMothersDob(q, m))
               {
                  a.addRule(324, 0);
                  cat.fine("Clue aMothersDob (324) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMothersDob (324) exception: " + ex);
         };
      if (eval[325])
         try {
            if (getCluemMothersDob(q, m))
               {
                  a.add(325, 0);
                  cat.fine("Clue mMothersDob (325) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mMothersDob (325) exception: " + ex);
         };
      if (eval[326])
         try {
            if (getClueaMothersDobApprox(q, m))
               {
                  a.addRule(326, 0);
                  cat.fine("Clue aMothersDobApprox (326) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMothersDobApprox (326) exception: " + ex);
         };
      if (eval[327])
         try {
            if (getCluemMothersDobApprox(q, m))
               {
                  a.add(327, 0);
                  cat.fine("Clue mMothersDobApprox (327) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mMothersDobApprox (327) exception: " + ex);
         };
      if (eval[328])
         try {
            if (getClueaDiffMothersDob(q, m))
               {
                  a.addRule(328, 0);
                  cat.fine("Clue aDiffMothersDob (328) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffMothersDob (328) exception: " + ex);
         };
      if (eval[329])
         try {
            if (getCluedMothersDob(q, m))
               {
                  a.add(329, 0);
                  cat.fine("Clue dMothersDob (329) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMothersDob (329) exception: " + ex);
         };
      if (eval[330])
         try {
            if (getClueaDiffDobIsMothersDob(q, m))
               {
                  a.addRule(330, 0);
                  cat.fine("Clue aDiffDobIsMothersDob (330) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffDobIsMothersDob (330) exception: " + ex);
         };
      if (eval[331])
         try {
            if (getCluedDobIsMothersDob(q, m))
               {
                  a.add(331, 0);
                  cat.fine("Clue dDobIsMothersDob (331) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dDobIsMothersDob (331) exception: " + ex);
         };
      if (eval[332])
         try {
            if (getClueaContactsNamesLastPatientNamesFirst(q, m))
               {
                  a.addRule(332, 0);
                  cat.fine("Clue aContactsNamesLastPatientNamesFirst (332) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesLastPatientNamesFirst (332) exception: " + ex);
         };
      if (eval[333])
         try {
            if (getCluemContactsNamesLastPatientNamesFirst(q, m))
               {
                  a.add(333, 0);
                  cat.fine("Clue mContactsNamesLastPatientNamesFirst (333) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mContactsNamesLastPatientNamesFirst (333) exception: " + ex);
         };
      if (eval[334])
         try {
            if (getClueaContactsNamesLastPatientNamesLast(q, m))
               {
                  a.addRule(334, 0);
                  cat.fine("Clue aContactsNamesLastPatientNamesLast (334) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesLastPatientNamesLast (334) exception: " + ex);
         };
      if (eval[335])
         try {
            if (getCluemContactsNamesLastPatientNamesLast(q, m))
               {
                  a.add(335, 0);
                  cat.fine("Clue mContactsNamesLastPatientNamesLast (335) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mContactsNamesLastPatientNamesLast (335) exception: " + ex);
         };
      if (eval[336])
         try {
            if (getClueaContactsNamesMaidenPatientNamesLast(q, m))
               {
                  a.addRule(336, 0);
                  cat.fine("Clue aContactsNamesMaidenPatientNamesLast (336) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesMaidenPatientNamesLast (336) exception: " + ex);
         };
      if (eval[337])
         try {
            if (getCluemContactsNamesMaidenPatientNamesLast(q, m))
               {
                  a.add(337, 0);
                  cat.fine("Clue mContactsNamesMaidenPatientNamesLast (337) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mContactsNamesMaidenPatientNamesLast (337) exception: " + ex);
         };
      if (eval[338])
         try {
            if (getClueaSoundexContactsNamesMaidenPatientNamesLast(q, m))
               {
                  a.addRule(338, 0);
                  cat.fine("Clue aSoundexContactsNamesMaidenPatientNamesLast (338) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSoundexContactsNamesMaidenPatientNamesLast (338) exception: " + ex);
         };
      if (eval[339])
         try {
            if (getCluemSoundexContactsNamesMaidenPatientNamesLast(q, m))
               {
                  a.add(339, 0);
                  cat.fine("Clue mSoundexContactsNamesMaidenPatientNamesLast (339) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSoundexContactsNamesMaidenPatientNamesLast (339) exception: " + ex);
         };
      if (eval[340])
         try {
            if (getClueaSwapContactsNamesFirstLastExact(q, m))
               {
                  a.addRule(340, 0);
                  cat.fine("Clue aSwapContactsNamesFirstLastExact (340) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapContactsNamesFirstLastExact (340) exception: " + ex);
         };
      if (eval[341])
         try {
            if (getCluemSwapContactsNamesFirstLastExact(q, m))
               {
                  a.add(341, 0);
                  cat.fine("Clue mSwapContactsNamesFirstLastExact (341) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapContactsNamesFirstLastExact (341) exception: " + ex);
         };
      if (eval[342])
         try {
            if (getClueaSwapContactsNamesFirstLastAny(q, m))
               {
                  a.addRule(342, 0);
                  cat.fine("Clue aSwapContactsNamesFirstLastAny (342) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapContactsNamesFirstLastAny (342) exception: " + ex);
         };
      if (eval[343])
         try {
            if (getCluemSwapContactsNamesFirstLastAny(q, m))
               {
                  a.add(343, 0);
                  cat.fine("Clue mSwapContactsNamesFirstLastAny (343) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapContactsNamesFirstLastAny (343) exception: " + ex);
         };
      if (eval[344])
         try {
            if (getClueaSwapContactsNamesFirstLastExactSoundex(q, m))
               {
                  a.addRule(344, 0);
                  cat.fine("Clue aSwapContactsNamesFirstLastExactSoundex (344) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aSwapContactsNamesFirstLastExactSoundex (344) exception: " + ex);
         };
      if (eval[345])
         try {
            if (getCluemSwapContactsNamesFirstLastExactSoundex(q, m))
               {
                  a.add(345, 0);
                  cat.fine("Clue mSwapContactsNamesFirstLastExactSoundex (345) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mSwapContactsNamesFirstLastExactSoundex (345) exception: " + ex);
         };
      if (eval[346])
         try {
            if (getClueaContactsNamesLastPatientNamesMaiden(q, m))
               {
                  a.addRule(346, 0);
                  cat.fine("Clue aContactsNamesLastPatientNamesMaiden (346) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesLastPatientNamesMaiden (346) exception: " + ex);
         };
      if (eval[347])
         try {
            if (getCluemContactsNamesLastPatientNamesMaiden(q, m))
               {
                  a.add(347, 0);
                  cat.fine("Clue mContactsNamesLastPatientNamesMaiden (347) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mContactsNamesLastPatientNamesMaiden (347) exception: " + ex);
         };
      if (eval[348])
         try {
            if (getClueaContactsNamesMaidenPatientNamesMaiden(q, m))
               {
                  a.addRule(348, 0);
                  cat.fine("Clue aContactsNamesMaidenPatientNamesMaiden (348) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesMaidenPatientNamesMaiden (348) exception: " + ex);
         };
      if (eval[349])
         try {
            if (getCluemContactsNamesMaidenPatientNamesMaiden(q, m))
               {
                  a.add(349, 0);
                  cat.fine("Clue mContactsNamesMaidenPatientNamesMaiden (349) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mContactsNamesMaidenPatientNamesMaiden (349) exception: " + ex);
         };
      if (eval[350])
         try {
            if (getClueaContactsNamesLastMothersMaiden(q, m))
               {
                  a.addRule(350, 0);
                  cat.fine("Clue aContactsNamesLastMothersMaiden (350) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactsNamesLastMothersMaiden (350) exception: " + ex);
         };
      if (eval[351])
         try {
            if (getCluemContactsNamesLastMothersMaiden(q, m))
               {
                  a.add(351, 0);
                  cat.fine("Clue mContactsNamesLastMothersMaiden (351) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mContactsNamesLastMothersMaiden (351) exception: " + ex);
         };
      if (eval[352])
         try {
            if (getClueaDiffContactsNamesLast(q, m))
               {
                  a.addRule(352, 0);
                  cat.fine("Clue aDiffContactsNamesLast (352) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffContactsNamesLast (352) exception: " + ex);
         };
      if (eval[353])
         try {
            if (getCluedContactsNamesLast(q, m))
               {
                  a.add(353, 0);
                  cat.fine("Clue dContactsNamesLast (353) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dContactsNamesLast (353) exception: " + ex);
         };
      if (eval[354])
         try {
            if (getClueaDiffSoundexContactsNamesFirstAndLast(q, m))
               {
                  a.addRule(354, 0);
                  cat.fine("Clue aDiffSoundexContactsNamesFirstAndLast (354) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSoundexContactsNamesFirstAndLast (354) exception: " + ex);
         };
      if (eval[355])
         try {
            if (getCluedSoundexContactsNamesFirstAndLast(q, m))
               {
                  a.add(355, 0);
                  cat.fine("Clue dSoundexContactsNamesFirstAndLast (355) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSoundexContactsNamesFirstAndLast (355) exception: " + ex);
         };
      if (eval[356])
         try {
            if (getClueaDiffSoundexContactsNamesLast(q, m))
               {
                  a.addRule(356, 0);
                  cat.fine("Clue aDiffSoundexContactsNamesLast (356) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSoundexContactsNamesLast (356) exception: " + ex);
         };
      if (eval[357])
         try {
            if (getCluedSoundexContactsNamesLast(q, m))
               {
                  a.add(357, 0);
                  cat.fine("Clue dSoundexContactsNamesLast (357) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSoundexContactsNamesLast (357) exception: " + ex);
         };
      if (eval[358])
         try {
            if (getClueaDiffMothersMaiden(q, m))
               {
                  a.addRule(358, 0);
                  cat.fine("Clue aDiffMothersMaiden (358) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffMothersMaiden (358) exception: " + ex);
         };
      if (eval[359])
         try {
            if (getCluedMothersMaiden(q, m))
               {
                  a.add(359, 0);
                  cat.fine("Clue dMothersMaiden (359) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMothersMaiden (359) exception: " + ex);
         };
      if (eval[360])
         try {
            if (getClueaDiffSoundexMothersMaiden(q, m))
               {
                  a.addRule(360, 0);
                  cat.fine("Clue aDiffSoundexMothersMaiden (360) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSoundexMothersMaiden (360) exception: " + ex);
         };
      if (eval[361])
         try {
            if (getCluedSoundexMothersMaiden(q, m))
               {
                  a.add(361, 0);
                  cat.fine("Clue dSoundexMothersMaiden (361) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSoundexMothersMaiden (361) exception: " + ex);
         };
      try {
         addressPieceMatch = getClueaBin(q, m) || (getClueaZip(q, m) && (((getClueaHouseNumber(q, m) || getClueaStreetName(q, m)) || getClueaPhone(q, m)) || getClueaLocalPhone(q, m)));
      } catch (java.lang.Exception ex) {
         cat.severe("Expression addressPieceMatch exception: " + ex);
      };
      if (eval[362])
         try {
            if (getClueaDiffSiblings(q, m))
               {
                  a.addRule(362, 0);
                  cat.fine("Clue aDiffSiblings (362) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffSiblings (362) exception: " + ex);
         };
      if (eval[363])
         try {
            if (getCluedSiblings(q, m))
               {
                  a.add(363, 0);
                  cat.fine("Clue dSiblings (363) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dSiblings (363) exception: " + ex);
         };
      if (eval[364])
         try {
            if (getClueaDiffTwinsDEPRECATED(q, m))
               {
                  a.addRule(364, 0);
                  cat.fine("Clue aDiffTwinsDEPRECATED (364) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffTwinsDEPRECATED (364) exception: " + ex);
         };
      if (eval[365])
         try {
            if (getClueaDiffTwins(q, m))
               {
                  a.addRule(365, 0);
                  cat.fine("Clue aDiffTwins (365) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffTwins (365) exception: " + ex);
         };
      if (eval[366])
         try {
            if (getCluedTwins(q, m))
               {
                  a.add(366, 0);
                  cat.fine("Clue dTwins (366) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dTwins (366) exception: " + ex);
         };
      if (eval[367])
         try {
            if (getClueaDiffTwinsScantyDEPRECATED(q, m))
               {
                  a.addRule(367, 0);
                  cat.fine("Clue aDiffTwinsScantyDEPRECATED (367) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffTwinsScantyDEPRECATED (367) exception: " + ex);
         };
      if (eval[368])
         try {
            if (getClueaDiffTwinsScanty(q, m))
               {
                  a.addRule(368, 0);
                  cat.fine("Clue aDiffTwinsScanty (368) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffTwinsScanty (368) exception: " + ex);
         };
      if (eval[369])
         try {
            if (getCluedTwinsScanty(q, m))
               {
                  a.add(369, 0);
                  cat.fine("Clue dTwinsScanty (369) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dTwinsScanty (369) exception: " + ex);
         };
      if (eval[370])
         try {
            if (getClueaMbiAndDifferentFirstOrMiddleName(q, m))
               {
                  a.addRule(370, 0);
                  cat.fine("Clue aMbiAndDifferentFirstOrMiddleName (370) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMbiAndDifferentFirstOrMiddleName (370) exception: " + ex);
         };
      if (eval[371])
         try {
            if (getCluedMbiAndDifferentFirstOrMiddleName(q, m))
               {
                  a.add(371, 0);
                  cat.fine("Clue dMbiAndDifferentFirstOrMiddleName (371) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMbiAndDifferentFirstOrMiddleName (371) exception: " + ex);
         };
      if (eval[372])
         try {
            if (getClueaMbiAndApproximateFirstName(q, m))
               {
                  a.addRule(372, 0);
                  cat.fine("Clue aMbiAndApproximateFirstName (372) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMbiAndApproximateFirstName (372) exception: " + ex);
         };
      if (eval[373])
         try {
            if (getCluemMbiAndApproximateFirstName(q, m))
               {
                  a.add(373, 0);
                  cat.fine("Clue mMbiAndApproximateFirstName (373) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mMbiAndApproximateFirstName (373) exception: " + ex);
         };
      if (eval[374])
         try {
            if (getClueaVitalAndNoMBI(q, m))
               {
                  a.addRule(374, 0);
                  cat.fine("Clue aVitalAndNoMBI (374) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aVitalAndNoMBI (374) exception: " + ex);
         };
      if (eval[375])
         try {
            if (getCluemVitalAndNoMBI(q, m))
               {
                  a.add(375, 0);
                  cat.fine("Clue mVitalAndNoMBI (375) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mVitalAndNoMBI (375) exception: " + ex);
         };
      if (eval[376])
         try {
            if (getClueaInconsistentFirstNamesQNotVR(q, m))
               {
                  a.addRule(376, 0);
                  cat.fine("Clue aInconsistentFirstNamesQNotVR (376) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aInconsistentFirstNamesQNotVR (376) exception: " + ex);
         };
      if (eval[377])
         try {
            if (getClueaInconsistentFirstNamesMNotVR(q, m))
               {
                  a.addRule(377, 0);
                  cat.fine("Clue aInconsistentFirstNamesMNotVR (377) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aInconsistentFirstNamesMNotVR (377) exception: " + ex);
         };
      if (eval[378])
         try {
            if (getClueaInconsistentFirstNames(q, m))
               {
                  a.addRule(378, 0);
                  cat.fine("Clue aInconsistentFirstNames (378) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aInconsistentFirstNames (378) exception: " + ex);
         };
      if (eval[379])
         try {
            if (getCluedInconsistentFirstNamesMB(q, m))
               {
                  a.add(379, 1);
                  cat.fine("Clue dInconsistentFirstNamesMB (379) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dInconsistentFirstNamesMB (379) exception: " + ex);
         };
      if (eval[380])
         try {
            if (getCluedInconsistentFirstNamesNotMB(q, m))
               {
                  a.add(380, 1);
                  cat.fine("Clue dInconsistentFirstNamesNotMB (380) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dInconsistentFirstNamesNotMB (380) exception: " + ex);
         };
      if (eval[381])
         try {
            if (getClueaDistinctFirstNames(q, m))
               {
                  a.addRule(381, 0);
                  cat.fine("Clue aDistinctFirstNames (381) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDistinctFirstNames (381) exception: " + ex);
         };
      if (eval[382])
         try {
            if (getClueaDistinctFirstNamesSameLastNameSameDOB(q, m))
               {
                  a.addRule(382, 0);
                  cat.fine("Clue aDistinctFirstNamesSameLastNameSameDOB (382) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDistinctFirstNamesSameLastNameSameDOB (382) exception: " + ex);
         };
      if (eval[383])
         try {
            if (getClueaUncorrelatedMRN(q, m))
               {
                  a.addRule(383, 0);
                  cat.fine("Clue aUncorrelatedMRN (383) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aUncorrelatedMRN (383) exception: " + ex);
         };
      if (eval[384])
         try {
            if (getCluenmMBTwinCorrelationWithMrn(q, m))
               {
                  a.addRule(384, 0);
                  cat.fine("Clue nmMBTwinCorrelationWithMrn (384) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue nmMBTwinCorrelationWithMrn (384) exception: " + ex);
         };
      if (eval[385])
         try {
            if (getCluedMBTwinCorrelationWithMrn(q, m))
               {
                  a.add(385, 0);
                  cat.fine("Clue dMBTwinCorrelationWithMrn (385) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMBTwinCorrelationWithMrn (385) exception: " + ex);
         };
      if (eval[386])
         try {
            if (getCluenmMBTwinCorrelationWithoutMrn(q, m))
               {
                  a.addRule(386, 0);
                  cat.fine("Clue nmMBTwinCorrelationWithoutMrn (386) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue nmMBTwinCorrelationWithoutMrn (386) exception: " + ex);
         };
      if (eval[387])
         try {
            if (getCluedMBTwinCorrelationWithoutMrn(q, m))
               {
                  a.add(387, 0);
                  cat.fine("Clue dMBTwinCorrelationWithoutMrn (387) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dMBTwinCorrelationWithoutMrn (387) exception: " + ex);
         };
      if (eval[388])
         try {
            if (getCluenmTwinCorrelationNoMbWithMrn(q, m))
               {
                  a.addRule(388, 0);
                  cat.fine("Clue nmTwinCorrelationNoMbWithMrn (388) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue nmTwinCorrelationNoMbWithMrn (388) exception: " + ex);
         };
      if (eval[389])
         try {
            if (getCluedTwinCorrelationNoMbWithMrn(q, m))
               {
                  a.add(389, 0);
                  cat.fine("Clue dTwinCorrelationNoMbWithMrn (389) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dTwinCorrelationNoMbWithMrn (389) exception: " + ex);
         };
      if (eval[390])
         try {
            if (getCluenmTwinCorrelationNoMbWithoutMrnButSameFacility(q, m))
               {
                  a.addRule(390, 0);
                  cat.fine("Clue nmTwinCorrelationNoMbWithoutMrnButSameFacility (390) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue nmTwinCorrelationNoMbWithoutMrnButSameFacility (390) exception: " + ex);
         };
      if (eval[391])
         try {
            if (getCluedTwinCorrelationNoMbWithoutMrnButSameFacility(q, m))
               {
                  a.add(391, 0);
                  cat.fine("Clue dTwinCorrelationNoMbWithoutMrnButSameFacility (391) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dTwinCorrelationNoMbWithoutMrnButSameFacility (391) exception: " + ex);
         };
      if (eval[392])
         try {
            if (getClueaWeakTwinCorrelation(q, m))
               {
                  a.addRule(392, 0);
                  cat.fine("Clue aWeakTwinCorrelation (392) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aWeakTwinCorrelation (392) exception: " + ex);
         };
      if (eval[393])
         try {
            if (getCluedWeakTwinCorrelation(q, m))
               {
                  a.add(393, 0);
                  cat.fine("Clue dWeakTwinCorrelation (393) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dWeakTwinCorrelation (393) exception: " + ex);
         };
      if (eval[394])
         try {
            if (getClueaDiffDobSupportedByEvents(q, m))
               {
                  a.addRule(394, 0);
                  cat.fine("Clue aDiffDobSupportedByEvents (394) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDiffDobSupportedByEvents (394) exception: " + ex);
         };
      if (eval[395])
         try {
            if (getCluedDobSupportedByEvents(q, m))
               {
                  a.add(395, 0);
                  cat.fine("Clue dDobSupportedByEvents (395) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dDobSupportedByEvents (395) exception: " + ex);
         };
      if (eval[396])
         try {
            if (getClueahDiffPatientNamesFirst(q, m))
               {
                  a.addRule(396, 0);
                  cat.fine("Clue ahDiffPatientNamesFirst (396) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue ahDiffPatientNamesFirst (396) exception: " + ex);
         };
      if (eval[397])
         try {
            if (getCluehdPatientNamesFirst(q, m))
               {
                  a.add(397, 0);
                  cat.fine("Clue hdPatientNamesFirst (397) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue hdPatientNamesFirst (397) exception: " + ex);
         };
      if (eval[398])
         try {
            if (getClueahDiffPatientNamesLast(q, m))
               {
                  a.addRule(398, 0);
                  cat.fine("Clue ahDiffPatientNamesLast (398) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue ahDiffPatientNamesLast (398) exception: " + ex);
         };
      if (eval[399])
         try {
            if (getCluehdPatientNamesLast(q, m))
               {
                  a.add(399, 0);
                  cat.fine("Clue hdPatientNamesLast (399) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue hdPatientNamesLast (399) exception: " + ex);
         };
      if (eval[400])
         try {
            if (getClueahDiffDob(q, m))
               {
                  a.addRule(400, 0);
                  cat.fine("Clue ahDiffDob (400) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue ahDiffDob (400) exception: " + ex);
         };
      if (eval[401])
         try {
            if (getCluehdDob(q, m))
               {
                  a.add(401, 0);
                  cat.fine("Clue hdDob (401) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue hdDob (401) exception: " + ex);
         };
      if (eval[402])
         try {
            if (getClueahDiffAddress(q, m))
               {
                  a.addRule(402, 0);
                  cat.fine("Clue ahDiffAddress (402) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue ahDiffAddress (402) exception: " + ex);
         };
      if (eval[403])
         try {
            if (getCluehdAddress(q, m))
               {
                  a.add(403, 0);
                  cat.fine("Clue hdAddress (403) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue hdAddress (403) exception: " + ex);
         };
      if (eval[404])
         try {
            if (getClueahDiffAddressRel(q, m))
               {
                  a.addRule(404, 0);
                  cat.fine("Clue ahDiffAddressRel (404) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue ahDiffAddressRel (404) exception: " + ex);
         };
      if (eval[405])
         try {
            if (getCluehdAddressRel(q, m))
               {
                  a.add(405, 0);
                  cat.fine("Clue hdAddressRel (405) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue hdAddressRel (405) exception: " + ex);
         };
      if (eval[406])
         try {
            if (getClueahDiffContactsNamesFirstAndLast(q, m))
               {
                  a.addRule(406, 0);
                  cat.fine("Clue ahDiffContactsNamesFirstAndLast (406) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue ahDiffContactsNamesFirstAndLast (406) exception: " + ex);
         };
      if (eval[407])
         try {
            if (getCluehdContactsNamesFirstAndLast(q, m))
               {
                  a.add(407, 0);
                  cat.fine("Clue hdContactsNamesFirstAndLast (407) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue hdContactsNamesFirstAndLast (407) exception: " + ex);
         };
      if (eval[408])
         try {
            if (getClueahDiffMothersMaiden(q, m))
               {
                  a.addRule(408, 0);
                  cat.fine("Clue ahDiffMothersMaiden (408) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue ahDiffMothersMaiden (408) exception: " + ex);
         };
      if (eval[409])
         try {
            if (getCluehdMothersMaiden(q, m))
               {
                  a.add(409, 0);
                  cat.fine("Clue hdMothersMaiden (409) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue hdMothersMaiden (409) exception: " + ex);
         };
      if (eval[410])
         try {
            if (getClueahDiffMothersDob(q, m))
               {
                  a.addRule(410, 0);
                  cat.fine("Clue ahDiffMothersDob (410) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue ahDiffMothersDob (410) exception: " + ex);
         };
      if (eval[411])
         try {
            if (getCluehdMothersDob(q, m))
               {
                  a.add(411, 0);
                  cat.fine("Clue hdMothersDob (411) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue hdMothersDob (411) exception: " + ex);
         };
      if (eval[412])
         try {
            if (getCluerJrSrIII(q, m))
               {
                  a.addRule(412, 0);
                  cat.fine("Clue rJrSrIII (412) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rJrSrIII (412) exception: " + ex);
         };
      if (eval[413])
         try {
            if (getCluerScrewyDob(q, m))
               {
                  a.addRule(413, 0);
                  cat.fine("Clue rScrewyDob (413) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rScrewyDob (413) exception: " + ex);
         };
      if (eval[414])
         try {
            if (getCluerInvalidFirstName(q, m))
               {
                  a.addRule(414, 0);
                  cat.fine("Clue rInvalidFirstName (414) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rInvalidFirstName (414) exception: " + ex);
         };
      if (eval[415])
         try {
            if (getCluerMothersFirst(q, m))
               {
                  a.addRule(415, 0);
                  cat.fine("Clue rMothersFirst (415) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rMothersFirst (415) exception: " + ex);
         };
      if (eval[416])
         try {
            if (getCluerUnparsedAddress(q, m))
               {
                  a.addRule(416, 0);
                  cat.fine("Clue rUnparsedAddress (416) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rUnparsedAddress (416) exception: " + ex);
         };
      if (eval[417])
         try {
            if (getCluerAttn(q, m))
               {
                  a.addRule(417, 0);
                  cat.fine("Clue rAttn (417) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rAttn (417) exception: " + ex);
         };
      if (eval[418])
         try {
            if (getCluerPoBox(q, m))
               {
                  a.addRule(418, 0);
                  cat.fine("Clue rPoBox (418) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rPoBox (418) exception: " + ex);
         };
      if (eval[419])
         try {
            if (getCluerDigitName(q, m))
               {
                  a.addRule(419, 0);
                  cat.fine("Clue rDigitName (419) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rDigitName (419) exception: " + ex);
         };
      if (eval[420])
         try {
            if (getCluerSameVitalId(q, m))
               {
                  a.addRule(420, 1);
                  cat.fine("Clue rSameVitalId (420) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rSameVitalId (420) exception: " + ex);
         };
      if (eval[421])
         try {
            if (getCluerBirthdaySeparationOverOneYear(q, m))
               {
                  a.addRule(421, 0);
                  cat.fine("Clue rBirthdaySeparationOverOneYear (421) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rBirthdaySeparationOverOneYear (421) exception: " + ex);
         };
      if (eval[422])
         try {
            if (getCluerLeadReports(q, m))
               {
                  a.addRule(422, 0);
                  cat.fine("Clue rLeadReports (422) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rLeadReports (422) exception: " + ex);
         };
      if (eval[423])
         try {
            if (getCluerDifferentMultiName(q, m))
               {
                  a.addRule(423, 0);
                  cat.fine("Clue rDifferentMultiName (423) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rDifferentMultiName (423) exception: " + ex);
         };
      if (eval[424])
         try {
            if (getCluerHighStackingNames05(q, m))
               {
                  a.addRule(424, 1);
                  cat.fine("Clue rHighStackingNames05 (424) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rHighStackingNames05 (424) exception: " + ex);
         };
      if (eval[425])
         try {
            if (getCluerHighStackingNames10(q, m))
               {
                  a.addRule(425, 1);
                  cat.fine("Clue rHighStackingNames10 (425) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rHighStackingNames10 (425) exception: " + ex);
         };
      if (eval[426])
         try {
            if (getCluerQueryDifferingNames(q, m))
               {
                  a.addRule(426, 0);
                  cat.fine("Clue rQueryDifferingNames (426) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rQueryDifferingNames (426) exception: " + ex);
         };
      if (eval[427])
         try {
            if (getCluerMatchDifferingNames(q, m))
               {
                  a.addRule(427, 0);
                  cat.fine("Clue rMatchDifferingNames (427) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rMatchDifferingNames (427) exception: " + ex);
         };
      if (eval[428])
         try {
            if (getCluerVitalRecordId(q, m))
               {
                  a.addRule(428, 0);
                  cat.fine("Clue rVitalRecordId (428) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rVitalRecordId (428) exception: " + ex);
         };
      if (eval[429])
         try {
            if (getCluerMatchFrozen(q, m))
               {
                  a.addRule(429, 1);
                  cat.fine("Clue rMatchFrozen (429) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rMatchFrozen (429) exception: " + ex);
         };
      if (eval[430])
         try {
            if (getCluerQueryFrozen(q, m))
               {
                  a.addRule(430, 1);
                  cat.fine("Clue rQueryFrozen (430) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rQueryFrozen (430) exception: " + ex);
         };
      if (eval[431])
         try {
            if (getCluerCirCir(q, m))
               {
                  a.addRule(431, 0);
                  cat.fine("Clue rCirCir (431) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rCirCir (431) exception: " + ex);
         };
      if (eval[432])
         try {
            if (getCluerLeadLead(q, m))
               {
                  a.addRule(432, 0);
                  cat.fine("Clue rLeadLead (432) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rLeadLead (432) exception: " + ex);
         };
      if (eval[433])
         try {
            if (getCluerLeadCIR(q, m))
               {
                  a.addRule(433, 0);
                  cat.fine("Clue rLeadCIR (433) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue rLeadCIR (433) exception: " + ex);
         };
      if (eval[434])
         try {
            if (getCluetrackEnhancement01(q, m))
               {
                  a.addRule(434, 0);
                  cat.fine("Clue trackEnhancement01 (434) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue trackEnhancement01 (434) exception: " + ex);
         };
      if (eval[435])
         try {
            if (getCluehasGenericFirstName(q, m))
               {
                  a.addRule(435, 0);
                  cat.fine("Clue hasGenericFirstName (435) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue hasGenericFirstName (435) exception: " + ex);
         };
      if (eval[436])
         try {
            if (getClueaVitalRecordMbiGenericFirstNameNoUnique(q, m))
               {
                  a.addRule(436, 0);
                  cat.fine("Clue aVitalRecordMbiGenericFirstNameNoUnique (436) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aVitalRecordMbiGenericFirstNameNoUnique (436) exception: " + ex);
         };
      if (eval[437])
         try {
            if (getCluenmVitalRecordMbiGenericFirstNameNoUnique(q, m))
               {
                  a.addRule(437, 0);
                  cat.fine("Clue nmVitalRecordMbiGenericFirstNameNoUnique (437) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue nmVitalRecordMbiGenericFirstNameNoUnique (437) exception: " + ex);
         };
      if (eval[438])
         try {
            if (getCluedVitalRecordMbiGenericFirstNameNoUnique(q, m))
               {
                  a.add(438, 0);
                  cat.fine("Clue dVitalRecordMbiGenericFirstNameNoUnique (438) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue dVitalRecordMbiGenericFirstNameNoUnique (438) exception: " + ex);
         };
      if (eval[439])
         try {
            if (getClueaFacilityInfo(q, m))
               {
                  a.addRule(439, 0);
                  cat.fine("Clue aFacilityInfo (439) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aFacilityInfo (439) exception: " + ex);
         };
      if (eval[440])
         try {
            if (getClueaDateInfo(q, m))
               {
                  a.addRule(440, 0);
                  cat.fine("Clue aDateInfo (440) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aDateInfo (440) exception: " + ex);
         };
      if (eval[441])
         try {
            if (getClueaAddressInfo(q, m))
               {
                  a.addRule(441, 0);
                  cat.fine("Clue aAddressInfo (441) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aAddressInfo (441) exception: " + ex);
         };
      if (eval[442])
         try {
            if (getClueaPhoneInfo(q, m))
               {
                  a.addRule(442, 0);
                  cat.fine("Clue aPhoneInfo (442) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aPhoneInfo (442) exception: " + ex);
         };
      if (eval[443])
         try {
            if (getClueaContactInfo(q, m))
               {
                  a.addRule(443, 0);
                  cat.fine("Clue aContactInfo (443) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aContactInfo (443) exception: " + ex);
         };
      if (eval[444])
         try {
            if (getClueaMotherInfo(q, m))
               {
                  a.addRule(444, 0);
                  cat.fine("Clue aMotherInfo (444) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aMotherInfo (444) exception: " + ex);
         };
      if (eval[445])
         try {
            if (getClueaScantyPair(q, m))
               {
                  a.addRule(445, 0);
                  cat.fine("Clue aScantyPair (445) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aScantyPair (445) exception: " + ex);
         };
      if (eval[446])
         try {
            if (getClueaScantyFourFieldMatch(q, m))
               {
                  a.addRule(446, 0);
                  cat.fine("Clue aScantyFourFieldMatch (446) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aScantyFourFieldMatch (446) exception: " + ex);
         };
      if (eval[447])
         try {
            if (getCluemScantyFourFieldMatch(q, m))
               {
                  a.add(447, 0);
                  cat.fine("Clue mScantyFourFieldMatch (447) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mScantyFourFieldMatch (447) exception: " + ex);
         };
      if (eval[448])
         try {
            if (getClueaScantyFourFieldApproxNames(q, m))
               {
                  a.addRule(448, 0);
                  cat.fine("Clue aScantyFourFieldApproxNames (448) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aScantyFourFieldApproxNames (448) exception: " + ex);
         };
      if (eval[449])
         try {
            if (getCluemScantyFourFieldApproxNames(q, m))
               {
                  a.add(449, 0);
                  cat.fine("Clue mScantyFourFieldApproxNames (449) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mScantyFourFieldApproxNames (449) exception: " + ex);
         };
      if (eval[450])
         try {
            if (getClueaScantyFourFieldApproxNamesDob(q, m))
               {
                  a.addRule(450, 0);
                  cat.fine("Clue aScantyFourFieldApproxNamesDob (450) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue aScantyFourFieldApproxNamesDob (450) exception: " + ex);
         };
      if (eval[451])
         try {
            if (getCluemScantyFourFieldApproxNamesDob(q, m))
               {
                  a.add(451, 0);
                  cat.fine("Clue mScantyFourFieldApproxNamesDob (451) fired.");
               };
         } catch (java.lang.Exception ex) {
            cat.severe("Clue mScantyFourFieldApproxNamesDob (451) exception: " + ex);
         };
      return a;
   };
}
