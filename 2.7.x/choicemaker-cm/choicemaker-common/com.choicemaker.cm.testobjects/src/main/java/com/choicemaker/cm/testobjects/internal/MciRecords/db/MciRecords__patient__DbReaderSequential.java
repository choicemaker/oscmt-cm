// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.custom.mci.gend.internal.MciRecords.db;
import java.util.logging.*;
import java.util.*;
import java.sql.*;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import com.choicemaker.cm.io.db.base.*;
import com.choicemaker.cm.custom.mci.gend.internal.MciRecords.*;
import com.choicemaker.util.StringUtils;
import com.choicemaker.cm.custom.mci.encryption.*;
import com.choicemaker.cm.custom.mci.matching.*;
import com.choicemaker.cm.custom.mci.nameparser.*;
import com.choicemaker.cm.custom.mci.validation.*;
import com.choicemaker.cm.matching.en.*;
import com.choicemaker.cm.matching.en.us.*;
import com.choicemaker.cm.matching.gen.*;
import com.choicemaker.cm.validation.eclipse.*;
import com.choicemaker.cm.validation.eclipse.impl.*;
import java.util.*;
public final class MciRecords__patient__DbReaderSequential implements DbReaderSequential {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.custom.mci.gend.internal.MciRecords.db.MciRecords__patient__DbReaderSequential.class.getName());
private ResultSet rs;
private List res = new ArrayList();
private int resSize;
private Iterator iRes;
private ArrayList l = new ArrayList();
private static DerivedSource src = DerivedSource.valueOf("db");
public String getName() {
return "MciRecords:r:patient";
}
public void open(ResultSet rs, Statement stmt) throws java.sql.SQLException {
this.rs = rs;
getRecordPatientImpl();
resSize = res.size();
if(resSize != 0) {
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordNamesImpl();
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordEthnicityImpl();
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordRaceImpl();
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordIdsImpl();
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordAddressImpl();
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordRelImpl();
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordContactsImpl();
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordMothersImpl();
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordEventsImpl();
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordProvidersImpl();
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordFrozenImpl();
stmt.getMoreResults();
this.rs = stmt.getResultSet();
getRecordIndexAndOutstandingImpl();
}
rs.close();
iRes = res.iterator();
l = null;
}
public Record getNext() {
Record r = (Record)iRes.next();
r.computeValidityAndDerived(src);
return r;
}
public boolean hasNext() {
return iRes.hasNext();
}
public int getNoCursors() {
return MciRecords__patient__DbReaderParallel.NO_CURSORS;
}
private void getRecordPatientImpl() throws java.sql.SQLException {
String __tmpStr;
while(rs.next()) {
PatientImpl r = new PatientImpl();
r.mci_id = rs.getInt(1);
r.facility_id = rs.getString(2);
r.language_cd = rs.getString(3);
r.birth_country_cd = rs.getString(4);
r.multi_birth_ind = com.choicemaker.util.StringUtils.getChar(rs.getString(5));
r.src_system_id = rs.getString(6);
r.names = NamesImpl.__zeroArray;
r.ethnicity = EthnicityImpl.__zeroArray;
r.race = RaceImpl.__zeroArray;
r.ids = IdsImpl.__zeroArray;
r.address = AddressImpl.__zeroArray;
r.contacts = ContactsImpl.__zeroArray;
r.mothers = MothersImpl.__zeroArray;
r.events = EventsImpl.__zeroArray;
r.providers = ProvidersImpl.__zeroArray;
r.frozen = FrozenImpl.__zeroArray;
r.indexAndOutstanding = IndexAndOutstandingImpl.__zeroArray;
res.add(r);
}
}
private void getRecordNamesImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
NamesImpl r = new NamesImpl();
int r__mci_id = rs.getInt(1);
r.first_name = rs.getString(2);
r.middle_name = rs.getString(3);
r.last_name = rs.getString(4);
r.dob = rs.getDate(5);
r.sex_cd = com.choicemaker.util.StringUtils.getChar(rs.getString(6));
r.facility_id = rs.getString(7);
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.names = (NamesImpl[])l.toArray(new NamesImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd;
l.add(r);
first = false;
}
if(!first) {
rcrd.names = (NamesImpl[])l.toArray(new NamesImpl[l.size()]);
l.clear();
first = true;
}
}
private void getRecordEthnicityImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
EthnicityImpl r = new EthnicityImpl();
int r__mci_id = rs.getInt(1);
r.ethnicity_cd = rs.getString(2);
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.ethnicity = (EthnicityImpl[])l.toArray(new EthnicityImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd;
l.add(r);
first = false;
}
if(!first) {
rcrd.ethnicity = (EthnicityImpl[])l.toArray(new EthnicityImpl[l.size()]);
l.clear();
first = true;
}
}
private void getRecordRaceImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
RaceImpl r = new RaceImpl();
int r__mci_id = rs.getInt(1);
r.race_cd = rs.getString(2);
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.race = (RaceImpl[])l.toArray(new RaceImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd;
l.add(r);
first = false;
}
if(!first) {
rcrd.race = (RaceImpl[])l.toArray(new RaceImpl[l.size()]);
l.clear();
first = true;
}
}
private void getRecordIdsImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
IdsImpl r = new IdsImpl();
int r__mci_id = rs.getInt(1);
r.patient_id = rs.getString(2);
r.identifier_type = rs.getString(3);
r.facility_id = rs.getString(4);
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.ids = (IdsImpl[])l.toArray(new IdsImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd;
l.add(r);
first = false;
}
if(!first) {
rcrd.ids = (IdsImpl[])l.toArray(new IdsImpl[l.size()]);
l.clear();
first = true;
}
}
private void getRecordAddressImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
AddressImpl r = new AddressImpl();
int r__mci_id = rs.getInt(1);
r.addr_id = rs.getLong(2);
r.boro_cd = com.choicemaker.util.StringUtils.getChar(rs.getString(3));
r.bin = rs.getLong(4);
r.house_no = rs.getString(5);
r.street_cd = rs.getString(6);
r.street_name = rs.getString(7);
r.city_name = rs.getString(8);
r.state_cd = rs.getString(9);
r.zipcode = rs.getString(10);
r.rel = RelImpl.__zeroArray;
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.address = (AddressImpl[])l.toArray(new AddressImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd;
l.add(r);
first = false;
}
if(!first) {
rcrd.address = (AddressImpl[])l.toArray(new AddressImpl[l.size()]);
l.clear();
first = true;
}
}
private void getRecordRelImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
int i1 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
RelImpl r = new RelImpl();
int r__mci_id = rs.getInt(1);
long r__addr_id = rs.getLong(2);
r.last_date_rptd = rs.getDate(3);
r.apt_no = rs.getString(4);
r.addr_type_cd = rs.getString(5);
r.raw_street_name = rs.getString(6);
r.phone_no = rs.getString(7);
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.address[i1].rel = (RelImpl[])l.toArray(new RelImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
i1 = -1;
}
if(i1 < 0 || rcrd.address[i1].addr_id != r__addr_id) {
if(!first) {
rcrd.address[i1].rel = (RelImpl[])l.toArray(new RelImpl[l.size()]);
l.clear();
first = true;
}
while(++i1 < rcrd.address.length && rcrd.address[i1].addr_id != r__addr_id) {}
if(i1 == rcrd.address.length) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd.address[i1];
l.add(r);
first = false;
}
if(!first) {
rcrd.address[i1].rel = (RelImpl[])l.toArray(new RelImpl[l.size()]);
l.clear();
first = true;
}
}
private void getRecordContactsImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
ContactsImpl r = new ContactsImpl();
int r__mci_id = rs.getInt(1);
r.relationship_cd = rs.getString(2);
r.last_name = rs.getString(3);
r.first_name = rs.getString(4);
r.sex_cd = com.choicemaker.util.StringUtils.getChar(rs.getString(5));
r.phone_no_h = rs.getString(6);
r.phone_no_w = rs.getString(7);
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.contacts = (ContactsImpl[])l.toArray(new ContactsImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd;
l.add(r);
first = false;
}
if(!first) {
rcrd.contacts = (ContactsImpl[])l.toArray(new ContactsImpl[l.size()]);
l.clear();
first = true;
}
}
private void getRecordMothersImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
MothersImpl r = new MothersImpl();
int r__mci_id = rs.getInt(1);
r.mothers_maiden_name = rs.getString(2);
r.mothers_dob = rs.getDate(3);
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.mothers = (MothersImpl[])l.toArray(new MothersImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd;
l.add(r);
first = false;
}
if(!first) {
rcrd.mothers = (MothersImpl[])l.toArray(new MothersImpl[l.size()]);
l.clear();
first = true;
}
}
private void getRecordEventsImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
EventsImpl r = new EventsImpl();
int r__mci_id = rs.getInt(1);
r.event_date = rs.getDate(2);
r.event_type_cd = rs.getString(3);
r.facility_id = rs.getString(4);
r.event_id = rs.getString(5);
r.lab_date = rs.getDate(6);
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.events = (EventsImpl[])l.toArray(new EventsImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd;
l.add(r);
first = false;
}
if(!first) {
rcrd.events = (EventsImpl[])l.toArray(new EventsImpl[l.size()]);
l.clear();
first = true;
}
}
private void getRecordProvidersImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
ProvidersImpl r = new ProvidersImpl();
int r__mci_id = rs.getInt(1);
r.provider_id = rs.getString(2);
r.facility_id = rs.getString(3);
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.providers = (ProvidersImpl[])l.toArray(new ProvidersImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd;
l.add(r);
first = false;
}
if(!first) {
rcrd.providers = (ProvidersImpl[])l.toArray(new ProvidersImpl[l.size()]);
l.clear();
first = true;
}
}
private void getRecordFrozenImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
FrozenImpl r = new FrozenImpl();
int r__mci_id = rs.getInt(1);
r.src_system_id = rs.getString(2);
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.frozen = (FrozenImpl[])l.toArray(new FrozenImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd;
l.add(r);
first = false;
}
if(!first) {
rcrd.frozen = (FrozenImpl[])l.toArray(new FrozenImpl[l.size()]);
l.clear();
first = true;
}
}
private void getRecordIndexAndOutstandingImpl() throws java.sql.SQLException {
String __tmpStr;
int i0 = -1;
boolean first = true;
PatientImpl rcrd = null;
while(rs.next()) {
IndexAndOutstandingImpl r = new IndexAndOutstandingImpl();
int r__mci_id = rs.getInt(1);
r.src_system_id = rs.getString(2);
r.patient_id = rs.getInt(3);
if(i0 < 0 || rcrd.mci_id != r__mci_id) {
if(!first) {
rcrd.indexAndOutstanding = (IndexAndOutstandingImpl[])l.toArray(new IndexAndOutstandingImpl[l.size()]);
l.clear();
first = true;
}
while(++i0 < resSize && (rcrd = (PatientImpl)res.get(i0)) != null && rcrd.mci_id != r__mci_id) {}
if(i0 == resSize) {
logger.warning("No matching outer record found.");
return;
}
}
r.outer = rcrd;
l.add(r);
first = false;
}
if(!first) {
rcrd.indexAndOutstanding = (IndexAndOutstandingImpl[])l.toArray(new IndexAndOutstandingImpl[l.size()]);
l.clear();
first = true;
}
}
public String getMasterId() {
return MciRecords__patient__DbReaderParallel.masterId;
}
public String getMasterIdType() {
return MciRecords__patient__DbReaderParallel.masterIdType;
}
public DbView[] getViews() {
return MciRecords__patient__DbReaderParallel.views;
}
}
