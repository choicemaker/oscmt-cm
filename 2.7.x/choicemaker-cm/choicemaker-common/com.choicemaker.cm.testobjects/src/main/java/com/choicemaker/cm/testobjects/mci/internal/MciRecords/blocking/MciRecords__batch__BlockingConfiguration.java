// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.testobjects.mci.internal.MciRecords.blocking;
import java.util.logging.*;
import java.util.*;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import com.choicemaker.cm.io.blocking.automated.*;
import com.choicemaker.cm.io.blocking.automated.base.*;






import com.choicemaker.util.StringUtils;









import java.util.*;
public final class MciRecords__batch__BlockingConfiguration extends BlockingConfiguration {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.testobjects.mci.internal.MciRecords.blocking.MciRecords__batch__BlockingConfiguration.class.getName());
public MciRecords__batch__BlockingConfiguration(String dbConf) {
int dbConfIndex;
if("patient".equals(dbConf)) {
dbConfIndex = 0;
 } else {
throw new IllegalArgumentException("dbConf: " + dbConf);
}
dbTables = dbConfigurations[dbConfIndex].dbts;
dbFields = dbConfigurations[dbConfIndex].dbfs;
blockingFields = dbConfigurations[dbConfIndex].bfs;
name = dbConfigurations[dbConfIndex].name;
}
public IBlockingValue[] createBlockingValues(Record q) {
init(NUM_BLOCKING_FIELDS);
addPatientImpl((PatientImpl)q);
return unionValues();
}
private void addPatientImpl(PatientImpl r) {
addNamesImpl(r.names);
addIdsImpl(r.ids);
addAddressImpl(r.address);
addMothersImpl(r.mothers);
}
private void addNamesImpl(NamesImpl[] rs) {
for(int i = 0; i < rs.length; ++i) {
NamesImpl r = rs[i];
__l0 = r.__v_first_name? addField(0, r.first_name, null) : null;
__l1 = r.__v_first_name? addField(1, r.first_name, null) : null;
__l2 = r.__v_last_name? addField(2, r.last_name, null) : null;
__l3 = r.__v_last_name? addField(3, r.last_name, null) : null;
__l4 = r.__v_last_name? addField(4, r.last_name, null) : null;
__l5 = r.__v_sound_first_name? addField(5, r.sound_first_name,  __l0 != null ? new IBlockingValue[]{ __l0} : null) : null;
__l6 = r.__v_sound_last_name? addField(6, r.sound_last_name,  __l2 != null ? new IBlockingValue[]{ __l2} : null) : null;
__l7 = r.__v_dob? addField(7, com.choicemaker.cm.core.util.DateHelper.formatDb(r.dob), null) : null;
__l8 = r.__v_dob_y_m? addField(8, r.dob_y_m,  __l7 != null ? new IBlockingValue[]{ __l7} : null) : null;
}
}
private void addIdsImpl(IdsImpl[] rs) {
for(int i = 0; i < rs.length; ++i) {
IdsImpl r = rs[i];
__l9 = r.__v_patient_id_norm && (!"CIR".equals(r.identifier_type))? addField(9, r.patient_id_norm, null) : null;
}
}
private void addAddressImpl(AddressImpl[] rs) {
for(int i = 0; i < rs.length; ++i) {
AddressImpl r = rs[i];
__l10 = r.__v_bin? addField(10, String.valueOf(r.bin), null) : null;
}
}
private void addMothersImpl(MothersImpl[] rs) {
for(int i = 0; i < rs.length; ++i) {
MothersImpl r = rs[i];
__l11 = r.__v_mothers_maiden_name && (MciNameUtils.noIdenticalLastName(r.mothers_maiden_name, r.outer))? addField(11, r.mothers_maiden_name, null) : null;
__l12 = r.__v_mothers_dob? addField(12, com.choicemaker.cm.core.util.DateHelper.formatDb(r.mothers_dob), null) : null;
}
}
private static final BlockingConfiguration.DbConfiguration[] dbConfigurations = new BlockingConfiguration.DbConfiguration[1];
static {
QueryField[] qfs;
DbTable[] dbts;
DbField[] dbfs;
BlockingField[] bfs;
qfs = new QueryField[] {
new QueryField(),
new QueryField(),
new QueryField(),
new QueryField(),
new QueryField(),
new QueryField(),
new QueryField(),
new QueryField(),
new QueryField(),
new QueryField()
};
dbts = new DbTable[] {
new DbTable("TB_PATIENT", 0, "mci_id"),
new DbTable("ST_PATIENT_NAMES", 1, "mci_id"),
new DbTable("ST_MOTHERS_MAIDEN_NAME", 2, "mci_id"),
new DbTable("ST_PATIENT_IDS", 3, "mci_id"),
new DbTable("vw_cmt_MciRecords_r_patient5", 4, "mci_id")
};
dbfs = new DbField[] {
new DbField(0, "first_name", "String", dbts[1], 29),
new DbField(1, "last_name", "String", dbts[1], 29),
new DbField(2, "mothers_maiden_name", "String", dbts[2], 29),
new DbField(3, "sound_first_name", "String", dbts[1], 29),
new DbField(4, "sound_last_name", "String", dbts[1], 29),
new DbField(5, "dob", "Date", dbts[1], 49),
new DbField(6, "dob_y_m", "String", dbts[1], 49),
new DbField(7, "patient_id_norm", "String", dbts[3], 29),
new DbField(8, "bin", "long", dbts[4], 29),
new DbField(9, "mothers_dob", "Date", dbts[2], 29)
};
bfs = new BlockingField[] {
new BlockingField(0, qfs[0], dbfs[0], ""),
new BlockingField(1, qfs[0], dbfs[1], ""),
new BlockingField(2, qfs[1], dbfs[1], ""),
new BlockingField(3, qfs[1], dbfs[0], ""),
new BlockingField(4, qfs[1], dbfs[2], ""),
new BlockingField(5, qfs[2], dbfs[3], ""),
new BlockingField(6, qfs[3], dbfs[4], ""),
new BlockingField(7, qfs[4], dbfs[5], ""),
new BlockingField(8, qfs[5], dbfs[6], ""),
new BlockingField(9, qfs[6], dbfs[7], ""),
new BlockingField(10, qfs[7], dbfs[8], ""),
new BlockingField(11, qfs[8], dbfs[1], ""),
new BlockingField(12, qfs[9], dbfs[9], "")
};
dbConfigurations[0] = new DbConfiguration("MciRecords:b:batch:patient", qfs, dbts, dbfs, bfs);
};
private static final int NUM_BLOCKING_FIELDS = 13;
private IBlockingValue __l0;
private IBlockingValue __l1;
private IBlockingValue __l2;
private IBlockingValue __l3;
private IBlockingValue __l4;
private IBlockingValue __l5;
private IBlockingValue __l6;
private IBlockingValue __l7;
private IBlockingValue __l8;
private IBlockingValue __l9;
private IBlockingValue __l10;
private IBlockingValue __l11;
private IBlockingValue __l12;
static {
dbConfigurations[0].qfs[0].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].qfs[2]}
});
dbConfigurations[0].qfs[1].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].qfs[3]}
});
dbConfigurations[0].qfs[2].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].qfs[0]}
});
dbConfigurations[0].qfs[3].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].qfs[1]}
});
dbConfigurations[0].qfs[4].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].qfs[5]}
});
dbConfigurations[0].qfs[5].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].qfs[4]}
});
dbConfigurations[0].dbfs[0].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].dbfs[3]}
});
dbConfigurations[0].dbfs[1].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].dbfs[4]}
});
dbConfigurations[0].dbfs[3].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].dbfs[0]}
});
dbConfigurations[0].dbfs[4].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].dbfs[1]}
});
dbConfigurations[0].dbfs[5].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].dbfs[6]}
});
dbConfigurations[0].dbfs[6].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].dbfs[5]}
});
dbConfigurations[0].bfs[4].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].bfs[11]}
});
dbConfigurations[0].bfs[11].setIllegalCombinations(new IField[][] {
{dbConfigurations[0].bfs[4]}
});
}
}
