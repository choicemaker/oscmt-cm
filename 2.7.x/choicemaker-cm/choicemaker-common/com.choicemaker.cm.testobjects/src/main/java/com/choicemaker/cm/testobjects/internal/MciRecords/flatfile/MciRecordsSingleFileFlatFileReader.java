// Generated by ChoiceMaker. Do not edit.
package com.choicemaker.cm.custom.mci.gend.internal.MciRecords.flatfile;
import java.util.logging.*;
import java.util.*;
import java.io.*;
import com.choicemaker.cm.core.*;
import com.choicemaker.cm.core.base.*;
import com.choicemaker.cm.io.flatfile.base.*;
import com.choicemaker.cm.custom.mci.gend.internal.MciRecords.*;
import com.choicemaker.util.StringUtils;
import com.choicemaker.cm.custom.mci.encryption.*;
import com.choicemaker.cm.custom.mci.matching.*;
import com.choicemaker.cm.custom.mci.nameparser.*;
import com.choicemaker.cm.custom.mci.validation.*;
import com.choicemaker.cm.matching.en.*;
import com.choicemaker.cm.matching.en.us.*;
import com.choicemaker.cm.matching.gen.*;
import com.choicemaker.cm.validation.eclipse.*;
import com.choicemaker.cm.validation.eclipse.impl.*;
import java.util.*;
public final class MciRecordsSingleFileFlatFileReader implements FlatFileReader {
private static Logger logger = Logger.getLogger(com.choicemaker.cm.custom.mci.gend.internal.MciRecords.flatfile.MciRecordsSingleFileFlatFileReader.class.getName());
private Tokenizer tokenizer;
private boolean tagged;
private boolean singleLine;
private static DerivedSource src = DerivedSource.valueOf("flatfile");
public MciRecordsSingleFileFlatFileReader(Tokenizer tokenizer, boolean tagged, boolean singleLine) {
this.tokenizer = tokenizer;
this.tagged = tagged;
this.singleLine = singleLine;
}
public void open() {}
public Record getRecord() throws IOException {
Record r = getRecordPatientImpl();
r.computeValidityAndDerived(src);
return r;
}
private PatientImpl getRecordPatientImpl() throws IOException {
if(tagged && tokenizer.tag != "0") {
throw new IOException("Illegal tag: " + tokenizer.tag);
}
PatientImpl o__PatientImpl = new PatientImpl();
o__PatientImpl.mci_id = tokenizer.nextInt(11);
o__PatientImpl.facility_id = tokenizer.nextTrimedString(32);
o__PatientImpl.language_cd = tokenizer.nextTrimedString(32);
o__PatientImpl.birth_country_cd = tokenizer.nextTrimedString(32);
o__PatientImpl.multi_birth_ind = tokenizer.nextChar(1, '\u0020');
o__PatientImpl.src_system_id = tokenizer.nextTrimedString(32);
if(!singleLine) tokenizer.readLine();
while(true) {
if(tokenizer.tag == "1") {
l__NamesImpl.add(getRecordNamesImpl(o__PatientImpl));
} else if(tokenizer.tag == "2") {
l__EthnicityImpl.add(getRecordEthnicityImpl(o__PatientImpl));
} else if(tokenizer.tag == "3") {
l__RaceImpl.add(getRecordRaceImpl(o__PatientImpl));
} else if(tokenizer.tag == "4") {
l__IdsImpl.add(getRecordIdsImpl(o__PatientImpl));
} else if(tokenizer.tag == "5") {
l__AddressImpl.add(getRecordAddressImpl(o__PatientImpl));
} else if(tokenizer.tag == "7") {
l__ContactsImpl.add(getRecordContactsImpl(o__PatientImpl));
} else if(tokenizer.tag == "8") {
l__MothersImpl.add(getRecordMothersImpl(o__PatientImpl));
} else if(tokenizer.tag == "9") {
l__EventsImpl.add(getRecordEventsImpl(o__PatientImpl));
} else if(tokenizer.tag == "10") {
l__ProvidersImpl.add(getRecordProvidersImpl(o__PatientImpl));
} else if(tokenizer.tag == "11") {
l__FrozenImpl.add(getRecordFrozenImpl(o__PatientImpl));
} else if(tokenizer.tag == "12") {
l__IndexAndOutstandingImpl.add(getRecordIndexAndOutstandingImpl(o__PatientImpl));
} else if(singleLine && !tagged) {
l__NamesImpl.add(getRecordNamesImpl(o__PatientImpl));
l__EthnicityImpl.add(getRecordEthnicityImpl(o__PatientImpl));
l__RaceImpl.add(getRecordRaceImpl(o__PatientImpl));
l__IdsImpl.add(getRecordIdsImpl(o__PatientImpl));
l__AddressImpl.add(getRecordAddressImpl(o__PatientImpl));
l__ContactsImpl.add(getRecordContactsImpl(o__PatientImpl));
l__MothersImpl.add(getRecordMothersImpl(o__PatientImpl));
l__EventsImpl.add(getRecordEventsImpl(o__PatientImpl));
l__ProvidersImpl.add(getRecordProvidersImpl(o__PatientImpl));
l__FrozenImpl.add(getRecordFrozenImpl(o__PatientImpl));
l__IndexAndOutstandingImpl.add(getRecordIndexAndOutstandingImpl(o__PatientImpl));
break;
} else {
break;
}
}
if(l__NamesImpl.size() == 0) {
o__PatientImpl.names = NamesImpl.__zeroArray;
} else {
l__NamesImpl.toArray((o__PatientImpl.names = new NamesImpl[l__NamesImpl.size()]));
l__NamesImpl.clear();
}
if(l__EthnicityImpl.size() == 0) {
o__PatientImpl.ethnicity = EthnicityImpl.__zeroArray;
} else {
l__EthnicityImpl.toArray((o__PatientImpl.ethnicity = new EthnicityImpl[l__EthnicityImpl.size()]));
l__EthnicityImpl.clear();
}
if(l__RaceImpl.size() == 0) {
o__PatientImpl.race = RaceImpl.__zeroArray;
} else {
l__RaceImpl.toArray((o__PatientImpl.race = new RaceImpl[l__RaceImpl.size()]));
l__RaceImpl.clear();
}
if(l__IdsImpl.size() == 0) {
o__PatientImpl.ids = IdsImpl.__zeroArray;
} else {
l__IdsImpl.toArray((o__PatientImpl.ids = new IdsImpl[l__IdsImpl.size()]));
l__IdsImpl.clear();
}
if(l__AddressImpl.size() == 0) {
o__PatientImpl.address = AddressImpl.__zeroArray;
} else {
l__AddressImpl.toArray((o__PatientImpl.address = new AddressImpl[l__AddressImpl.size()]));
l__AddressImpl.clear();
}
if(l__ContactsImpl.size() == 0) {
o__PatientImpl.contacts = ContactsImpl.__zeroArray;
} else {
l__ContactsImpl.toArray((o__PatientImpl.contacts = new ContactsImpl[l__ContactsImpl.size()]));
l__ContactsImpl.clear();
}
if(l__MothersImpl.size() == 0) {
o__PatientImpl.mothers = MothersImpl.__zeroArray;
} else {
l__MothersImpl.toArray((o__PatientImpl.mothers = new MothersImpl[l__MothersImpl.size()]));
l__MothersImpl.clear();
}
if(l__EventsImpl.size() == 0) {
o__PatientImpl.events = EventsImpl.__zeroArray;
} else {
l__EventsImpl.toArray((o__PatientImpl.events = new EventsImpl[l__EventsImpl.size()]));
l__EventsImpl.clear();
}
if(l__ProvidersImpl.size() == 0) {
o__PatientImpl.providers = ProvidersImpl.__zeroArray;
} else {
l__ProvidersImpl.toArray((o__PatientImpl.providers = new ProvidersImpl[l__ProvidersImpl.size()]));
l__ProvidersImpl.clear();
}
if(l__FrozenImpl.size() == 0) {
o__PatientImpl.frozen = FrozenImpl.__zeroArray;
} else {
l__FrozenImpl.toArray((o__PatientImpl.frozen = new FrozenImpl[l__FrozenImpl.size()]));
l__FrozenImpl.clear();
}
if(l__IndexAndOutstandingImpl.size() == 0) {
o__PatientImpl.indexAndOutstanding = IndexAndOutstandingImpl.__zeroArray;
} else {
l__IndexAndOutstandingImpl.toArray((o__PatientImpl.indexAndOutstanding = new IndexAndOutstandingImpl[l__IndexAndOutstandingImpl.size()]));
l__IndexAndOutstandingImpl.clear();
}
return o__PatientImpl;
}
private List l__NamesImpl = new ArrayList();
private NamesImpl getRecordNamesImpl(PatientImpl outer) throws IOException {
NamesImpl o__NamesImpl = new NamesImpl();
o__NamesImpl.outer = outer;
o__NamesImpl.first_name = tokenizer.nextTrimedString(32);
o__NamesImpl.middle_name = tokenizer.nextTrimedString(32);
o__NamesImpl.last_name = tokenizer.nextTrimedString(32);
o__NamesImpl.dob = tokenizer.nextDate(10);
o__NamesImpl.sex_cd = tokenizer.nextChar(1, '\u0020');
o__NamesImpl.facility_id = tokenizer.nextTrimedString(32);
if(!singleLine) tokenizer.readLine();
return o__NamesImpl;
}
private List l__EthnicityImpl = new ArrayList();
private EthnicityImpl getRecordEthnicityImpl(PatientImpl outer) throws IOException {
EthnicityImpl o__EthnicityImpl = new EthnicityImpl();
o__EthnicityImpl.outer = outer;
o__EthnicityImpl.ethnicity_cd = tokenizer.nextTrimedString(32);
if(!singleLine) tokenizer.readLine();
return o__EthnicityImpl;
}
private List l__RaceImpl = new ArrayList();
private RaceImpl getRecordRaceImpl(PatientImpl outer) throws IOException {
RaceImpl o__RaceImpl = new RaceImpl();
o__RaceImpl.outer = outer;
o__RaceImpl.race_cd = tokenizer.nextTrimedString(32);
if(!singleLine) tokenizer.readLine();
return o__RaceImpl;
}
private List l__IdsImpl = new ArrayList();
private IdsImpl getRecordIdsImpl(PatientImpl outer) throws IOException {
IdsImpl o__IdsImpl = new IdsImpl();
o__IdsImpl.outer = outer;
o__IdsImpl.patient_id = tokenizer.nextTrimedString(32);
o__IdsImpl.identifier_type = tokenizer.nextTrimedString(32);
o__IdsImpl.facility_id = tokenizer.nextTrimedString(32);
if(!singleLine) tokenizer.readLine();
return o__IdsImpl;
}
private List l__AddressImpl = new ArrayList();
private AddressImpl getRecordAddressImpl(PatientImpl outer) throws IOException {
AddressImpl o__AddressImpl = new AddressImpl();
o__AddressImpl.outer = outer;
o__AddressImpl.addr_id = tokenizer.nextLong(20);
o__AddressImpl.boro_cd = tokenizer.nextChar(1, '\u0020');
o__AddressImpl.bin = tokenizer.nextLong(20);
o__AddressImpl.house_no = tokenizer.nextTrimedString(32);
o__AddressImpl.street_cd = tokenizer.nextTrimedString(32);
o__AddressImpl.street_name = tokenizer.nextTrimedString(32);
o__AddressImpl.city_name = tokenizer.nextTrimedString(32);
o__AddressImpl.state_cd = tokenizer.nextTrimedString(32);
o__AddressImpl.zipcode = tokenizer.nextTrimedString(32);
if(!singleLine) tokenizer.readLine();
while(true) {
if(tokenizer.tag == "6") {
l__RelImpl.add(getRecordRelImpl(o__AddressImpl));
} else if(singleLine && !tagged) {
l__RelImpl.add(getRecordRelImpl(o__AddressImpl));
break;
} else {
break;
}
}
if(l__RelImpl.size() == 0) {
o__AddressImpl.rel = RelImpl.__zeroArray;
} else {
l__RelImpl.toArray((o__AddressImpl.rel = new RelImpl[l__RelImpl.size()]));
l__RelImpl.clear();
}
return o__AddressImpl;
}
private List l__RelImpl = new ArrayList();
private RelImpl getRecordRelImpl(AddressImpl outer) throws IOException {
RelImpl o__RelImpl = new RelImpl();
o__RelImpl.outer = outer;
o__RelImpl.last_date_rptd = tokenizer.nextDate(10);
o__RelImpl.apt_no = tokenizer.nextTrimedString(32);
o__RelImpl.addr_type_cd = tokenizer.nextTrimedString(32);
o__RelImpl.raw_street_name = tokenizer.nextTrimedString(32);
o__RelImpl.phone_no = tokenizer.nextTrimedString(32);
if(!singleLine) tokenizer.readLine();
return o__RelImpl;
}
private List l__ContactsImpl = new ArrayList();
private ContactsImpl getRecordContactsImpl(PatientImpl outer) throws IOException {
ContactsImpl o__ContactsImpl = new ContactsImpl();
o__ContactsImpl.outer = outer;
o__ContactsImpl.relationship_cd = tokenizer.nextTrimedString(32);
o__ContactsImpl.last_name = tokenizer.nextTrimedString(32);
o__ContactsImpl.first_name = tokenizer.nextTrimedString(32);
o__ContactsImpl.sex_cd = tokenizer.nextChar(1, '\u0020');
o__ContactsImpl.phone_no_h = tokenizer.nextTrimedString(32);
o__ContactsImpl.phone_no_w = tokenizer.nextTrimedString(32);
if(!singleLine) tokenizer.readLine();
return o__ContactsImpl;
}
private List l__MothersImpl = new ArrayList();
private MothersImpl getRecordMothersImpl(PatientImpl outer) throws IOException {
MothersImpl o__MothersImpl = new MothersImpl();
o__MothersImpl.outer = outer;
o__MothersImpl.mothers_maiden_name = tokenizer.nextTrimedString(32);
o__MothersImpl.mothers_dob = tokenizer.nextDate(10);
if(!singleLine) tokenizer.readLine();
return o__MothersImpl;
}
private List l__EventsImpl = new ArrayList();
private EventsImpl getRecordEventsImpl(PatientImpl outer) throws IOException {
EventsImpl o__EventsImpl = new EventsImpl();
o__EventsImpl.outer = outer;
o__EventsImpl.event_date = tokenizer.nextDate(10);
o__EventsImpl.event_type_cd = tokenizer.nextTrimedString(32);
o__EventsImpl.facility_id = tokenizer.nextTrimedString(32);
o__EventsImpl.event_id = tokenizer.nextTrimedString(32);
o__EventsImpl.lab_date = tokenizer.nextDate(10);
if(!singleLine) tokenizer.readLine();
return o__EventsImpl;
}
private List l__ProvidersImpl = new ArrayList();
private ProvidersImpl getRecordProvidersImpl(PatientImpl outer) throws IOException {
ProvidersImpl o__ProvidersImpl = new ProvidersImpl();
o__ProvidersImpl.outer = outer;
o__ProvidersImpl.provider_id = tokenizer.nextTrimedString(32);
o__ProvidersImpl.facility_id = tokenizer.nextTrimedString(32);
if(!singleLine) tokenizer.readLine();
return o__ProvidersImpl;
}
private List l__FrozenImpl = new ArrayList();
private FrozenImpl getRecordFrozenImpl(PatientImpl outer) throws IOException {
FrozenImpl o__FrozenImpl = new FrozenImpl();
o__FrozenImpl.outer = outer;
o__FrozenImpl.src_system_id = tokenizer.nextTrimedString(32);
if(!singleLine) tokenizer.readLine();
return o__FrozenImpl;
}
private List l__IndexAndOutstandingImpl = new ArrayList();
private IndexAndOutstandingImpl getRecordIndexAndOutstandingImpl(PatientImpl outer) throws IOException {
IndexAndOutstandingImpl o__IndexAndOutstandingImpl = new IndexAndOutstandingImpl();
o__IndexAndOutstandingImpl.outer = outer;
o__IndexAndOutstandingImpl.src_system_id = tokenizer.nextTrimedString(32);
o__IndexAndOutstandingImpl.patient_id = tokenizer.nextInt(11);
if(!singleLine) tokenizer.readLine();
return o__IndexAndOutstandingImpl;
}
}
